import{_ as s,o as e,c as t,h as p,a as n,e as a}from"./app-eVdJebrU.js";const i="/assets/image-20211024160108574-1dymvfUg.png",l="/assets/1628562524452-vgIBU_pb.png",o="/assets/1628563735767-BslBAyY9.png",c="/assets/1628564232976-UmRkbhfg.png",u="/assets/1628564696941-zSB0xFK8.png",r="/assets/image-20211027154853135-GjtlAd_8.png",d="/assets/1635929466603-tm0DDdZ8.png",k="/assets/1628577910849-uqHrxSuf.png",m="/assets/image-20230311180319358-XFlvk_SL.png",v="/assets/image-20230311181203280-71tbcznE.png",g="/assets/1628582303367-0YTH0EVo.png",b="/assets/1636690773904-4Bf6t5VZ.png",h="/assets/1636690910445-zo-D5pSE.png",f="/assets/1635929398644-PuZNe-WK.png",y="/assets/11111-wrOCjans.png",_="/assets/1628586175690-vWoiHqBf.png",x="/assets/image-20211027154103215-GjxAwRaA.png",C="/assets/image-20211027153816471-ke0TtmIq.png",S="/assets/1628599691173-r6KCg7Zd.png",R="/assets/1628599720713-Zn72qeAO.png",F="/assets/1628603540688-OkDcn6w3.png",I="/assets/1636707016650-nDq6WzVx.png",w="/assets/1636819395042-J5opZLaO.png",E="/assets/1628608818706-9mzbwyuu.png",T={},A=n("p",null,"学习目标：",-1),q=n("ul",null,[n("li",null,"了解架构演进过程"),n("li",null,"理解微服务拆分流程及远程调用过程"),n("li",null,"掌握注册中心Eureka(nacos)的使用"),n("li",null,"掌握负载均衡Ribbon的使用(配置)"),n("li",null,"能够基于Feign实现服务远程调用（使用）")],-1),j=a(`<h2 id="_1-服务架构演进" tabindex="-1"><a class="header-anchor" href="#_1-服务架构演进" aria-hidden="true">#</a> 1 服务架构演进</h2><p>章节知识点</p><ul><li>单体架构</li><li>分布式架构</li><li>微服务架构</li><li>SpringCloud</li></ul><p>过去的互联网：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">1</span><span class="token punctuation">:</span><span class="token value attr-value">用户量不多</span>
<span class="token key attr-name">2</span><span class="token punctuation">:</span><span class="token value attr-value">并发低</span>
<span class="token key attr-name">3</span><span class="token punctuation">:</span><span class="token value attr-value">数据少</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在的互联网:</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">1</span><span class="token punctuation">:</span><span class="token value attr-value">用户多</span>
<span class="token key attr-name">2</span><span class="token punctuation">:</span><span class="token value attr-value">并发高</span>
<span class="token key attr-name">3</span><span class="token punctuation">:</span><span class="token value attr-value">数据庞大</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>互联网架构从简到繁的演进经历了单体架构、分布式架构、SOA架构、微服务架构以及最新的service mesh的演进过程。</p><h3 id="_1-1-单体架构" tabindex="-1"><a class="header-anchor" href="#_1-1-单体架构" aria-hidden="true">#</a> 1.1 单体架构</h3><p>1)概念</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>早期互联网产品用户量少，并发量低，数据量小，单个应用服务器可以满足需要，这就是最早互联网架构。我们用一句话总结什么是单体架构：将业务的所有功能集中在一个项目中开发，部署为一个节点。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2)架构图</p><img src="`+i+`" align="left"><p>3)优缺点</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#优点：</span>
	1)架构简单
	2)部署成本低
	
<span class="token comment">#缺点：</span>
	1)耦合度高
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-分布式架构" tabindex="-1"><a class="header-anchor" href="#_1-2-分布式架构" aria-hidden="true">#</a> 1.2 分布式架构</h3><p>1)概念</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>根据业务功能对系统进行拆分，每个业务模块称为一个服务。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2)架构图</p><img src="`+l+`" align="left" style="zoom:67%;"><p>3)优缺点</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#优点</span>
	1)降低服务耦合度
	2)有利于服务升级拓展
	
<span class="token comment">#缺点</span>
	1)维护成本增加
	2)服务间调用复杂度增加
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4)需要解决的问题</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>1)服务拆分粒度如何？
2)服务之间如何实现调用？
3)服务关系如何管理？
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-微服务" tabindex="-1"><a class="header-anchor" href="#_1-3-微服务" aria-hidden="true">#</a> 1.3 微服务</h3><p>1)概念</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">微服务是系统架构的一种设计风格,将一个原本独立的服务拆分成多个小型服务,每个服务独立运行在在各自的进程中,服务之间通过</span> <span class="token value attr-value">HTTP RESTful API 进行通信.每个小型的服务都围绕着系统中的某个耦合度较高的业务进行构建。</span>

<span class="token comment">#微服务是一种经过良好设计的分布式架构方案，而全球的互联网公司都在积极尝试自己的微服务落地方案。其中在java领域最引人注目的是SpringCloud提供的方案。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2)架构图</p><img src="`+o+`" align="left" style="zoom:67%;"><p>3)微服务架构特征</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">单一职责</span><span class="token punctuation">:</span><span class="token value attr-value">微服务拆分粒度更小，每个服务都应对唯一的业务能力，做到单一职责</span>
<span class="token key attr-name">自治</span><span class="token punctuation">:</span><span class="token value attr-value">团队独立、技术独立、数据独立，独立部署和交付</span>
<span class="token key attr-name">面向服务</span><span class="token punctuation">:</span><span class="token value attr-value">服务提供统一标准的接口，与语言无关、与技术无关</span>
<span class="token key attr-name">隔离性强</span><span class="token punctuation">:</span><span class="token value attr-value">服务调用做好隔离、容错、降级，避免出现级联问题</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-springcloud" tabindex="-1"><a class="header-anchor" href="#_1-4-springcloud" aria-hidden="true">#</a> 1.4 SpringCloud</h3><ul><li><p>SpringCloud是目前国内使用最广泛的微服务技术栈。官网地址：https://spring.io/projects/spring-cloud。</p></li><li><p>SpringCloud集成了各种微服务功能组件，并<strong>基于SpringBoot</strong>实现了这些组件的自动装配，从而提供了良好的开箱即用体验:</p></li></ul><img src="`+c+'" align="left"><ul><li>SpringCloud与SpringBoot的版本兼容关系如下：</li></ul>',35),B=n("img",{src:u,algin:"left"},null,-1),L=a('<ul><li>我们课堂学习的版本是 Hoxton.SR10，因此对应的SpringBoot版本是2.3.x（2.3.8）版本。</li></ul><h4 id="_1-springcloud是什么" tabindex="-1"><a class="header-anchor" href="#_1-springcloud是什么" aria-hidden="true">#</a> 1. SpringCloud是什么?</h4><p>SpringCloud是微服务架构的一站式解决方案，集成了各种优秀微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验。</p><h4 id="_2-springcloud用hoxton版本-springboot可以用2-1-x" tabindex="-1"><a class="header-anchor" href="#_2-springcloud用hoxton版本-springboot可以用2-1-x" aria-hidden="true">#</a> 2. SpringCloud用Hoxton版本，SpringBoot可以用2.1.x？</h4><p>不可以，版本有对应关系。需使用SpringBoot 2.2.x 2.3.x</p><h3 id="_1-5-总结" tabindex="-1"><a class="header-anchor" href="#_1-5-总结" aria-hidden="true">#</a> 1.5 总结</h3><ul><li><p>单体架构:简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统，后台管理系统，ERP,OA 中小级企业级应用</p></li><li><p>分布式架构:松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目，例如：京东、淘宝</p></li><li><p>微服务:一种良好的分布式架构方案</p></li><li><p>优点:拆分粒度更小、服务更独立、耦合度更低</p></li><li><p>缺点:架构非常复杂，运维、监控、部署难度提高</p></li><li><p>SpringCloud:SpringCloud是微服务架构的一站式解决方案，集成了各种优秀微服务功能组件</p></li></ul><h2 id="_2-服务拆分及远程调用" tabindex="-1"><a class="header-anchor" href="#_2-服务拆分及远程调用" aria-hidden="true">#</a> 2 服务拆分及远程调用</h2><h3 id="_2-1-分布式架构要考虑的问题" tabindex="-1"><a class="header-anchor" href="#_2-1-分布式架构要考虑的问题" aria-hidden="true">#</a> 2.1 分布式架构要考虑的问题</h3><ul><li>服务的拆分粒度如何？</li></ul><blockquote><p>1.不同微服务，不要重复开发相同业务</p></blockquote><ul><li>服务之间如何调用？</li></ul><blockquote><p>2.微服务数据独立，不要访问其它微服务的数据库</p><p>3.微服务可以将自己的业务暴露为接口，供其它微服务调用</p></blockquote><ul><li>服务关系如何处理？</li></ul><blockquote><ol><li>服务发现：服务发现是指服务之间的自动化发现和注册。通过服务发现机制，每个服务可以注册自己并查询其他服务。这种方式可以确保服务之间的通信是动态的和透明的，而且可以更容易地添加或删除服务。</li><li>API 网关：API 网关是一种代理服务器，用于在微服务之间进行请求路由和协议转换。API 网关可以提供安全性、负载均衡、缓存、协议转换等功能。此外，API 网关还可以对请求进行验证和授权，并可以对流量进行监控和日志记录。</li><li>异步消息传递：异步消息传递是一种通过消息队列实现的解耦方式，它可以将消息发送到一个队列中，然后由另一个服务从队列中取出并处理消息。这种方式可以确保服务之间的通信是松散耦合的，并且可以处理高并发和高负载的情况。</li><li>数据库共享：在某些情况下，多个服务需要访问同一个数据库。这种情况下，可以使用数据库共享来确保数据的一致性和完整性。但是，应该注意的是，这种方式可能会引起数据访问的竞争和冲突。</li></ol></blockquote><h3 id="_2-2-工程导入" tabindex="-1"><a class="header-anchor" href="#_2-2-工程导入" aria-hidden="true">#</a> 2.2 工程导入</h3><p>① SQL导入</p><p>将<code>资料\\工程代码\\springcloud-parent\\sql脚本</code>中的<code>cloud-order.sql</code>和<code>cloud-user.sql</code>分别导入到两个数据库中。</p><p>② 工程导入</p><p>将<code>资料\\工程\\springcloud-parent</code>导入到IDEA中</p><figure><img src="'+r+`" alt="image-20211027154853135" tabindex="0" loading="lazy"><figcaption>image-20211027154853135</figcaption></figure><p>③ 修改数据库配置，并测试</p><p>查询某用户详情信息：<code>http://localhost:18081/user/1</code></p><p>查询某订单详情信息：<code>http://localhost:18082/order/101</code></p><h3 id="_2-3-远程调用" tabindex="-1"><a class="header-anchor" href="#_2-3-远程调用" aria-hidden="true">#</a> 2.3 远程调用</h3><p><strong>远程调用的概念：</strong></p><blockquote><p>远程调用是指在分布式系统中，一个节点通过网络调用另一个节点的服务方法。在分布式系统中，不同的节点可能运行不同的应用程序或服务，这些节点之间需要进行通信和协作。通过远程调用，节点之间可以共享资源、交换数据、协调工作等。</p></blockquote><p>① RestTemplate介绍</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">RestTemplate</span> <span class="token value attr-value">是spring家族中一款基于http协议的组件(HttpURLConnection)，他的作用就是：用来实现基于http的协议方式的服务之间的通信（也就是远程服务调用）。</span>

<span class="token key attr-name">RestTemplate</span> <span class="token value attr-value">采用同步方式执行 HTTP 请求，底层使用 JDK 原生 HttpURLConnection API 。</span>

<span class="token comment">#概念总结:RestTemplate是spring提供的一个用来模拟浏览器发送请求和接收响应的一个类,它能基于Http协议实现远程调用。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 注册RestTemplate</p><p>在<code>itheima-order</code>的<code>OrderApp中注册</code>RestTemplate\`:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApp</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//注册RestTemplate  发送http请求</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③ 远程调用</p><p>修改<code>itheima-order</code>中的<code>OrderServiceImpl</code>的<code>findById</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 根据ID查询订单信息
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">OrderInfo</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1.查询订单</span>
    <span class="token class-name">OrderInfo</span> orderInfo <span class="token operator">=</span> orderDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2.根据订单查询用户信息-&gt;需要调用  【item-user】  服务</span>
    <span class="token comment">//参数1：用户微服务的请求地址</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:18081/user/&quot;</span><span class="token operator">+</span>orderInfo<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3.封装user到订单中</span>
    orderInfo<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//4.返回订单信息</span>
    <span class="token keyword">return</span> orderInfo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&lt;img src=&quot;SpringCloud笔记/image-20211027154731989.png&quot; alt=&quot;image-20211027154731989&quot; style=&quot;zoom:67%;&quot; /</p><p>④ 测试</p><img src="`+d+'" alt="63592946660" style="zoom:67%;"><h3 id="_2-3-服务提供者、服务消费者" tabindex="-1"><a class="header-anchor" href="#_2-3-服务提供者、服务消费者" aria-hidden="true">#</a> 2.3 服务提供者、服务消费者</h3><ul><li><strong>服务提供者</strong></li></ul><p>（提供接口给其他微服务）一次业务中被其他微服务调用的服务</p><ul><li><strong>服务消费者</strong></li></ul><p>（调用其他微服务的接口）一次业务中，调用其他微服务的服务</p><ul><li><strong>服务提供者和服务消费者是相对的：</strong></li></ul><p>服务的提供者可以成为服务的消费者，服务的消费者也可以成为服务的提供者</p>',45),O=n("img",{src:k,algin:"left",style:{zoom:"67%"}},null,-1),U=a('<p>在上面案例中<code>itheima-order</code>调用了<code>itheima-user</code>提供的接口，所以<code>itheima-order</code>是服务消费者，<code>itheima-user</code>是服务提供者。</p><h2 id="_3-eureka注册中心" tabindex="-1"><a class="header-anchor" href="#_3-eureka注册中心" aria-hidden="true">#</a> 3. Eureka注册中心</h2><p><strong>微服务调用出现的问题</strong></p><ul><li>服务的消费者该如何获取服务提供者的信息？</li><li>如果有多个服务提供者，消费者该如何选择？</li><li>消费者如何得知服务提供者的健康状态？</li></ul><h3 id="_3-1-eureka的作用" tabindex="-1"><a class="header-anchor" href="#_3-1-eureka的作用" aria-hidden="true">#</a> 3.1 Eureka的作用</h3><p><strong>上述微服务调用出现的问题都能被Eureka解决，其作用有：</strong></p><blockquote><ol><li>服务注册：服务提供者启动后，将自己注册到Eureka注册中心，并指定自己提供的服务接口和地址等信息。</li><li>服务发现：服务消费者向Eureka注册中心查询所需的服务，Eureka注册中心返回可用的服务列表，消费者可以根据负载均衡策略选择其中的一个服务进行调用。</li><li>健康检查：Eureka会周期性地向服务提供者发送健康检查请求，检查服务是否正常运行，如果服务异常，则将其从可用服务列表中移除。</li><li>负载均衡：Eureka通过维护服务提供者的可用列表，可以提供基于客户端的负载均衡机制，通过选择性地调用可用服务，实现负载均衡。</li><li>高可用性：Eureka支持多节点部署，通过集群方式提供高可用性，确保即使某些节点出现故障，也不会影响服务注册和发现的正常运行。</li></ol></blockquote><img src="'+m+'" alt="image-20230311180319358" style="zoom:50%;"><h3 id="_3-2-eureka的工作原理" tabindex="-1"><a class="header-anchor" href="#_3-2-eureka的工作原理" aria-hidden="true">#</a> 3.2 Eureka的工作原理</h3><p><strong>1：消费者该如何获取服务提供者具体信息？</strong> 服务提供者启动时向eureka注册自己的信息 eureka保存这些信息 消费者根据服务名称向eureka拉取提供者信息</p><p><strong>2：如果有多个服务提供者，消费者该如何选择？</strong> 服务消费者利用负载均衡算法，从服务列表中挑选一个</p><p><strong>3：消费者如何感知服务提供者健康状态？</strong> 服务提供者会每隔30秒向EurekaServer发送心跳请求，报告健康状态 EurekaServer在90秒内没有接收到某个微服务节点的心跳,EurekaServer将会注销该微服务的节点 消费者就可以拉取到最新的信息</p><h3 id="_3-3-eureka注册中心实战" tabindex="-1"><a class="header-anchor" href="#_3-3-eureka注册中心实战" aria-hidden="true">#</a> 3.3 Eureka注册中心实战</h3><img src="'+v+`" alt="image-20230311181203280" style="zoom:67%;"><h4 id="_3-3-1-搭建eureka注册中心" tabindex="-1"><a class="header-anchor" href="#_3-3-1-搭建eureka注册中心" aria-hidden="true">#</a> 3.3.1 搭建Eureka注册中心</h4><p>搭建EurekaServer服务步骤如下：</p><p>① pom.xml引入依赖</p><p>创建项目<code>itheima-eurekaserver</code>，引入<code>spring-cloud-starter-netflix-eureka-server</code>的依赖:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--EurekaServer包--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 启动类</p><p>创建启动类com.itheima.EurekaServerApp，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">EnableEurekaServer</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaServer</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaServerApp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaServerApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③ application.yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span>    <span class="token comment">#端口号</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>server <span class="token comment"># 应用名称，会在Eureka中作为服务的id标识（serviceId）</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment">#是否将自己注册到Eureka中</span>
    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment">#是否从eureka中获取服务信息</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8001/eureka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们访问EurekaServer地址<code>http://localhost:8001/</code>，效果如下：</p><img src="`+g+`" align="left"><h4 id="_3-3-2-服务提供者注册" tabindex="-1"><a class="header-anchor" href="#_3-3-2-服务提供者注册" aria-hidden="true">#</a> 3.3.2 服务提供者注册</h4><p>将itheima-user服务注册到EurekaServer步骤如下：</p><p>① pom.xml</p><p>在<code>itheima-user</code>添加如下依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--EurekaClient包--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 修改application.yml</p><p>修改<code>itheima-user</code>的<code>application.yml</code>，添加如下配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">...</span>
【注意缩进】【注意缩进】【注意缩进】
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token comment"># EurekaServer的地址</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8001/eureka
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
  	<span class="token comment">#以IP地址注册到服务中心</span>
    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment">#服务向eureka注册时，注册名默认：“IP名:应用名:应用端口名”</span>
    <span class="token comment">#现在配置：注册名：应用名:端口:项目版本号</span>
    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span><span class="token punctuation">:</span>@project.version@
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>prefer-ip-address:true 效果图</p><figure><img src="`+b+'" alt="63669077390" tabindex="0" loading="lazy"><figcaption>63669077390</figcaption></figure><p>prefer-ip-address:flase 效果图</p><figure><img src="'+h+'" alt="63669091044" tabindex="0" loading="lazy"><figcaption>63669091044</figcaption></figure><p>③ 多实例启动</p><figure><img src="'+f+'" alt="63592939864" tabindex="0" loading="lazy"><figcaption>63592939864</figcaption></figure><img src="'+y+'" align="left"><p>分别启动3个服务配置后，Eureka(http://localhost:8001/)信息如下：</p><figure><img src="'+_+`" alt="1628586175690" tabindex="0" loading="lazy"><figcaption>1628586175690</figcaption></figure><h4 id="_3-3-3-服务消费者注册" tabindex="-1"><a class="header-anchor" href="#_3-3-3-服务消费者注册" aria-hidden="true">#</a> 3.3.3 服务消费者注册</h4><p><code>itheima-order</code>虽然是消费者，但与<code>itheima-user</code>一样都是<code>eureka</code>的<code>client</code>端，同样可以实现服务注册： 在<code>itheima-order</code>项目引入<code>spring-cloud-starter-netflix-eureka-client</code>的依赖</p><p>① pom.xml</p><p>在<code>itheima-order</code>的<code>pom.xml</code>中引入如下依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--EurekaClient包--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 修改application.yml</p><p>修改<code>itheima-order</code>的<code>application.yml</code>，添加如下配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">...</span>
【注意缩进】【注意缩进】【注意缩进】
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token comment"># EurekaServer的地址</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8001/eureka
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span><span class="token punctuation">:</span>@project.version@
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-4-远程调用" tabindex="-1"><a class="header-anchor" href="#_3-3-4-远程调用" aria-hidden="true">#</a> 3.3.4 远程调用</h4><p>在<code>itheima-order</code>完成服务拉取实现远程调用，服务拉取是基于服务名称获取服务列表，然后在对服务列表做负载均衡。</p><p>修改<code>itheima-order</code>的OrderServiceImpl的代码，修改访问的url路径，用服务名代替ip、端口，代码如下：</p><p>在itheima-order项目的启动类OrderApplication中的RestTemplate添加负载均衡注解：</p><img src="`+x+`" alt="image-20211027154103215" style="zoom:67%;"><p>在itheima-order工程启动类OrderApp中，开启负载均衡</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/***
 * 注册RestTemplate
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@LoadBalanced</span><span class="token comment">//开启负载均衡</span>
<span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们访问<code>http://localhost:18082/order/101</code>测试效果如下：</p><img src="`+C+`" align="left" alt="image-20211027153816471" style="zoom:70%;"><h4 id="_3-3-5-eureka配置说明" tabindex="-1"><a class="header-anchor" href="#_3-3-5-eureka配置说明" aria-hidden="true">#</a> 3.3.5 Eureka配置说明</h4><p>服务注册时默认使用的是主机名，如果我们想用ip进行注册，可以在客户端(提供者与消费者)中的application.yml添加配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token comment"># EurekaServer的地址</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8001/eureka
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span><span class="token punctuation">:</span>@project.version@
    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">30</span> <span class="token comment">#心跳周期，默认是30秒</span>
    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">90</span> <span class="token comment">#心跳失败最长超时间，默认90秒</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>itheima-eurekaserver 服务端，可以关闭保护机制</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token punctuation">...</span>
  <span class="token key atrule">server</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># false关闭保护机制。 15分钟内，如果心跳成功率&lt;85%，则启动保护（服务提供者列表不再变化）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-6-总结" tabindex="-1"><a class="header-anchor" href="#_3-3-6-总结" aria-hidden="true">#</a> 3.3.6 总结</h4><ul><li><p>搭建EurekaServer</p><ul><li>引入eureka-server依赖</li><li>启动类上添加@EnableEurekaServer注解</li><li>在application.yml中配置eureka地址</li></ul></li><li><p>服务注册</p><ul><li>引入eureka-client依赖</li><li>在application.yml中配置eureka地址</li></ul></li><li><p>服务发现</p><ul><li>引入eureka-client依赖</li><li>在application.yml中配置eureka地址</li><li>给RestTemplate添加@LoadBalanced注解</li><li>用服务提供者的服务名称远程调用(由原来的ip:port改服务名(spring.application.name))</li></ul></li></ul><h2 id="_4-负载均衡ribbon" tabindex="-1"><a class="header-anchor" href="#_4-负载均衡ribbon" aria-hidden="true">#</a> 4 负载均衡Ribbon</h2><p>章节知识点</p><ul><li>Ribbon是什么</li><li>负载均衡流程讲解</li><li>负载均衡算法学习</li><li>Ribbon负载均衡使用</li></ul><p>Ribbon是什么？</p><p>Ribbon是Netflix发布的负载均衡器，有助于控制HTTP客户端行为。为Ribbon配置服务提供者地址列表后，Ribbon就可基于负载均衡算法，自动帮助服务消费者请求。</p><p>概念：Ribbon是基于Http协议请求的客户端负载均衡器，能实现很丰富的负载均衡算法。</p><h3 id="_4-1-负载均衡原理" tabindex="-1"><a class="header-anchor" href="#_4-1-负载均衡原理" aria-hidden="true">#</a> 4.1 负载均衡原理</h3><ol><li>用户发起请求，会先到达itheima-order服务</li><li>itheima-order服务通过Ribbon负载均衡器从eurekaserver中获取服务列表</li><li>获取了服务列表后，轮询（负载均衡算法）调用</li></ol><h3 id="_4-2-负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_4-2-负载均衡策略" aria-hidden="true">#</a> 4.2 负载均衡策略</h3><figure><img src="`+S+'" alt="1628599691173" tabindex="0" loading="lazy"><figcaption>1628599691173</figcaption></figure><p>轮询调用会涉及到很多负载均衡算法，负载均衡算法比较多，关系图如下：</p><figure><img src="'+R+`" alt="1628599720713" tabindex="0" loading="lazy"><figcaption>1628599720713</figcaption></figure><p>Ribbon的负载均衡算法策略如下表：</p><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td><strong>简单轮询</strong>服务列表来选择服务器。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略： <br>（1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。<br>（2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<code>&lt;clientName&gt;.&lt;clientConfigNameSpace&gt;.ActiveConnectionsLimit</code>属性进行配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td>ZoneAvoidanceRule【默认】</td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。它是Ribbon默认的负载均衡规则。</td></tr><tr><td>BestAvailableRule</td><td>忽略哪些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><h3 id="_4-3-饥饿加载" tabindex="-1"><a class="header-anchor" href="#_4-3-饥饿加载" aria-hidden="true">#</a> 4.3 饥饿加载</h3><p>从懒加载 变为 饥饿加载</p><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。 而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，在<code>itheima-order</code>的核心配置文件中，添加如下配置开启饥饿加载：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#注意配置到根节点</span>

<span class="token comment">#饥饿加载</span>
<span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
  <span class="token key atrule">eager-load</span><span class="token punctuation">:</span>
    <span class="token key atrule">clients</span><span class="token punctuation">:</span> itheima<span class="token punctuation">-</span>user <span class="token comment">#开启饥饿加载 </span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#指定对user这个服务饥饿加载</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-总结" tabindex="-1"><a class="header-anchor" href="#_4-4-总结" aria-hidden="true">#</a> 4.4. 总结</h3><ul><li><p>Ribbon负载均衡规则</p><ul><li>规则接口是IRule</li><li>默认实现是ZoneAvoidanceRule，根据zone选择服务列表，然后轮询</li></ul></li><li><p>负载均衡自定义方式</p><ul><li>代码方式：配置灵活，但修改时需要重新打包发布，全局配置</li><li>配置文件方式：直观，方便，无需重新打包发布，但是无法做全局配置，指定某个提供者的负载均衡策略【推荐】</li></ul></li><li><p>饥饿加载, 拉取服务提供者的方式</p><ul><li>开启饥饿加载</li><li>指定饥饿加载的微服务名称</li></ul></li></ul><h2 id="_5-http客户端feign" tabindex="-1"><a class="header-anchor" href="#_5-http客户端feign" aria-hidden="true">#</a> 5 http客户端Feign</h2><p>章节知识点</p><ul><li>Feign介绍</li><li>Feign入门案例学习</li><li>Feign日志功能、性能优化、最佳实践讲解</li></ul><h3 id="_5-1-feign介绍" tabindex="-1"><a class="header-anchor" href="#_5-1-feign介绍" aria-hidden="true">#</a> 5.1 Feign介绍</h3><p>先来看我们以前利用RestTemplate发起远程调用的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> user <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://itheima-user/user/&quot;</span><span class="token operator">+</span>orderInfo<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>存在下面的问题：</p><ul><li>代码可读性差，编程体验不统一</li><li>参数复杂URL难以维护</li></ul><p>上面RestTemplate存在的问题可以使用Feign解决，那么什么是Feign？</p><p>Feign是一个声明式的http客户端，官方地址：https://github.com/OpenFeign/feign 其作用就是帮助我们优雅的实现http请求的发送，解决上面提到的问题。</p><figure><img src="`+F+`" alt="1628603540688" tabindex="0" loading="lazy"><figcaption>1628603540688</figcaption></figure><h3 id="_5-2-feign入门案例" tabindex="-1"><a class="header-anchor" href="#_5-2-feign入门案例" aria-hidden="true">#</a> 5.2 Feign入门案例</h3><p>定义和使用Feign客户端的步骤如下：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">1</span><span class="token punctuation">:</span><span class="token value attr-value">引入依赖包 spring-cloud-starter-openfeign</span>
<span class="token key attr-name">2</span><span class="token punctuation">:</span><span class="token value attr-value">添加注解@EnableFeignClients开启Feign功能</span>
<span class="token key attr-name">3</span><span class="token punctuation">:</span><span class="token value attr-value">消费者端定义远程调用接口，在接口中远程调用的【服务名字】、【方法签名】</span>
<span class="token key attr-name">4</span><span class="token punctuation">:</span><span class="token value attr-value">消费者端注入接口，执行远程调用(接口)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>① 引入依赖</p><p>在<code>itheima-order</code>中引入如下依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--openfeign--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 开启Feign功能</p><p>在<code>itheima-order</code>的启动类<code>OrderApplication</code>添加<code>@EnableFeignClients</code>注解开启Feign功能，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableFeignClients</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//...其他略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③ 定义远程调用接口</p><p>在<code>itheima-order</code>中创建接口<code>UserClient</code>，代码如下：</p><figure><img src="`+I+`" alt="63670701665" tabindex="0" loading="lazy"><figcaption>63670701665</figcaption></figure><p>上图代码如下：在itheima-order工程中添加</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>client</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>user<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">FeignClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * order调用user服务(代替了 String url = &quot;http://itheima-user/user/&quot; + orderInfo.getUserId();)
 * 1.接口上使用@FeignClient(value=&quot;被调用服务名&quot;)
 * 2.定义被调用接口中的方法（基于被调用的controller编写）
 *  2.1 requestMapping中的路径必须是全路径(controller类上的+方法上的)
 *  2.2 使用PathVariable注解，必须取别名
 */</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;itheima-user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserClient</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 调用用户微服中controller的方法
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/user/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要是基于SpringMVC的注解来声明远程调用的信息，比如：</p>`,113),H=n("ul",null,[n("li",null,"服务名称：user"),n("li",null,"请求方式：GET"),n("li",{username:""},"请求路径：/user/"),n("li",null,"请求参数：String username"),n("li",null,"返回值类型：User")],-1),P=a(`<p>④ 远程调用</p><p>修改<code>itheima-order</code>的<code>OrderServiceImpl.one()</code>方法，执行远程调用，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">UserClient</span> userClient<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 根据ID查询订单信息
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">OrderInfo</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1.查询订单</span>
    <span class="token class-name">OrderInfo</span> orderInfo <span class="token operator">=</span> orderDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2.根据订单查询用户信息-&gt;需要调用  【item-user】  服务</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> userClient<span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3.封装user</span>
    orderInfo<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//4.返回订单信息</span>
    <span class="token keyword">return</span> orderInfo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-feign其他功能" tabindex="-1"><a class="header-anchor" href="#_5-3-feign其他功能" aria-hidden="true">#</a> 5.3 Feign其他功能</h3><p>Feign运行自定义配置来覆盖默认配置，可以修改的配置如下：</p><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><strong>feign.Logger.Level</strong></td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>feign. Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign. Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">NONE</span><span class="token punctuation">:</span><span class="token value attr-value">默认的，不显示任何日志</span>
<span class="token key attr-name">BASIC</span><span class="token punctuation">:</span><span class="token value attr-value">仅记录请求方法、URL、响应状态码以及执行时间</span>
<span class="token key attr-name">HEADERS</span><span class="token punctuation">:</span><span class="token value attr-value">除了BASIC中定义的信息以外，还有请求和响应的头信息</span>
<span class="token key attr-name">FULL</span><span class="token punctuation">:</span><span class="token value attr-value">除了HEADERS中定义的信息之外，还有请求和响应的正文及元数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SpringBoot日志配置;</p><h4 id="_5-3-1-feign日志配置" tabindex="-1"><a class="header-anchor" href="#_5-3-1-feign日志配置" aria-hidden="true">#</a> 5.3.1 Feign日志配置</h4><p>要想让Feign日志生效，得结合着SpringBoot的日志配置一起使用</p><p>SpringBoot日志配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">pattern</span><span class="token punctuation">:</span>
    <span class="token comment"># 输出到控制台</span>
    <span class="token key atrule">console</span><span class="token punctuation">:</span> &#39;%d<span class="token punctuation">{</span>HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">}</span> %<span class="token punctuation">-</span>5level %msg <span class="token punctuation">[</span>%thread<span class="token punctuation">]</span> <span class="token punctuation">-</span> %logger<span class="token punctuation">{</span><span class="token number">15</span><span class="token punctuation">}</span>%n\\&#39;
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">root</span><span class="token punctuation">:</span> info <span class="token comment"># 全局用info</span>
    <span class="token comment"># 只有在com.itheima包下才输出debug信息</span>
    <span class="token key atrule">com</span><span class="token punctuation">:</span>
      <span class="token key atrule">itheima</span><span class="token punctuation">:</span> debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置Feign日志有两种方式：</p><ul><li><p>配置文件方式</p><ul><li><p>全局生效</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment">#这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span>
        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> HEADERS <span class="token comment">#日志级别</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>局部生效</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">itheima-user</span><span class="token punctuation">:</span> <span class="token comment">#指定服务</span>
        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> HEADERS <span class="token comment">#日志级别</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>代码方式</p><ul><li><p>注册日志级别</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 注册日志级别
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">feignLogLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span><span class="token constant">FULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>全局生效</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#如果是全局配置，则把它放到@EnableFeignClients这个注解中</span>
<span class="token key attr-name">@EnableFeignClients(defaultConfiguration</span> <span class="token punctuation">=</span> <span class="token value attr-value">FeignClientConfiguration.class)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>局部生效</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#如果是局部配置，则把它放到@FeignClient这个注解中</span>
<span class="token key attr-name">@FeignClient(value</span> <span class="token punctuation">=</span> <span class="token value attr-value">&quot;itheima-user&quot;,configuration = FeignClientConfiguration.class)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h4 id="_5-3-2-feign性能优化" tabindex="-1"><a class="header-anchor" href="#_5-3-2-feign性能优化" aria-hidden="true">#</a> 5.3.2 Feign性能优化</h4><p>Feign底层的客户端实现：</p><ul><li>URLConnection：默认实现，不支持连接池</li><li>Apache HttpClient ：支持连接池</li><li>OKHttp：支持连接池</li></ul><p>因此优化Feign的性能主要包括：</p><ul><li>使用连接池代替默认的URLConnection</li><li>日志级别，最好用basic或none</li></ul><p>Feign切换Apache HttpClient步骤如下：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">1</span><span class="token punctuation">:</span><span class="token value attr-value">引入依赖</span>
<span class="token key attr-name">2</span><span class="token punctuation">:</span><span class="token value attr-value">配置连接池</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>1)引入依赖</p><p>在<code>itheima-order</code>中引入如下依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--httpClient依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2)配置连接池</p><p>在<code>itheima-order</code>的核心配置文件<code>application.yml</code>中添加如下配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment">#这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span>
        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> BASIC <span class="token comment">#日志级别</span>
      <span class="token key atrule">itheima-user</span><span class="token punctuation">:</span> <span class="token comment">#指定服务</span>
        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> BASIC <span class="token comment">#日志级别</span>
  <span class="token key atrule">httpclient</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启feign对HttpClient的支持</span>
    <span class="token key atrule">max-connections</span><span class="token punctuation">:</span> <span class="token number">200</span> <span class="token comment">#最大的连接数</span>
    <span class="token key atrule">max-connections-per-route</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment">#每个路径的最大连接数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-3-3-feign最佳实现" tabindex="-1"><a class="header-anchor" href="#_5-3-3-feign最佳实现" aria-hidden="true">#</a> 5.3.3 Feign最佳实现</h4><p>方式一（继承）：给消费者的FeignClient和提供者的controller定义统一的父接口作为标准。</p><ul><li>服务紧耦合</li><li>父接口参数列表中的映射不会被继承</li></ul><figure><img src="`+w+'" alt="63681939504" tabindex="0" loading="lazy"><figcaption>63681939504</figcaption></figure><p>方式二（抽取）：将FeignClient抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用</p><figure><img src="'+E+`" alt="1628608818706" tabindex="0" loading="lazy"><figcaption>1628608818706</figcaption></figure><p>Feign最佳实现流程如上图所示：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>实现最佳实践方式二的步骤如下：
<span class="token key attr-name">1</span><span class="token punctuation">:</span><span class="token value attr-value">创建itheima-api，然后引入feign的starter依赖 itheima-pojo依赖</span>
<span class="token key attr-name">2</span><span class="token punctuation">:</span><span class="token value attr-value">将itheima-order中编写的UserClient继承到itheima-api项目中</span>
<span class="token key attr-name">3</span><span class="token punctuation">:</span><span class="token value attr-value">在itheima-order中引入itheima-api的依赖，controller实现itheima-api中的接口</span>
<span class="token key attr-name">4</span><span class="token punctuation">:</span><span class="token value attr-value">重启测试</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1)引入依赖</p><p>创建itheima-api，然后引入feign的starter依赖 itheima-user依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
     <span class="token comment">&lt;!--openfeign--&gt;</span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

     <span class="token comment">&lt;!--httpClient依赖--&gt;</span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.itheima<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>itheima-pojo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2)编写的UserClient</p><p>将itheima-order中编写的UserClient复制到itheima-api项目中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>client</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>user<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">FeignClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * order调用user服务(代替了 String url = &quot;http://itheima-user/user/&quot; + orderInfo.getUserId();)
 * 1.接口上使用@FeignClient(value=&quot;被调用服务名&quot;)
 * 2.定义被调用接口中的方法（基于被调用的controller编写）
 *  2.1 requestMapping中的路径必须是全路径(controller类上的+方法上的)
 *  2.2 使用PathVariable注解，必须取别名
 */</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;itheima-user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserClient</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 调用用户微服中controller的方法
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/user/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3)在itheima-order中引入itheima-api的依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--引入feign-api--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.itheima<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>itheima-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>【注意】当定义的FeignClient不在SpringBootApplication的<strong>扫描包范围</strong>时，这些FeignClient无法使用。</li></ol><p>有两种方式解决： 方式一：指定FeignClient所在包</p><p><code>@EnableFeignClients(basePackages = &quot;com.itheima.user.feign&quot;)</code></p><p>方式二：指定FeignClient字节码</p><p><code>@EnableFeignClients(clients = {UserClient.class})</code></p><h4 id="_5-3-4-总结" tabindex="-1"><a class="header-anchor" href="#_5-3-4-总结" aria-hidden="true">#</a> 5.3.4. 总结</h4><ul><li><p>Feign的使用步骤</p><ul><li>引入依赖</li><li>启动类添加@EnableFeignClients注解，如果feignclient接口不在启动类包下，则需要添加扫包(basePackages )</li><li>编写FeignClient接口</li><li>使用FeignClient中定义的方法代替RestTemplate</li></ul></li><li><p>Feign的日志配置:</p><ul><li>方式一是配置文件，feign.client.config.xxx.loggerLevel</li><li>如果xxx是default则代表全局</li><li>如果xxx是服务名称，例如userservice则代表某服务</li></ul></li><li><p>方式二是java代码配置Logger.Level这个Bean</p><ul><li>如果在@EnableFeignClients注解声明则代表全局</li><li>如果在@FeignClient注解中声明则代表某服务</li></ul></li><li><p>Feign的优化</p><ul><li>日志级别尽量用basic</li><li>使用HttpClient或OKHttp代替URLConnection <ul><li>引入feign-httpClient依赖</li><li>配置文件开启httpClient功能，设置连接池参数</li></ul></li></ul></li><li><p>Feign的最佳实践：</p><ul><li>让controller和FeignClient继承同一接口</li><li>将FeignClient、POJO、Feign的默认配置都定义到一个项目中，供所有消费者使用</li></ul></li></ul><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><ol><li><p>微服务，为什么使用微服务。为了更高的并发。</p><ul><li>单体</li><li>分布式</li><li>微服务 属于分布式</li></ul></li><li><p>远程调用案例</p><ul><li>订单服务</li><li>用户服务</li><li>怎么调用? 用RestTemplate(??? 发请求的postman)</li><li>问题： 服务单点问题（订单只能依赖于用户，localhost:18081/user/1)</li></ul></li><li><p>Eureka 注册中心(房产中介、美团、饿了么), 解决服务单点问题</p><ul><li>是个什么 注册中心。 提供者、消费者</li><li>有什么作用 解决服务单点问题</li><li>使用: 平台。 <ul><li>启动： 依赖、启动类、配置文件</li><li>提供者: 注册</li><li>消费者: 注册</li><li>远程调用: 获取提供者列表、通过负载均衡的方式来调用。 使用localhost:18081改为itheima-user，开启负载均衡(restTemplate @LoadBalanced)</li></ul></li></ul></li><li><p>ribbon 做负载均衡</p><ul><li>使用：IRule， 默认使用ZoneAvoidanceRule</li><li>配置： <ul><li>全局 配置类</li><li>局部 配置文件 指定服务提供都负载均衡方式</li></ul></li><li>饥饿加载, 配置</li></ul></li><li><p>OpenFeign</p><ul><li><p>是什么？ 代替restTemplate</p></li><li><p>使用?</p><ul><li><p>导入依赖，启动类开启注解，消费者创建接口(方法：服务提供者controller的方法, 全路径)，使用的注入</p></li><li><p>@FeignClient(name=服务提供者名称)</p></li><li><p>优化：使用httpclient配置连接池（线程隔离）</p></li><li><p>日志：BASIC</p></li></ul></li><li><p>最佳实现</p><ul><li>抽取Feign的接口独立为工程。其它服务想调用时，引入依赖</li></ul></li></ul></li></ol><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><h4 id="_1-springcloud是什么-1" tabindex="-1"><a class="header-anchor" href="#_1-springcloud是什么-1" aria-hidden="true">#</a> 1. SpringCloud是什么?</h4><p>Spring Cloud是一套基于Spring Boot的分布式系统开发工具集，它提供了一系列组件和框架，用于快速构建分布式系统应用程序。Spring Cloud可以帮助开发者解决分布式系统中的一些常见问题，如服务注册与发现、负载均衡、配置管理、服务熔断、路由、分布式跟踪等。</p><p>Spring Cloud提供了以下核心组件：</p><ol><li>Eureka：服务注册和发现组件，用于实现分布式系统中服务的自动注册和发现。</li><li>Ribbon：客户端负载均衡组件，用于实现客户端负载均衡，提高系统的可用性和稳定性。</li><li>Hystrix：服务熔断和容错组件，用于实现服务的自动熔断和容错，提高系统的可靠性。</li><li>Zuul：API网关组件，用于实现请求的路由和过滤，提高系统的安全性和可维护性。</li><li>Config：配置管理组件，用于实现分布式系统中的配置管理，支持配置中心和分布式配置等模式。</li><li>Sleuth：分布式跟踪组件，用于实现分布式系统的跟踪和监控，帮助开发者定位问题和优化系统性能。</li></ol><p>Spring Cloud的优点包括：</p><ol><li>降低分布式系统的复杂度：Spring Cloud提供了一系列组件和框架，使得分布式系统的开发更加简单和高效。</li><li>提高系统的可用性和稳定性：Spring Cloud提供了服务注册和发现、客户端负载均衡、服务熔断和容错等机制，可以提高系统的可用性和稳定性。</li><li>提高系统的安全性和可维护性：Spring Cloud提供了API网关、配置管理和分布式跟踪等组件，可以提高系统的安全性和可维护性。</li><li>兼容Spring Boot：Spring Cloud基于Spring Boot开发，可以无缝集成Spring Boot的各种特性，如自动配置、启动器等。</li></ol><p>总之，Spring Cloud是一个优秀的分布式系统开发工具集，可以帮助开发者更加轻松地构建高可用、高可靠、高性能的分布式系统应用程序。</p><h4 id="_2-resttemplate如何实现远程调用" tabindex="-1"><a class="header-anchor" href="#_2-resttemplate如何实现远程调用" aria-hidden="true">#</a> 2. RestTemplate如何实现远程调用？</h4><ol><li><strong>创建RestTemplate对象</strong>：使用RestTemplate进行远程调用前，需要先创建RestTemplate对象，可以通过new关键字创建，也可以使用Spring容器进行注入。</li><li><strong>发送HTTP请求</strong>：通过RestTemplate对象发送HTTP请求，可以使用RestTemplate提供的getForObject()、postForObject()、put()、delete()等方法，选择合适的方法根据业务需求进行远程调用。</li><li><strong>处理HTTP响应</strong>：RestTemplate发送HTTP请求后，会返回一个HTTP响应对象，我们可以通过RestTemplate提供的一系列方法获取响应状态码、响应头、响应体等信息。如果服务端返回的是JSON或XML格式的数据，可以通过RestTemplate自动将响应数据转换成Java对象，简化开发</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建RestTemplate对象</span>
<span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发送HTTP请求，并获取响应数据</span>
<span class="token class-name">String</span> response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://example.com/api/users/1&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将响应数据转换成Java对象</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://example.com/api/users/1&quot;</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-微服务的拆分粒度-一般从哪个方面考虑" tabindex="-1"><a class="header-anchor" href="#_3-微服务的拆分粒度-一般从哪个方面考虑" aria-hidden="true">#</a> 3. 微服务的拆分粒度，一般从哪个方面考虑？</h4><p>微服务拆分的粒度应该根据具体业务场景来进行设计，没有一种标准的方法可以适用于所有场景。通常，微服务应该遵循单一职责原则（SRP），即每个微服务应该只负责一个特定的业务功能，而且这个功能应该足够小，不应该包含太多的业务逻辑。</p><ol><li>业务功能：将系统中的不同业务功能划分为不同的微服务，每个微服务只负责一个特定的业务功能。</li><li>数据库：将不同的数据库或数据表拆分为不同的微服务，每个微服务只访问它所对应的数据库或数据表。</li><li>用户角色：将系统中不同的用户角色或者权限划分为不同的微服务，每个微服务只对应一种用户角色或者权限。</li><li>流程或者任务：将系统中的不同流程或任务划分为不同的微服务，每个微服务只负责一个特定的流程或任务。</li></ol><h4 id="_4-订单微服务调用用户微服务的底层实现流程" tabindex="-1"><a class="header-anchor" href="#_4-订单微服务调用用户微服务的底层实现流程" aria-hidden="true">#</a> 4. 订单微服务调用用户微服务的底层实现流程？</h4><ol><li>页面发起请求进入订单微服务，订单微服发起http请求 http://itheima-user/user/用户id</li><li>请求会被LoadBalancerInterceptor负载均衡拦截器拦截</li><li>通过RibbonLoadBanlanceClient获取服务名itheima-user</li><li>通过DynamicServerListLoadBalnancer根据服务名itheima-user连接eureka-server注册微服务，获取到服务地址列表：192.168.200.1:28081, 192.168.200.1:18081, 192.168.200.1:38081</li><li>根据Ribbon负载均衡策略（ZoneAvoidanceRule 默认轮询策略）选择一个服务地址，得到一个http地址192.168.200.1:38081</li><li>通过RibbonLoadBanlancerClient发送http请求，调用JDK自带URLConnection(最底层对象)实现请求发送</li><li>订单微服务得到用户微服务响应的数据，并响应页面</li></ol><h4 id="_5-ribbon默认负载均衡策略是什么" tabindex="-1"><a class="header-anchor" href="#_5-ribbon默认负载均衡策略是什么" aria-hidden="true">#</a> 5. Ribbon默认负载均衡策略是什么？</h4><p>ZoneAvoidanceRule【默认】<br> 以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。它是Ribbon默认的负载均衡规则。</p><h4 id="_6-如何改变默认的负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_6-如何改变默认的负载均衡策略" aria-hidden="true">#</a> 6. 如何改变默认的负载均衡策略？</h4><ul><li><p>在启动类中通过@Bean注册RandomRule （全局配置，针对所有被调用微服务）</p></li><li><p>修改application.yml 文件中配置负载均衡的配置 （针对某个被调用微服务）</p></li></ul><h4 id="_7-feign如何使用" tabindex="-1"><a class="header-anchor" href="#_7-feign如何使用" aria-hidden="true">#</a> 7. Feign如何使用？</h4><ol><li>引入Feign依赖</li><li>在启动类加上@EnableFeignClients 注解 开启Feign组件</li><li>创建<code>FeignClient</code>接口</li><li>使用<code>FeignClient</code>中的定义方法代替RestTemplate</li></ol><h4 id="_8-feign日志如何使用" tabindex="-1"><a class="header-anchor" href="#_8-feign日志如何使用" aria-hidden="true">#</a> 8. Feign日志如何使用？</h4><ol><li><p>在application.yml中配置SpringBoot日志</p></li><li><p>Feign日志使用两种方式</p></li></ol><p>配置文件方式：在application.yml中配置Feign日志（全局配置、局部配置）</p><p>java代码方式：定义一个类，通过@Bean注册Logger日志对象并指定日志级别（全局配置@EnableFeignClients、局部配置@FeignClient）</p><p>注意：开发环境使用FULL 生产环境使用BASIC</p><h4 id="_9-httpclient连接池有什么用-如何使用" tabindex="-1"><a class="header-anchor" href="#_9-httpclient连接池有什么用-如何使用" aria-hidden="true">#</a> 9. HttpClient连接池有什么用，如何使用？</h4><p>HttpClient连接池是用于管理HTTP请求的连接池。在发送HTTP请求时，每次都创建一个新的连接会消耗大量的系统资源，并且在高并发的情况下，创建连接的时间可能会成为瓶颈，导致系统性能下降。使用连接池可以缓存已经创建的连接，避免重复创建连接和销毁连接，提高系统性能。</p><p><strong>使用方法</strong></p><ol><li>引入依赖 httpClient的依赖</li><li>配置文件开启httpClient功能，设置连接池的参数</li></ol>`,83);function z(Z,D){return e(),t("div",null,[A,q,p(" more "),j,B,L,O,U,H,P])}const V=s(T,[["render",z],["__file","SpringCloud_01.html.vue"]]);export{V as default};
