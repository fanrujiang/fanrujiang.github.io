import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o,c as i,a as n,b as a,d as t,e as c}from"./app-WQ1PjK-F.js";const l="/assets/image-20230221182835545---hhbvOj.png",u="/assets/image-20230221183057392-FqTk1h5n.png",r="/assets/image-20230404133429378-Vqsxaopu.png",d="/assets/image-20230221184135458-fo0IBE4d.png",k="/assets/image-20230404135245271-K1aWESco.png",m="/assets/image-20230222113651404-W7mBJbsA.png",v="/assets/image-20230222120815484-Z6Rol0ZF.png",b="/assets/image-20230404140252181-SAj8zDPU.png",g="/assets/image-20230222130217597-Knd7w3Vx.png",h="/assets/image-20230222133327806-aHSd8TUB.png",f="/assets/image-20230222133553010-KsOMJyg-.png",y="/assets/image-20230222134653884-XeJEj5h3.png",x={},w=c(`<h1 id="day03-ajax原理" tabindex="-1"><a class="header-anchor" href="#day03-ajax原理" aria-hidden="true">#</a> Day03_AJAX原理</h1><h2 id="知识点自测" tabindex="-1"><a class="header-anchor" href="#知识点自测" aria-hidden="true">#</a> 知识点自测</h2><ol><li><p>以下哪个方法可以把 JS 数据类型转成 JSON 字符串类型?</p><p>A. JSON.stringify()</p><p>B. JSON.parse()</p><details><summary>答案</summary><ul><li>选择A</li></ul></details></li><li><p>以下哪个方法，会延迟一段时间后，再执行函数体，并执行一次就停止?</p><p>A. setTimeout(函数体, 毫秒值)</p><p>B. setInterval(函数体, 毫秒值)</p><details><summary>答案</summary><ul><li>选择A</li></ul></details></li><li><p>下面代码 result 结果是多少?</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">240</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> obj<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A. true</p><p>B. 大于</p><p>C. 240</p><p>D. false</p><details><summary>答案</summary><ul><li>选A</li></ul></details></li><li><p>下面代码运行结果是多少？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&#39;http://www.baidu.com&#39;</span>
result <span class="token operator">+=</span> <span class="token string">&#39;?a=10&#39;</span>
result <span class="token operator">+=</span> <span class="token string">&#39;&amp;b=20&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A：&#39;http://www.baidu.com&#39;</p><p>B：&#39;?a=10&#39;</p><p>C：&#39;&amp;b=20&#39;</p><p>D：&#39;http://www.baidu.com?a=10&amp;b=20&#39;</p><details><summary>答案</summary><ul><li>选D</li></ul></details></li><li><p>哪个事件能实时检测到输入框值的变化？</p><p>A：input 事件</p><p>B：change 事件</p><details><summary>答案</summary><ul><li>选A</li></ul></details></li></ol><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li>XMLHttpRequest 的学习</li><li>Promise</li><li>封装简易版 axios</li><li>案例 - 天气预报</li></ul><h2 id="学习目标" tabindex="-1"><a class="header-anchor" href="#学习目标" aria-hidden="true">#</a> 学习目标</h2><ol><li>了解原生 AJAX 语法 - XMLHttpRequest（XHR）</li><li>了解 Promise 的概念和使用</li><li>了解 axios 内部工作的大概过程（XHR + Promise）</li><li>案例 - 天气预报</li></ol><h2 id="_01-xmlhttprequest-基础使用" tabindex="-1"><a class="header-anchor" href="#_01-xmlhttprequest-基础使用" aria-hidden="true">#</a> 01.XMLHttpRequest - 基础使用</h2><h3 id="目标" tabindex="-1"><a class="header-anchor" href="#目标" aria-hidden="true">#</a> 目标</h3><p>了解 AJAX 原理 XHR 的基础使用</p><h3 id="讲解" tabindex="-1"><a class="header-anchor" href="#讲解" aria-hidden="true">#</a> 讲解</h3><ol><li><p>AJAX 是浏览器与服务器通信的技术，采用 XMLHttpRequest 对象相关代码</p></li><li><p>axios 是对 XHR 相关代码进行了封装，让我们只关心传递的接口参数</p></li><li><p>学习 XHR 也是了解 axios 内部与服务器交互过程的真正原理</p><figure><img src="`+l+`" alt="image-20230221182835545" tabindex="0" loading="lazy"><figcaption>image-20230221182835545</figcaption></figure></li><li><p>语法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;请求方法&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;请求url网址&#39;</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;loadend&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 响应结果</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="image-20230221183057392" tabindex="0" loading="lazy"><figcaption>image-20230221183057392</figcaption></figure></li><li><p>需求：以一个需求来体验下原生 XHR 语法，获取所有省份列表并展示到页面上</p></li><li><p>代码如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>XMLHttpRequest_基础使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-p<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token doc-comment comment">/**
     * 目标：使用XMLHttpRequest对象与服务器通信
     *  1. 创建 XMLHttpRequest 对象
     *  2. 配置请求方法和请求 url 地址
     *  3. 监听 loadend 事件，接收响应结果
     *  4. 发起请求
    */</span>
    <span class="token comment">// 1. 创建 XMLHttpRequest 对象</span>
    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 2. 配置请求方法和请求 url 地址</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://hmajax.itheima.net/api/province&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">// 3. 监听 loadend 事件，接收响应结果</span>
    xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;loadend&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;br&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.my-p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;br&gt;&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// 4. 发起请求</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><ol><li><p>AJAX 原理是什么?</p><details><summary>答案</summary><ul><li>window 提供的 XMLHttpRequest</li></ul></details></li><li><p>为什么学习 XHR ？</p><details><summary>答案</summary><ul><li>有更多与服务器数据通信方式</li><li>了解 axios 内部原理</li></ul></details></li><li><p>XHR 使用步骤？</p><details><summary>答案</summary><ul><li>1. 创建 XHR 对象 2. 调用 open 方法，设置 url 和请求方法 3. 监听 loadend 事件，接收结果 4. 调用 send 方法，发起请求</li></ul></details></li></ol><h2 id="_02-xmlhttprequest-查询参数" tabindex="-1"><a class="header-anchor" href="#_02-xmlhttprequest-查询参数" aria-hidden="true">#</a> 02.XMLHttpRequest - 查询参数</h2><h3 id="目标-1" tabindex="-1"><a class="header-anchor" href="#目标-1" aria-hidden="true">#</a> 目标</h3><p>使用 XHR 传递查询参数给服务器，获取匹配数据</p><h3 id="讲解-1" tabindex="-1"><a class="header-anchor" href="#讲解-1" aria-hidden="true">#</a> 讲解</h3><ol><li><p>什么是查询参数：携带额外信息给服务器，返回匹配想要的数据</p></li><li><p>查询参数原理要携带的位置和语法：http://xxxx.com/xxx/xxx?参数名1=值1&amp;参数名2=值2</p></li><li><p>所以，原生 XHR 需要自己在 url 后面携带查询参数字符串，没有 axios 帮助我们把 params 参数拼接到 url 字符串后面了</p></li><li><p>需求：查询河北省下属的城市列表</p><figure><img src="`+r+`" alt="image-20230404133429378" tabindex="0" loading="lazy"><figcaption>image-20230404133429378</figcaption></figure></li><li><p>核心代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 目标：使用XHR携带查询参数，展示某个省下属的城市列表
*/</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://hmajax.itheima.net/api/city?pname=辽宁省&#39;</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;loadend&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.city-p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;br&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h3><ol><li><p>XHR 如何携带查询参数?</p><details><summary>答案</summary><ul><li>在调用 open 方法的时候，在 url? 后面按照指定格式拼接参数名和值</li></ul></details></li></ol><h2 id="_03-案例-地区查询" tabindex="-1"><a class="header-anchor" href="#_03-案例-地区查询" aria-hidden="true">#</a> 03.案例 - 地区查询</h2><h3 id="目标-2" tabindex="-1"><a class="header-anchor" href="#目标-2" aria-hidden="true">#</a> 目标</h3><p>使用 XHR 完成案例地区查询</p><h3 id="讲解-2" tabindex="-1"><a class="header-anchor" href="#讲解-2" aria-hidden="true">#</a> 讲解</h3><ol><li><p>需求：和我们之前做的类似，就是不用 axios 而是用 XHR 实现，输入省份和城市名字后，点击查询，传递多对查询参数并获取地区列表的需求</p><figure><img src="`+d+`" alt="image-20230221184135458" tabindex="0" loading="lazy"><figcaption>image-20230221184135458</figcaption></figure></li><li><p>但是多个查询参数，如果自己拼接很麻烦，这里用 URLSearchParams 把参数对象转成“参数名=值&amp;参数名=值“格式的字符串，语法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 创建 URLSearchParams 对象</span>
<span class="token keyword">const</span> paramsObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  参数名<span class="token number">1</span><span class="token operator">:</span> 值<span class="token number">1</span><span class="token punctuation">,</span>
  参数名<span class="token number">2</span><span class="token operator">:</span> 值<span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 2. 生成指定格式查询参数字符串</span>
<span class="token keyword">const</span> queryString <span class="token operator">=</span> paramsObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 结果：参数名1=值1&amp;参数名2=值2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结-2" tabindex="-1"><a class="header-anchor" href="#小结-2" aria-hidden="true">#</a> 小结</h3><ol><li><p>JS 对象如何转成查询参数格式字符串?</p><details><summary>答案</summary><ul><li>在调用 open 方法的时候，在 url? 后面按照指定格式拼接参数名和值</li></ul></details></li></ol><h2 id="_04-xmlhttprequest-数据提交" tabindex="-1"><a class="header-anchor" href="#_04-xmlhttprequest-数据提交" aria-hidden="true">#</a> 04.XMLHttpRequest - 数据提交</h2><h3 id="目标-3" tabindex="-1"><a class="header-anchor" href="#目标-3" aria-hidden="true">#</a> 目标</h3><p>通过 XHR 提交用户名和密码，完成注册功能</p><h3 id="讲解-3" tabindex="-1"><a class="header-anchor" href="#讲解-3" aria-hidden="true">#</a> 讲解</h3><ol><li><p>了解原生 XHR 进行数据提交的方式</p></li><li><p>需求：通过 XHR 完成注册用户功能</p><figure><img src="`+k+`" alt="image-20230404135245271" tabindex="0" loading="lazy"><figcaption>image-20230404135245271</figcaption></figure></li><li><p>步骤和语法：</p><ol><li><p>注意1：但是这次没有 axios 帮我们了，我们需要自己设置请求头 Content-Type：application/json，来告诉服务器端，我们发过去的内容类型是 JSON 字符串，让他转成对应数据结构取值使用</p></li><li><p>注意2：没有 axios 了，我们前端要传递的请求体数据，也没人帮我把 JS 对象转成 JSON 字符串了，需要我们自己转换</p></li><li><p>注意3：原生 XHR 需要在 send 方法调用时，传入请求体携带</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;请求方法&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;请求url网址&#39;</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;loadend&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 1. 告诉服务器，我传递的内容类型，是 JSON 字符串</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 2. 准备数据并转成 JSON 字符串</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;itheima007&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;7654321&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> userStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
<span class="token comment">// 3. 发送请求体数据</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>userStr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>核心代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 目标：使用xhr进行数据提交-完成注册功能
*/</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.reg-btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://hmajax.itheima.net/api/register&#39;</span><span class="token punctuation">)</span>
  xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;loadend&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// 设置请求头-告诉服务器内容类型（JSON字符串）</span>
  xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 准备提交的数据</span>
  <span class="token keyword">const</span> userObj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;itheima007&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;7654321&#39;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> userStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>userObj<span class="token punctuation">)</span>
  <span class="token comment">// 设置请求体，发起请求</span>
  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>userStr<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结-3" tabindex="-1"><a class="header-anchor" href="#小结-3" aria-hidden="true">#</a> 小结</h3><ol><li><p>XHR 如何提交请求体数据?</p><details><summary>答案</summary><ul><li>在 send 中携带请求体数据，要按照后端要求的内容类型携带</li></ul></details></li></ol><h2 id="_05-认识-promise" tabindex="-1"><a class="header-anchor" href="#_05-认识-promise" aria-hidden="true">#</a> 05.认识_Promise</h2><h3 id="目标-4" tabindex="-1"><a class="header-anchor" href="#目标-4" aria-hidden="true">#</a> 目标</h3><p>认识 Promise 的作用和好处以及使用步骤</p><h3 id="讲解-4" tabindex="-1"><a class="header-anchor" href="#讲解-4" aria-hidden="true">#</a> 讲解</h3><ol><li><p>什么是 Promise ？</p><ul><li>Promise 对象用于表示一个异步操作的最终完成（或失败）及其结构值</li></ul></li><li><p>Promise 的好处是什么？</p><ul><li><p>逻辑更清晰（成功或失败会关联后续的处理函数）</p></li><li><p>了解 axios 函数内部运作的机制</p><figure><img src="`+m+`" alt="image-20230222113651404" tabindex="0" loading="lazy"><figcaption>image-20230222113651404</figcaption></figure></li><li><p>能解决回调函数地狱问题（后面会讲到），今天先来看下它的基础使用</p></li></ul></li><li><p>Promise 管理异步任务，语法怎么用？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 创建 Promise 对象</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
 <span class="token comment">// 2. 执行异步任务-并传递结果</span>
 <span class="token comment">// 成功调用: resolve(值) 触发 then() 执行</span>
 <span class="token comment">// 失败调用: reject(值) 触发 catch() 执行</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 3. 接收结果</span>
p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
 <span class="token comment">// 成功</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
 <span class="token comment">// 失败</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 目标：使用Promise管理异步任务
*/</span>
<span class="token comment">// 1. 创建Promise对象</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 2. 执行异步代码</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// resolve(&#39;模拟AJAX请求-成功结果&#39;)</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;模拟AJAX请求-失败结果&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 3. 获取结果</span>
p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结-4" tabindex="-1"><a class="header-anchor" href="#小结-4" aria-hidden="true">#</a> 小结</h3><ol><li><p>什么是 Promise ?</p><details><summary>答案</summary><ul><li>表示（管理）一个异步操作最终状态和结果值的对象</li></ul></details></li><li><p>为什么学习 Promise ?</p><details><summary>答案</summary><ul><li>成功和失败状态，可以关联对应处理函数，了解 axios 内部运作的原理</li></ul></details></li><li><p>Promise 使用步骤？</p><details><summary>答案</summary><ul><li>1. new Promise 对象执行异步任务。2. 用 resolve 关联 then 的回调函数传递成功结果。3.用 reject 关联 catch 的回调函数传递失败结果。</li></ul></details></li></ol><h2 id="_06-认识-promise-的状态" tabindex="-1"><a class="header-anchor" href="#_06-认识-promise-的状态" aria-hidden="true">#</a> 06.认识_Promise 的状态</h2><h3 id="目标-5" tabindex="-1"><a class="header-anchor" href="#目标-5" aria-hidden="true">#</a> 目标</h3><p>认识 Promise 的三种状态，知道如何关联成功/失败的处理函数</p><h3 id="讲解-5" tabindex="-1"><a class="header-anchor" href="#讲解-5" aria-hidden="true">#</a> 讲解</h3><ol><li><p>为什么要了解 Promise 的三种状态 ？</p><ul><li>知道 Promise 对象如何关联的处理函数，以及代码的执行顺序</li></ul></li><li><p>Promise 有哪三种状态？</p><blockquote><p>每个 Promise 对象必定处于以下三种状态之一</p></blockquote><ol><li>待定（pending）：初始状态，既没有被兑现，也没有被拒绝</li><li>已兑现（fulfilled）：操作成功完成</li><li>已拒绝（rejected）：操作失败</li></ol><blockquote><p>状态的英文字符串，可以理解为 Promise 对象内的字符串标识符，用于判断什么时候调用哪一个处理函数</p></blockquote></li><li><p>Promise 的状态改变有什么用：调用对应函数，改变 Promise 对象状态后，内部触发对应回调函数传参并执行</p><figure><img src="`+v+'" alt="image-20230222120815484" tabindex="0" loading="lazy"><figcaption>image-20230222120815484</figcaption></figure></li><li><p>注意：每个 Promise 对象一旦被兑现/拒绝，那就是已敲定了，状态无法再被改变</p></li></ol><h3 id="小结-5" tabindex="-1"><a class="header-anchor" href="#小结-5" aria-hidden="true">#</a> 小结</h3><ol><li><p>Promise 对象有哪 3 种状态?</p><details><summary>答案</summary><ul><li>待定 pending，已兑现 fulfilled，已拒绝 rejected</li></ul></details></li><li><p>Promise 状态有什么用?</p><details><summary>答案</summary><ul><li>状态改变后，如何关联处理函数</li></ul></details></li></ol><h2 id="_07-使用-promise-和-xhr-获取省份列表" tabindex="-1"><a class="header-anchor" href="#_07-使用-promise-和-xhr-获取省份列表" aria-hidden="true">#</a> 07.使用 Promise 和 XHR_获取省份列表</h2><h3 id="目标-6" tabindex="-1"><a class="header-anchor" href="#目标-6" aria-hidden="true">#</a> 目标</h3><p>尝试用 Promise 管理 XHR 异步任务</p><h3 id="讲解-6" tabindex="-1"><a class="header-anchor" href="#讲解-6" aria-hidden="true">#</a> 讲解</h3><ol><li><p>Promise 和 XHR 都已经学过基础语法了，我们可以来结合使用一下了</p></li><li><p>需求：使用 Promise 和 XHR 请求省份列表数据并展示到页面上</p><figure><img src="'+b+`" alt="image-20230404140252181" tabindex="0" loading="lazy"><figcaption>image-20230404140252181</figcaption></figure></li><li><p>步骤：</p><ol><li><p>创建 Promise 对象</p></li><li><p>执行 XHR 异步代码，获取省份列表数据</p></li><li><p>关联成功或失败回调函数，做后续的处理</p><blockquote><p>错误情况：用地址错了404演示</p></blockquote></li></ol></li><li><p>核心代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 目标：使用Promise管理XHR请求省份列表
 *  1. 创建Promise对象
 *  2. 执行XHR异步代码，获取省份列表
 *  3. 关联成功或失败函数，做后续处理
*/</span>
<span class="token comment">// 1. 创建Promise对象</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 2. 执行XHR异步代码，获取省份列表</span>
  <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://hmajax.itheima.net/api/province&#39;</span><span class="token punctuation">)</span>
  xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;loadend&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// xhr如何判断响应成功还是失败的？</span>
    <span class="token comment">// 2xx开头的都是成功响应状态码</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 3. 关联成功或失败函数，做后续处理</span>
p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.my-p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> result<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;br&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 错误对象要用console.dir详细打印</span>
  console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
  <span class="token comment">// 服务器返回错误提示消息，插入到p标签显示</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.my-p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> error<span class="token punctuation">.</span>message
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结-6" tabindex="-1"><a class="header-anchor" href="#小结-6" aria-hidden="true">#</a> 小结</h3><ol><li><p>AJAX 如何判断是否请求响应成功了?</p><details><summary>答案</summary><ul><li>响应状态码在大于等于 200 并且小于 300 的范围是成功的</li></ul></details></li></ol><h2 id="_08-封装-简易axios-获取省份列表" tabindex="-1"><a class="header-anchor" href="#_08-封装-简易axios-获取省份列表" aria-hidden="true">#</a> 08.封装_简易axios-获取省份列表</h2><h3 id="目标-7" tabindex="-1"><a class="header-anchor" href="#目标-7" aria-hidden="true">#</a> 目标</h3><p>模拟 axios 函数封装，更深入了解 axios 内部运作原理</p><h3 id="讲解-7" tabindex="-1"><a class="header-anchor" href="#讲解-7" aria-hidden="true">#</a> 讲解</h3><ol><li><p>需求：基于 Promise 和 XHR 封装 myAxios 函数，获取省份列表展示到页面</p><figure><img src="`+g+`" alt="image-20230222130217597" tabindex="0" loading="lazy"><figcaption>image-20230222130217597</figcaption></figure></li><li><p>核心语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myAxios</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// XHR 请求</span>
    <span class="token comment">// 调用成功/失败的处理程序</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">myAxios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;目标资源地址&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>步骤：</p><ol><li>定义 myAxios 函数，接收配置对象，返回 Promise 对象</li><li>发起 XHR 请求，默认请求方法为 GET</li><li>调用成功/失败的处理程序</li><li>使用 myAxios 函数，获取省份列表展示</li></ol></li><li><p>核心代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 目标：封装_简易axios函数_获取省份列表
 *  1. 定义myAxios函数，接收配置对象，返回Promise对象
 *  2. 发起XHR请求，默认请求方法为GET
 *  3. 调用成功/失败的处理程序
 *  4. 使用myAxios函数，获取省份列表展示
*/</span>
<span class="token comment">// 1. 定义myAxios函数，接收配置对象，返回Promise对象</span>
<span class="token keyword">function</span> <span class="token function">myAxios</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 2. 发起XHR请求，默认请求方法为GET</span>
    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>method <span class="token operator">||</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
    xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;loadend&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 3. 调用成功/失败的处理程序</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 4. 使用myAxios函数，获取省份列表展示</span>
<span class="token function">myAxios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://hmajax.itheima.net/api/province&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.my-p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> result<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;br&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.my-p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> error<span class="token punctuation">.</span>message
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结-7" tabindex="-1"><a class="header-anchor" href="#小结-7" aria-hidden="true">#</a> 小结</h3><ol><li><p>自己封装的 myAxios 如何设置默认请求方法 GET?</p><details><summary>答案</summary><ul><li>config.method 判断有值就用，无值用‘GET’方法</li></ul></details></li></ol><h2 id="_09-封装-简易axios-获取地区列表" tabindex="-1"><a class="header-anchor" href="#_09-封装-简易axios-获取地区列表" aria-hidden="true">#</a> 09.封装_简易axios-获取地区列表</h2><h3 id="目标-8" tabindex="-1"><a class="header-anchor" href="#目标-8" aria-hidden="true">#</a> 目标</h3><p>修改 myAxios 函数支持传递查询参数，获取辽宁省，大连市的地区列表</p><h3 id="讲解-8" tabindex="-1"><a class="header-anchor" href="#讲解-8" aria-hidden="true">#</a> 讲解</h3><ol><li><p>需求：在上个封装的建议 axios 函数基础上，修改代码支持传递查询参数功能</p></li><li><p>修改步骤：</p><ol><li>myAxios 函数调用后，判断 params 选项</li><li>基于 URLSearchParams 转换查询参数字符串</li><li>使用自己封装的 myAxios 函数显示地区列表</li></ol></li><li><p>核心代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myAxios</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 1. 判断有params选项，携带查询参数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 2. 使用URLSearchParams转换，并携带到url上</span>
      <span class="token keyword">const</span> paramsObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>params<span class="token punctuation">)</span>
      <span class="token keyword">const</span> queryString <span class="token operator">=</span> paramsObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token comment">// 把查询参数字符串，拼接在url？后面</span>
      config<span class="token punctuation">.</span>url <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>queryString<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span>

    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>method <span class="token operator">||</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
    xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;loadend&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 3. 使用myAxios函数，获取地区列表</span>
<span class="token function">myAxios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://hmajax.itheima.net/api/area&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">pname</span><span class="token operator">:</span> <span class="token string">&#39;辽宁省&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">cname</span><span class="token operator">:</span> <span class="token string">&#39;大连市&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.my-p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> result<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;br&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结-8" tabindex="-1"><a class="header-anchor" href="#小结-8" aria-hidden="true">#</a> 小结</h3><ol><li><p>外面传入查询参数对象，myAxios 函数内如何转查询参数字符串?</p><details><summary>答案</summary><ul><li>使用 URLSearchParams 对象转换</li></ul></details></li></ol><h2 id="_10-封装-简易axios-注册用户" tabindex="-1"><a class="header-anchor" href="#_10-封装-简易axios-注册用户" aria-hidden="true">#</a> 10.封装_简易axios-注册用户</h2><h3 id="目标-9" tabindex="-1"><a class="header-anchor" href="#目标-9" aria-hidden="true">#</a> 目标</h3><p>修改 myAxios 函数支持传递请求体数据，完成注册用户</p><h3 id="讲解-9" tabindex="-1"><a class="header-anchor" href="#讲解-9" aria-hidden="true">#</a> 讲解</h3><ol><li><p>需求：修改 myAxios 函数支持传递请求体数据，完成注册用户功能</p></li><li><p>修改步骤：</p><ol><li>myAxios 函数调用后，判断 data 选项</li><li>转换数据类型，在 send 方法中发送</li><li>使用自己封装的 myAxios 函数完成注册用户功能</li></ol></li><li><p>核心代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myAxios</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> paramsObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>params<span class="token punctuation">)</span>
      <span class="token keyword">const</span> queryString <span class="token operator">=</span> paramsObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      config<span class="token punctuation">.</span>url <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>queryString<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>method <span class="token operator">||</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>url<span class="token punctuation">)</span>

    xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;loadend&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 1. 判断有data选项，携带请求体</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 2. 转换数据类型，在send中发送</span>
      <span class="token keyword">const</span> jsonStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
      xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span>
      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果没有请求体数据，正常的发起请求</span>
      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.reg-btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 3. 使用myAxios函数，完成注册用户</span>
  <span class="token function">myAxios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://hmajax.itheima.net/api/register&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;itheima999&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;666666&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结-9" tabindex="-1"><a class="header-anchor" href="#小结-9" aria-hidden="true">#</a> 小结</h3><ol><li><p>外面传入 data 选项，myAxios 函数内如何携带请求体参数?</p><details><summary>答案</summary><ul><li>判断外面传入了这个属性，自己转成 JSON 字符串并设置请求头并在 send 方法中携带</li></ul></details></li></ol><h2 id="_11-12-案例-天气预报-默认数据" tabindex="-1"><a class="header-anchor" href="#_11-12-案例-天气预报-默认数据" aria-hidden="true">#</a> 11-12.案例_天气预报-默认数据</h2><h3 id="目标-10" tabindex="-1"><a class="header-anchor" href="#目标-10" aria-hidden="true">#</a> 目标</h3><p>把北京市的数据，填充到页面默认显示</p><h3 id="讲解-10" tabindex="-1"><a class="header-anchor" href="#讲解-10" aria-hidden="true">#</a> 讲解</h3><ol><li><p>需求：介绍本项目要完成的效果，和要实现的步骤和分的步骤和视频</p><figure><img src="`+h+`" alt="image-20230222133327806" tabindex="0" loading="lazy"><figcaption>image-20230222133327806</figcaption></figure></li><li><p>步骤</p><ol><li>先获取北京市天气预报，展示</li><li>搜索城市列表，展示</li><li>点击城市，切换显示对应天气数据</li></ol></li><li><p>本视频先封装函数，获取城市天气并设置页面内容</p></li><li><p>核心代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 目标1：默认显示-北京市天气
 *  1.1 获取北京市天气数据
 *  1.2 数据展示到页面
 */</span>
<span class="token comment">// 获取并渲染城市天气函数</span>
<span class="token keyword">function</span> <span class="token function">getWeather</span><span class="token punctuation">(</span><span class="token parameter">cityCode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1.1 获取北京市天气数据</span>
  <span class="token function">myAxios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://hmajax.itheima.net/api/weather&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">city</span><span class="token operator">:</span> cityCode
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token keyword">const</span> wObj <span class="token operator">=</span> result<span class="token punctuation">.</span>data
    <span class="token comment">// 1.2 数据展示到页面</span>
    <span class="token comment">// 阳历和农历日期</span>
    <span class="token keyword">const</span> dateStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;span class=&quot;dateShort&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>wObj<span class="token punctuation">.</span>date<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
    &lt;span class=&quot;calendar&quot;&gt;农历&amp;nbsp;
      &lt;span class=&quot;dateLunar&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>wObj<span class="token punctuation">.</span>dateLunar<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
    &lt;/span&gt;</span><span class="token template-punctuation string">\`</span></span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> dateStr
    <span class="token comment">// 城市名字</span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.area&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> wObj<span class="token punctuation">.</span>area
    <span class="token comment">// 当天气温</span>
    <span class="token keyword">const</span> nowWStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div class=&quot;tem-box&quot;&gt;
    &lt;span class=&quot;temp&quot;&gt;
      &lt;span class=&quot;temperature&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>wObj<span class="token punctuation">.</span>temperature<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
      &lt;span&gt;°&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;climate-box&quot;&gt;
    &lt;div class=&quot;air&quot;&gt;
      &lt;span class=&quot;psPm25&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>wObj<span class="token punctuation">.</span>psPm25<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
      &lt;span class=&quot;psPm25Level&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>wObj<span class="token punctuation">.</span>psPm25Level<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
    &lt;/div&gt;
    &lt;ul class=&quot;weather-list&quot;&gt;
      &lt;li&gt;
        &lt;img src=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>wObj<span class="token punctuation">.</span>weatherImg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; class=&quot;weatherImg&quot; alt=&quot;&quot;&gt;
        &lt;span class=&quot;weather&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>wObj<span class="token punctuation">.</span>weather<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
      &lt;/li&gt;
      &lt;li class=&quot;windDirection&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>wObj<span class="token punctuation">.</span>windDirection<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
      &lt;li class=&quot;windPower&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>wObj<span class="token punctuation">.</span>windPower<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.weather-box&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> nowWStr
    <span class="token comment">// 当天天气</span>
    <span class="token keyword">const</span> twObj <span class="token operator">=</span> wObj<span class="token punctuation">.</span>todayWeather
    <span class="token keyword">const</span> todayWStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div class=&quot;range-box&quot;&gt;
    &lt;span&gt;今天：&lt;/span&gt;
    &lt;span class=&quot;range&quot;&gt;
      &lt;span class=&quot;weather&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>twObj<span class="token punctuation">.</span>weather<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
      &lt;span class=&quot;temNight&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>twObj<span class="token punctuation">.</span>temNight<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
      &lt;span&gt;-&lt;/span&gt;
      &lt;span class=&quot;temDay&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>twObj<span class="token punctuation">.</span>temDay<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
      &lt;span&gt;℃&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
  &lt;ul class=&quot;sun-list&quot;&gt;
    &lt;li&gt;
      &lt;span&gt;紫外线&lt;/span&gt;
      &lt;span class=&quot;ultraviolet&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>twObj<span class="token punctuation">.</span>ultraviolet<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span&gt;湿度&lt;/span&gt;
      &lt;span class=&quot;humidity&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>twObj<span class="token punctuation">.</span>humidity<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;%
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span&gt;日出&lt;/span&gt;
      &lt;span class=&quot;sunriseTime&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>twObj<span class="token punctuation">.</span>sunriseTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span&gt;日落&lt;/span&gt;
      &lt;span class=&quot;sunsetTime&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>twObj<span class="token punctuation">.</span>sunsetTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
    &lt;/li&gt;
  &lt;/ul&gt;</span><span class="token template-punctuation string">\`</span></span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.today-weather&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> todayWStr

    <span class="token comment">// 7日天气预报数据展示</span>
    <span class="token keyword">const</span> dayForecast <span class="token operator">=</span> wObj<span class="token punctuation">.</span>dayForecast
    <span class="token keyword">const</span> dayForecastStr <span class="token operator">=</span> dayForecast<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;li class=&quot;item&quot;&gt;
      &lt;div class=&quot;date-box&quot;&gt;
        &lt;span class=&quot;dateFormat&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>dateFormat<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
        &lt;span class=&quot;date&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>date<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
      &lt;/div&gt;
      &lt;img src=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>weatherImg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; alt=&quot;&quot; class=&quot;weatherImg&quot;&gt;
      &lt;span class=&quot;weather&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>weather<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
      &lt;div class=&quot;temp&quot;&gt;
        &lt;span class=&quot;temNight&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>temNight<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;-
        &lt;span class=&quot;temDay&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>temDay<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
        &lt;span&gt;℃&lt;/span&gt;
      &lt;/div&gt;
      &lt;div class=&quot;wind&quot;&gt;
        &lt;span class=&quot;windDirection&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>windDirection<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
        &lt;span class=&quot;windPower&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>windPower<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;
      &lt;/div&gt;
    &lt;/li&gt;</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// console.log(dayForecastStr)</span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.week-wrap&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> dayForecastStr
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 默认进入网页-就要获取天气数据（北京市城市编码：&#39;110100&#39;）</span>
<span class="token function">getWeather</span><span class="token punctuation">(</span><span class="token string">&#39;110100&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结-10" tabindex="-1"><a class="header-anchor" href="#小结-10" aria-hidden="true">#</a> 小结</h3><ol><li><p>做完这个项目会带来什么收货?</p><details><summary>答案</summary><ul><li>可以做一个真正有意义的业务，查看城市的天气预报，测试自己封装的 myAxios 函数是否好用</li></ul></details></li></ol><h2 id="_13-案例-天气预报-搜索城市列表" tabindex="-1"><a class="header-anchor" href="#_13-案例-天气预报-搜索城市列表" aria-hidden="true">#</a> 13.案例_天气预报-搜索城市列表</h2><h3 id="目标-11" tabindex="-1"><a class="header-anchor" href="#目标-11" aria-hidden="true">#</a> 目标</h3><p>根据关键字，展示匹配的城市列表</p><h3 id="讲解-11" tabindex="-1"><a class="header-anchor" href="#讲解-11" aria-hidden="true">#</a> 讲解</h3><ol><li><p>介绍本视频要完成的效果：搜索匹配关键字相关城市名字，展示城市列表即可</p><figure><img src="`+f+`" alt="image-20230222133553010" tabindex="0" loading="lazy"><figcaption>image-20230222133553010</figcaption></figure></li><li><p>步骤</p><ol><li>绑定 input 事件，获取关键字</li><li>获取展示城市列表数据</li></ol></li><li><p>核心代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 目标2：搜索城市列表
 *  2.1 绑定input事件，获取关键字
 *  2.2 获取展示城市列表数据
 */</span>
<span class="token comment">// 2.1 绑定input事件，获取关键字</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.search-city&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token comment">// 2.2 获取展示城市列表数据</span>
  <span class="token function">myAxios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://hmajax.itheima.net/api/weather/city&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">city</span><span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token keyword">const</span> liStr <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;li class=&quot;city-item&quot; data-code=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>liStr<span class="token punctuation">)</span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.search-list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> liStr
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结-11" tabindex="-1"><a class="header-anchor" href="#小结-11" aria-hidden="true">#</a> 小结</h3><ol><li><p>监听输入框实时改变的事件是什么?</p><details><summary>答案</summary><ul><li>input事件</li></ul></details></li></ol><h2 id="_14-案例-天气预报-展示城市天气" tabindex="-1"><a class="header-anchor" href="#_14-案例-天气预报-展示城市天气" aria-hidden="true">#</a> 14.案例_天气预报-展示城市天气</h2><h3 id="目标-12" tabindex="-1"><a class="header-anchor" href="#目标-12" aria-hidden="true">#</a> 目标</h3><p>点击搜索框列表城市名字，切换对应城市天气数据</p><h3 id="讲解-12" tabindex="-1"><a class="header-anchor" href="#讲解-12" aria-hidden="true">#</a> 讲解</h3><ol><li><p>介绍本视频要完成的效果：点击城市列表名字，切换当前页面天气数据</p><figure><img src="`+y+`" alt="image-20230222134653884" tabindex="0" loading="lazy"><figcaption>image-20230222134653884</figcaption></figure></li><li><p>步骤</p><ol><li>检测搜索列表点击事件，获取城市 code 值</li><li>复用获取展示城市天气函数</li></ol></li><li><p>核心代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 目标3：切换城市天气
 *  3.1 绑定城市点击事件，获取城市code值
 *  3.2 调用获取并展示天气的函数
 */</span>
<span class="token comment">// 3.1 绑定城市点击事件，获取城市code值</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.search-list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;city-item&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 只有点击城市li才会走这里</span>
    <span class="token keyword">const</span> cityCode <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>code
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cityCode<span class="token punctuation">)</span>
    <span class="token comment">// 3.2 调用获取并展示天气的函数</span>
    <span class="token function">getWeather</span><span class="token punctuation">(</span>cityCode<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结-12" tabindex="-1"><a class="header-anchor" href="#小结-12" aria-hidden="true">#</a> 小结</h3><ol><li><p>这次我们获取城市天气，传递的是城市名字还是 code 值?</p><details><summary>答案</summary><ul><li>看后端要求传递什么，就传什么即可</li></ul></details></li></ol><h2 id="今日重点-必须会" tabindex="-1"><a class="header-anchor" href="#今日重点-必须会" aria-hidden="true">#</a> 今日重点(必须会)</h2><ol><li>了解 AJAX 原理之 XMLHttpRequest（XHR）相关语法</li><li>了解 Promise 的作用和三种状态</li><li>了解 axios 内部运作的过程</li><li>完成案例-天气预报</li></ol><h2 id="今日作业-必完成" tabindex="-1"><a class="header-anchor" href="#今日作业-必完成" aria-hidden="true">#</a> 今日作业(必完成)</h2><p>参考作业文件夹作用</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2>`,103),q={href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX/Getting_Started",target:"_blank",rel:"noopener noreferrer"},j={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests",target:"_blank",rel:"noopener noreferrer"},_={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Callback_function",target:"_blank",rel:"noopener noreferrer"},S={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise",target:"_blank",rel:"noopener noreferrer"};function H(P,R){const s=e("ExternalLinkIcon");return o(),i("div",null,[w,n("ol",null,[n("li",null,[n("a",q,[a("Ajax原生-mdn"),t(s)])]),n("li",null,[n("a",j,[a("同步异步-mdn"),t(s)])]),n("li",null,[n("a",_,[a("回调函数-mdn"),t(s)])]),n("li",null,[n("a",S,[a("Promise-mdn"),t(s)])])])])}const L=p(x,[["render",H],["__file","AJAX_03_原理.html.vue"]]);export{L as default};
