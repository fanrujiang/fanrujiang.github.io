import{_ as a,o as e,c as i,e as r}from"./app-heeSgIrv.js";const n="/assets/image-20230927175054217-da8aYjxY.png",t="/assets/image-20230927175030387-9JGpBwVn.png",s="/assets/image-20230927175141163-H67dz4m9.png",o="/assets/3b11dffdee4a4a7450227e5113a217ad-TNWwPtlJ.png",d="/assets/image-20230927175405552-tvDRH0oN.png",c="/assets/image-20230927175551544-dp5GrE7e.png",p="/assets/image-20230927175613908-00MZvCvE.png",l="/assets/image-20230927175641738-44MRdKke.png",h="/assets/image-20230927175804440-o45IJ61T.png",g="/assets/image-20230927175854172-KONWFxcS.png",m="/assets/image-20230927175948107-ZIhQAs8F.png",u="/assets/image-20230927180611834-TRuxyD_M.png",f="/assets/image-20230927180739184-gJQZDmea.png",b={},k=r(`<h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><blockquote><p>porttainer其实是很方便docker管理工具，自己用了也挺熟练的，可以说linux上安装docker，那么必须安装porttainer，考虑到有些小伙伴可能对porttainer不是很熟悉，所以做一个详细的教程，以便学习</p></blockquote><h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h4><p>Portainer是一款<strong>开源的容器管理工具</strong>，旨在简化Docker容器和Kubernetes集群的管理。通过提供一个直观的Web界面，Portainer可以帮助用户轻松地创建、管理和维护容器，而无需使用复杂的命令行工具。</p><h4 id="功能" tabindex="-1"><a class="header-anchor" href="#功能" aria-hidden="true">#</a> 功能</h4><p>**容器管理工具：**Portainer支持Docker和Kubernetes，提供了一个统一的管理平台，帮助用户轻松管理和监控容器。</p><p>**支持Docker和Kubernetes：**Portainer与Docker和Kubernetes完美集成，为用户提供了一个简单易用的界面来管理容器和集群。</p><p>**简化操作：**Portainer通过Web界面简化了容器管理，用户无需熟练掌握Docker和Kubernetes命令即可完成各种操作。</p><h3 id="部署" tabindex="-1"><a class="header-anchor" href="#部署" aria-hidden="true">#</a> 部署</h3><blockquote><p>我这里用到的是Linux中安装docker的情况下，运行docker命令一键部署的方式，相对来说是比较方便的。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-- 拉取镜像， 已有镜像，不需要拉取
<span class="token function">docker</span> pull portainer/portainer-ce
-- 命令行创建容器
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">--name</span> prtainer portainer/portainer-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这段代码表示的是拉取portainer-ce的镜像，然后创建一个名字为prtainer的docker容器，设置为一直运行（服务器重启，portainer也会跟随启动），映射端口为9000容器端口为9000</p></blockquote><ul><li>运行完这段代码，你的portainer就已经启动起来了</li><li>现在输入你服务器的ip加上端口号9000。 例：123.123.123.123:9000</li><li>等待网页刷新容器启动进入portainer的初始化界面</li></ul><figure><img src="`+n+'" alt="imag1sdsd2" tabindex="0" loading="lazy"><figcaption>imag1sdsd2</figcaption></figure><ul><li>现在要做的就是设置用户名和密码</li></ul><figure><img src="'+t+'" alt="ima387sds" tabindex="0" loading="lazy"><figcaption>ima387sds</figcaption></figure><ul><li>恭喜你，点击Get Started 就可以进入portainer的主功能区了</li></ul><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><h4 id="docker容器介绍" tabindex="-1"><a class="header-anchor" href="#docker容器介绍" aria-hidden="true">#</a> docker容器介绍</h4><figure><img src="'+s+'" alt="ima27175141163" tabindex="0" loading="lazy"><figcaption>ima27175141163</figcaption></figure><ol><li><p>这个界面就是服务器的一个docker,我们点击进入 <img src="'+o+'" alt="img" loading="lazy"></p></li><li><p>点击containers进入docker容器运行管理（本机容器列表：支持启动、停止、杀进程、重启、删除、添加容器等操作，和敲命令效果是一样的。） <img src="'+d+'" alt="ima5552" loading="lazy"></p></li><li><p>点击进入查看docker容器的运行情况</p></li></ol><h4 id="容器管理-containers" tabindex="-1"><a class="header-anchor" href="#容器管理-containers" aria-hidden="true">#</a> 容器管理（Containers）</h4><p>查看容器列表：登录Portainer后，点击左侧菜单栏的“容器”选项，你将看到当前Docker环境中所有容器的列表。</p><p>启动、停止和重启容器：在容器列表中，你可以看到每个容器右侧的操作按钮，包括启动、停止和重启。点击相应的按钮，即可对容器进行相应操作。</p><p>查看容器日志：点击容器列表中的容器名称，进入容器详情页面。在此页面，点击“日志”选项卡，你可以查看容器的运行日志。</p><p>进入容器控制台：在容器详情页面，点击“控制台”选项卡，然后点击“连接”按钮，即可进入容器的命令行控制台。</p><p>容器升级：<strong>使用Portainer更新单一容器是非常简单的事情</strong>。</p><p>随意进入某个容器的详情，点击<strong>编辑（Edit)</strong>：</p><figure><img src="'+c+'" alt="image-20230927175551544" tabindex="0" loading="lazy"><figcaption>image-20230927175551544</figcaption></figure><p>在编辑页面，更改镜像名称：</p><figure><img src="'+p+'" alt="im7175613908" tabindex="0" loading="lazy"><figcaption>im7175613908</figcaption></figure><p><strong>注：如果想要更新容器到最新版，只需要添加latest即可；如果是更新到特别版本，请在尾部添加特定版本号，这些在docker hub上均可找到对应的信息。</strong></p><p>然后点击<strong>部署容器</strong>即可：</p><figure><img src="'+l+'" alt="image-20230927175641738" tabindex="0" loading="lazy"><figcaption>image-20230927175641738</figcaption></figure><h4 id="管理镜像-images" tabindex="-1"><a class="header-anchor" href="#管理镜像-images" aria-hidden="true">#</a> 管理镜像（Images）</h4><h5 id="查看镜像列表" tabindex="-1"><a class="header-anchor" href="#查看镜像列表" aria-hidden="true">#</a> 查看镜像列表：</h5><p>点击左侧菜单栏的“镜像”选项，你将看到当前Docker环境中所有镜像的列表。</p><p>搜索和拉取镜像：在镜像页面，点击右上角的“拉取镜像”按钮，输入镜像名称和标签，然后点击“拉取镜像”按钮，即可从Docker Hub或其他镜像仓库拉取镜像。</p><figure><img src="'+h+'" alt="image-20230927175804440" tabindex="0" loading="lazy"><figcaption>image-20230927175804440</figcaption></figure><h5 id="删除镜像" tabindex="-1"><a class="header-anchor" href="#删除镜像" aria-hidden="true">#</a> 删除镜像：</h5><p>在镜像列表中，点击每个镜像右侧的垃圾桶图标，即可删除镜像。</p><figure><img src="'+g+'" alt="image-20230927175854172" tabindex="0" loading="lazy"><figcaption>image-20230927175854172</figcaption></figure><h4 id="管理网络-networks" tabindex="-1"><a class="header-anchor" href="#管理网络-networks" aria-hidden="true">#</a> 管理网络（Networks）</h4><h5 id="查看网络列表" tabindex="-1"><a class="header-anchor" href="#查看网络列表" aria-hidden="true">#</a> 查看网络列表：</h5><p>点击左侧菜单栏的“网络”选项，你将看到当前Docker环境中所有网络的列表。</p><h5 id="创建网络" tabindex="-1"><a class="header-anchor" href="#创建网络" aria-hidden="true">#</a> 创建网络：</h5><p>在网络页面，点击右上角的“创建网络”按钮，选择网络类型（桥接、主机或覆盖），输入网络名称，然后点击“创建网络”按钮，即可创建新的网络。</p><h5 id="删除网络" tabindex="-1"><a class="header-anchor" href="#删除网络" aria-hidden="true">#</a> 删除网络：</h5><p>在网络列表中，点击每个网络右侧的垃圾桶图标，即可删除网络。</p><figure><img src="'+m+'" alt="image-20230927175948107" tabindex="0" loading="lazy"><figcaption>image-20230927175948107</figcaption></figure><h4 id="管理堆栈-stacks" tabindex="-1"><a class="header-anchor" href="#管理堆栈-stacks" aria-hidden="true">#</a> 管理堆栈（Stacks）</h4><h5 id="查看堆栈列表" tabindex="-1"><a class="header-anchor" href="#查看堆栈列表" aria-hidden="true">#</a> 查看堆栈列表：</h5><p>点击左侧菜单栏的“堆栈”选项，你将看到当前Docker环境中所有堆栈的列表。堆栈是一组相关联的服务，使用Docker Compose文件定义，稍后我们也会用该功能带着大家做一些很酷的事情。</p><h5 id="创建堆栈" tabindex="-1"><a class="header-anchor" href="#创建堆栈" aria-hidden="true">#</a> 创建堆栈：</h5><p>在堆栈页面，点击右上角的“创建堆栈”按钮，输入堆栈名称，选择部署方式（Web编辑器、上传Compose文件或从URL部署），然后点击“创建堆栈”按钮，即可部署新的堆栈。</p><h5 id="更新堆栈" tabindex="-1"><a class="header-anchor" href="#更新堆栈" aria-hidden="true">#</a> 更新堆栈：</h5><p>在堆栈列表中，点击堆栈名称进入堆栈详情页面。在此页面，你可以修改Docker Compose文件，然后点击“更新堆栈”按钮，以便应用新的配置。</p><h5 id="删除堆栈" tabindex="-1"><a class="header-anchor" href="#删除堆栈" aria-hidden="true">#</a> 删除堆栈：</h5><p>在堆栈列表中，点击每个堆栈右侧的垃圾桶图标，即可删除堆栈。</p><h3 id="高级操作" tabindex="-1"><a class="header-anchor" href="#高级操作" aria-hidden="true">#</a> 高级操作</h3><h4 id="自定义配置阿里云镜像加速仓库" tabindex="-1"><a class="header-anchor" href="#自定义配置阿里云镜像加速仓库" aria-hidden="true">#</a> 自定义配置阿里云镜像加速仓库</h4><blockquote><p>下载镜像较慢的情况下，可以使用镜像加速仓库</p></blockquote><ol><li>创建阿里云镜像</li></ol><figure><img src="'+u+'" alt="image-20230927180611834" tabindex="0" loading="lazy"><figcaption>image-20230927180611834</figcaption></figure><ol start="2"><li>成功创建阿里云镜像</li></ol><figure><img src="'+f+'" alt="image-20230927180739184" tabindex="0" loading="lazy"><figcaption>image-20230927180739184</figcaption></figure>',66),_=[k];function x(v,y){return e(),i("div",null,_)}const z=a(b,[["render",x],["__file","管理docker必备容器-Portainer基础教程.html.vue"]]);export{z as default};
