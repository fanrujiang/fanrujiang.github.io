import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t}from"./app-mQe7tUFU.js";const p="/assets/1667990938340-7Voy1ned.png",e="/assets/1667991153379-ttGFXaiC.png",o="/assets/1667991441046-1mUkt9R1.png",c="/assets/1667992083258-rv-vPOkz.png",l="/assets/1667992486134-s20OKQkM.png",i="/assets/1667993320872-bfs3_bMT.png",u="/assets/1667993682237-kB67K5zZ.png",r="/assets/1667993581146-8MUMx-9S.png",k="/assets/1667993965682-hIZgIAaK.png",d="/assets/1667994441934-38lRfCnt.png",m="/assets/1667995490654-zeevZX3i.png",v="/assets/1667996374837-xLI2dWDs.png",g="/assets/1667996538290-yO0HKaJO.png",b="/assets/1667996650787-cumvc2AG.png",f="/assets/1667996750188-z4Zs3DTg.png",y="/assets/1667996995326-7EZJd-Oq.png",h="/assets/1667997211327-Z5Ue7Kor.png",w="/assets/1668001422123-ov3eLnft.png",x="/assets/1668001621567-Gy5dB7Tw.png",q="/assets/1668001745089-TsZl6luR.png",_="/assets/1668044513873-WqbBBr55.png",j="/assets/1668044711404-BVZrveDQ.png",T="/assets/1668045391911-pnpjuJGN.png",L="/assets/1668045471304-aBUC6Ax3.png",M="/assets/1668045530645-YsUctnC2.png",S="/assets/1668045955362-ispeYc4t.png",X="/assets/1668046078574-Hnrxdy9s.png",E="/assets/1668046216355-Vjsr8PTQ.png",R="/assets/1668046420402-cSj6acku.png",P="/assets/1668046551345-kEN3w42a.png",z="/assets/1668046984412-Ye8bQgML.png",D="/assets/1668047091631-ih0kdLl4.png",O="/assets/1668047848218-FKkyw0Em.png",C="/assets/1668048108548-JSTjGjh6.png",A={},J=t('<h1 id="day11-特殊文件、日志技术、多线程" tabindex="-1"><a class="header-anchor" href="#day11-特殊文件、日志技术、多线程" aria-hidden="true">#</a> day11-特殊文件、日志技术、多线程</h1><h2 id="一、属性文件" tabindex="-1"><a class="header-anchor" href="#一、属性文件" aria-hidden="true">#</a> 一、属性文件</h2><h3 id="_1-1-特殊文件概述" tabindex="-1"><a class="header-anchor" href="#_1-1-特殊文件概述" aria-hidden="true">#</a> 1.1 特殊文件概述</h3><p>同学们，前面我们学习了IO流，我们知道IO流是用来读、写文件中的数据。但是我们接触到的文件都是普通的文本文件，普通的文本文件里面的数据是没有任何格式规范的，用户可以随意编写，如下图所示。</p><p>像这种普通的文本文件，没有任何规律可言，不方便程序对文件中的数据信息处理。</p><figure><img src="'+p+'" alt="1667990938340" tabindex="0" loading="lazy"><figcaption>1667990938340</figcaption></figure><p>在以后的Java开发过程中还会遇到一些特殊的文本文件，这些文件是有一些格式要求的，方便程序对文件中的数据进行处理。</p><p>比如，后面我们会用到两种特殊的文本文件，一种是properties文件，还有一种是xml文件。如下图所示。</p><figure><img src="'+e+'" alt="1667991153379" tabindex="0" loading="lazy"><figcaption>1667991153379</figcaption></figure><ul><li>后缀为.properties的文件，称之为属性文件，它可以很方便的存储一些类似于键值对的数据。经常当做软件的配置文件使用。</li><li>而xml文件能够表示更加复杂的数据关系，比如要表示多个用户的用户名、密码、家乡、性别等。在后面，也经常当做软件的配置文件使用。</li></ul><p>现在，学习特殊的文件主要学习什么呢？ 主要学习以下的三点</p><figure><img src="'+o+'" alt="1667991441046" tabindex="0" loading="lazy"><figcaption>1667991441046</figcaption></figure><h3 id="_1-2-properties属性文件" tabindex="-1"><a class="header-anchor" href="#_1-2-properties属性文件" aria-hidden="true">#</a> 1.2 Properties属性文件</h3><p>接下来，我们先学习Properties这种属性文件。首先我们要掌握属性文件的格式：</p><ol><li>属性文件后缀以<code>.properties</code>结尾</li><li>属性文件里面的每一行都是一个键值对，键和值中间用=隔开。比如: <code>admin=123456</code></li><li><code>#</code>表示这样是注释信息，是用来解释这一行配置是什么意思。</li><li>每一行末尾不要习惯性加分号，以及空格等字符；不然会把分号，空格会当做值的一部分。</li><li>键不能重复，值可以重复</li></ol><p>如下图所示</p><figure><img src="'+c+`" alt="1667992083258" tabindex="0" loading="lazy"><figcaption>1667992083258</figcaption></figure><p>接下来，我们学习如何读取属性文件中的数据。这里需要给同学们，介绍一个来叫Properties.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1.</span>Properties是什么？
	<span class="token class-name">Properties</span>是<span class="token class-name">Map</span>接口下面的一个实现类，所以<span class="token class-name">Properties</span>也是一种双列集合，用来存储键值对。	  但是一般不会把它当做集合来使用。
	
<span class="token number">2.</span>Properties核心作用？
	<span class="token class-name">Properties</span>类的对象，用来表示属性文件，可以用来读取属性文件中的键值对。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>使用Properties读取属性文件中的键值对</strong>，需要用到的方法如下。</li></ul><figure><img src="`+l+`" alt="1667992486134" tabindex="0" loading="lazy"><figcaption>1667992486134</figcaption></figure><p>实用Properties读取属性文件的步骤如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1</span>、创建一个<span class="token class-name">Properties</span>的对象出来（键值对集合，空容器）
<span class="token number">2</span>、调用<span class="token function">load</span><span class="token punctuation">(</span>字符输入流<span class="token operator">/</span>字节输入流<span class="token punctuation">)</span>方法，开始加载属性文件中的键值对数据到properties对象中去
<span class="token number">3</span>、调用<span class="token function">getProperty</span><span class="token punctuation">(</span>键<span class="token punctuation">)</span>方法，根据键取值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 目标：掌握使用Properties类读取属性文件中的键值对信息。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesTest1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1、创建一个Properties的对象出来（键值对集合，空容器）</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2、开始加载属性文件中的键值对数据到properties对象中去</span>
        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;properties-xml-log-app\\\\src\\\\users.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3、根据键取值</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;赵敏&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;张无忌&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 4、遍历全部的键和值。</span>
        <span class="token comment">//获取键的集合</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">stringPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//再根据键获取值</span>
            <span class="token class-name">String</span> value <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot;----&gt;&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
		
        properties<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">&quot;----&gt;&quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>使用Properties往属性文件中写键值对</strong>，需要用到的方法如下</li></ul><figure><img src="`+i+`" alt="1667993320872" tabindex="0" loading="lazy"><figcaption>1667993320872</figcaption></figure><p>往Properties属性文件中写键值对的步骤如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1</span>、先准备一个<span class="token punctuation">.</span>properties属性文件，按照格式写几个键值对
<span class="token number">1</span>、创建<span class="token class-name">Properties</span>对象出来，
<span class="token number">2</span>、调用setProperty存储一些键值对数据
<span class="token number">3</span>、调用<span class="token function">store</span><span class="token punctuation">(</span>字符输出流<span class="token operator">/</span>字节输出流<span class="token punctuation">,</span> 注释<span class="token punctuation">)</span>，将<span class="token class-name">Properties</span>集合中的键和值写到文件中
	注意：第二个参数是注释，必须得加；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先准备一个<code>users.properties</code>属性文件，如下图所示</p><figure><img src="`+u+`" alt="1667993682237" tabindex="0" loading="lazy"><figcaption>1667993682237</figcaption></figure><p>接下来，编写代码读取上面的属性文件。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesTest2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1、创建Properties对象出来，先用它存储一些键值对数据</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;张无忌&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;minmin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;殷素素&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cuishan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;张翠山&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;susu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2、把properties对象中的键值对数据存入到属性文件中去</span>
        properties<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;properties-xml-log-app/src/users2.properties&quot;</span><span class="token punctuation">)</span>
                         <span class="token punctuation">,</span> <span class="token string">&quot;i saved many users!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上面的代码，<code>user2.properties</code> 配置文件打开效果如下图所示。</p><figure><img src="`+r+'" alt="1667993581146" tabindex="0" loading="lazy"><figcaption>1667993581146</figcaption></figure><h2 id="二、xml文件" tabindex="-1"><a class="header-anchor" href="#二、xml文件" aria-hidden="true">#</a> 二、XML文件</h2><p>同学们，在上一节我们学习了properties属性文件。接下来我们再学习一种在开发中经常使用的文件，叫做xml文件。我们先来给同学们介绍一下，什么是xml文件，然后再来学习如何读取xml文件中的数据。</p><h3 id="_2-1-xml文件概述" tabindex="-1"><a class="header-anchor" href="#_2-1-xml文件概述" aria-hidden="true">#</a> 2.1 XML文件概述</h3><p><strong>首先，我们来认识一下，什么是XML？</strong></p><p>XML是可扩展的标记语言，意思是它是由一些标签组成 的，而这些标签是自己定义的。本质上一种数据格式，可以用来表示复杂的数据关系。</p><p>XML文件有如下的特点：</p><ul><li>XML中的<code>&lt;标签名&gt;</code> 称为一个标签或者一个元素，一般是成对出现的。</li><li>XML中的标签名可以自己定义（可扩展），但是必须要正确的嵌套</li><li>XML中只能有一个根标签。</li><li>XML标准中可以有属性</li><li>XML必须第一行有一个文档声明，格式是固定的<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code></li><li>XML文件必须是以.xml为后缀结尾</li></ul><p>如下图所示</p><figure><img src="'+k+'" alt="1667993965682" tabindex="0" loading="lazy"><figcaption>1667993965682</figcaption></figure><p><strong>接下，同学们可以跟着步骤新建一个XML文件，试试！</strong></p><figure><img src="'+d+`" alt="1667994441934" tabindex="0" loading="lazy"><figcaption>1667994441934</figcaption></figure><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token comment">&lt;!-- 注释：以上抬头声明必须放在第一行，必须有 --&gt;</span>
<span class="token comment">&lt;!--  根标签只能有一个 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>users</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">desc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>第一个用户<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>张无忌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sex</span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sex</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>地址</span><span class="token punctuation">&gt;</span></span>光明顶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>地址</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>minmin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>people</span><span class="token punctuation">&gt;</span></span>很多人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>people</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>敏敏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sex</span><span class="token punctuation">&gt;</span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sex</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>地址</span><span class="token punctuation">&gt;</span></span>光明顶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>地址</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>wuji<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>users</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面XML文件中的数据格式是最为常见的，标签有属性、文本、还有合理的嵌套。XML文件中除了写以上的数据格式之外，还有一些特殊的字符不能直接写。</p><ul><li><p>像 <code>&lt;,&gt;,&amp; </code>等这些符号不能出现在标签的文本中，因为标签格式本身就有&lt;&gt;，会和标签格式冲突。</p><p>如果标签文本中有这些特殊字符，需要用一些占位符代替。</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>&amp;lt;  表示 &lt;
&amp;gt;  表示 &gt;
&amp;amp; 表示 &amp;
&amp;apos; 表示 &#39;
&amp;quot; 表示 &quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">&gt;</span></span> 3 <span class="token entity named-entity" title="&lt;">&amp;lt;</span> 2 <span class="token entity named-entity" title="&amp;">&amp;amp;</span><span class="token entity named-entity" title="&amp;">&amp;amp;</span> 5 <span class="token entity named-entity" title="&gt;">&amp;gt;</span> 4 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如果在标签文本中，出现大量的特殊字符，不想使用特殊字符，此时可以用CDATA区，格式如下</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data1</span><span class="token punctuation">&gt;</span></span>
    <span class="token cdata">&lt;![CDATA[
   		3 &lt; 2 &amp;&amp; 5 &gt; 4
    ]]&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>最后，给同学们聊聊，XML在实际开发中有什么作用？</strong></p><figure><img src="`+m+'" alt="1667995490654" tabindex="0" loading="lazy"><figcaption>1667995490654</figcaption></figure><p>关于XML是什么，以及XML的格式，还有XML有什么作用，就先认识到这里。</p><h3 id="_2-2-xml解析1" tabindex="-1"><a class="header-anchor" href="#_2-2-xml解析1" aria-hidden="true">#</a> 2.2 XML解析1</h3><p>使用程序读取XML文件中的数据，称之为XML解析。这里并不需要我们自己写IO流代码去读取xml文件中的数据。其实有很多开源的，好用的XML解析框架，最知名的是DOM4J（第三方开发的）</p><figure><img src="'+v+'" alt="1667996374837" tabindex="0" loading="lazy"><figcaption>1667996374837</figcaption></figure><p>由于DOM4J是第三方提供的，所以需要把第三方提供的Jar包导入到自己的项目中来，才可以使用。具体步骤如下：</p><figure><img src="'+g+'" alt="1667996538290" tabindex="0" loading="lazy"><figcaption>1667996538290</figcaption></figure><p>DOM4J解析XML文件的思想是：文档对象模型（意思是把整个XML文档、每一个标签、每一个属性都等都当做对象来看待）。Dowument对象表示真个XML文档、Element对象表示标签（元素）、Attribute对象表示属性、标签中的内容就是文本</p><figure><img src="'+b+'" alt="1667996650787" tabindex="0" loading="lazy"><figcaption>1667996650787</figcaption></figure><p>DOM4J解析XML需要用到的方法如下图所示</p><figure><img src="'+f+`" alt="1667996750188" tabindex="0" loading="lazy"><figcaption>1667996750188</figcaption></figure><p>XML解析的过程，是从根元素开始，从外层往里层解析。 我们先把Document对象，和根元素获取出来</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dom4JTest1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1、创建一个Dom4J框架提供的解析器对象</span>
        <span class="token class-name">SAXReader</span> saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2、使用saxReader对象把需要解析的XML文件读成一个Document对象。</span>
        <span class="token class-name">Document</span> document <span class="token operator">=</span>
                saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;properties-xml-log-app\\\\src\\\\helloworld.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3、从文档对象中解析XML文件的全部数据了</span>
        <span class="token class-name">Element</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+y+'" alt="1667996995326" tabindex="0" loading="lazy"><figcaption>1667996995326</figcaption></figure><h3 id="_2-3-xml解析2" tabindex="-1"><a class="header-anchor" href="#_2-3-xml解析2" aria-hidden="true">#</a> 2.3 XML解析2</h3><p>获取到XML文件的根元素之后，接下来，就可以用根元素在获取到它里面的子元素（包括子标签、表属性等）。需要用到的方法如下图所示</p><figure><img src="'+h+`" alt="1667997211327" tabindex="0" loading="lazy"><figcaption>1667997211327</figcaption></figure><p>接下来，把上面的方法先一个一个的演示一下。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dom4JTest1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1、创建一个Dom4J框架提供的解析器对象</span>
        <span class="token class-name">SAXReader</span> saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2、使用saxReader对象把需要解析的XML文件读成一个Document对象。</span>
        <span class="token class-name">Document</span> document <span class="token operator">=</span>
                saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;properties-xml-log-app\\\\src\\\\helloworld.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3、从文档对象中解析XML文件的全部数据了</span>
        <span class="token class-name">Element</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 4、获取根元素下的全部一级子元素。</span>
        <span class="token comment">// List&lt;Element&gt; elements = root.elements();</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">&gt;</span></span> elements <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> element <span class="token operator">:</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 5、获取当前元素下的某个子元素。</span>
        <span class="token class-name">Element</span> people <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">&quot;people&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 如果下面有很多子元素user，默认获取第一个。</span>
        <span class="token class-name">Element</span> user <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 6、获取元素的属性信息呢？</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Attribute</span> id <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">attribute</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Attribute</span><span class="token punctuation">&gt;</span></span> attributes <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">attributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Attribute</span> attribute <span class="token operator">:</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> attribute<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 7、如何获取全部的文本内容:获取当前元素下的子元素文本值</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">&quot;地址&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">elementTextTrim</span><span class="token punctuation">(</span><span class="token string">&quot;地址&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取出文本去除前后空格</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Element</span> data <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getTextTrim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取出文本去除前后空格</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-xml文件写入" tabindex="-1"><a class="header-anchor" href="#_2-4-xml文件写入" aria-hidden="true">#</a> 2.4 XML文件写入</h3><p>在前面我们已经学习了XML解析，意思就是使用程序把XML文件中的数据读取出来。反过来能不能往XML文件中写入数据呢？ 答案是可以的。</p><p>DOM4J也提供了往XML文件中写标签的方法，但是用起来比较麻烦。这里不建议使用</p><p>我们自己使用StringBuilder按照标签的格式拼接，然后再使用BufferedWriter写到XML文件中去就可以了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dom4JTest2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1、使用一个StringBuilder对象来拼接XML格式的数据。</span>
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;?xml version=\\&quot;1.0\\&quot; encoding=\\&quot;UTF-8\\&quot; ?&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;book&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&lt;name&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;从入门到跑路&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/name&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&lt;author&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;dlei&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/author&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&lt;price&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">999.99</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/price&gt;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/book&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">(</span>
                <span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;properties-xml-log-app/src/book.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">)</span><span class="token punctuation">{</span>
            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-xml约束-了解" tabindex="-1"><a class="header-anchor" href="#_2-5-xml约束-了解" aria-hidden="true">#</a> 2.5 XML约束（了解）</h3><p>各位小伙伴，关于XML还有最后一个知识需要大家了解一下。这个知识叫做约束XML文件的编写，我讲这个知识的目的是因为同学们以后在开发过程中会遇到这个知识，但是这个代码不需要大家写，了解一下就可以了。</p><p><strong>首先，说一些什么是XML约束？</strong></p><p>XML约束指的是限制XML文件中的标签或者属性，只能按照规定的格式写。</p><p>比如我在项目中，想约束一个XML文件中的标签只能写&lt;书&gt;、&lt;书名&gt;、&lt;作者&gt;、&lt;售价&gt;这几个标签，如果写其他标签就报错。</p><figure><img src="`+w+'" alt="1668001422123" tabindex="0" loading="lazy"><figcaption>1668001422123</figcaption></figure><p>怎么才能达到上面的效果呢？有两种约束技术，一种是DTD约束、一种是Schame约束。</p><ul><li><p>DTD约束案例</p><p>如下图所示book.xml中引入了DTD约束文件，book.xml文件中的标签就受到DTD文件的约束</p><figure><img src="'+x+`" alt="1668001621567" tabindex="0" loading="lazy"><figcaption>1668001621567</figcaption></figure><p>DTD文件解释</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!ELEMENT 书架(书+)&gt;   表示根标签是&lt;书架&gt;，并且书架中有子标签&lt;书&gt;
&lt;!ELEMENT 书(书名、作者、售价)&gt; 表示书是一个标签，且书中有子标签&lt;书名&gt;、&lt;作者&gt;、&lt;售价&gt;
&lt;!ELEMENT 书名(#PCDATA)&gt;	表示&lt;书名&gt;是一个标签，且&lt;书名&gt;里面是普通文本
&lt;!ELEMENT 作者(#PCDATA)&gt;	表示&lt;作者&gt;是一个标签，且&lt;作者&gt;里面是普通文本
&lt;!ELEMENT 售价(#PCDATA)&gt;	表示&lt;售价&gt;是一个标签，且&lt;售价&gt;里面是普通文本
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Schame约束案例</p><p>如下图所示，左边的book2.xml文件就受到右边schame文件（.xsd结尾的文件）的约束。</p><figure><img src="`+q+'" alt="1668001745089" tabindex="0" loading="lazy"><figcaption>1668001745089</figcaption></figure></li></ul><h2 id="三、日志技术" tabindex="-1"><a class="header-anchor" href="#三、日志技术" aria-hidden="true">#</a> 三、日志技术</h2><h3 id="_3-1-日志概述" tabindex="-1"><a class="header-anchor" href="#_3-1-日志概述" aria-hidden="true">#</a> 3.1 日志概述</h3><p>好的同学们，接下来我们学习一个将来我们会用到的一个技术，叫做日志技术。首先同学们肯定想知道什么是日志？</p><p>想搞清楚什么是日志，其实可以通过下面几个问题来了解的。</p><ul><li>系统系统能记住某些数据被谁操作，比如被谁删除了？</li><li>想分析用户浏览系统的具体情况，比如挖掘用户的具体喜好？</li><li>当系统在开发中或者上线后出现了Bug，崩溃了，该通过什么去分析，定位Bug?</li></ul><p>而日志就可以帮我们解决以上的问题。所以日志就好比生活中的日记，日记可以记录生活中的点点滴滴；而程序中的日志，通常就是一个文件，里面记录了程序运行过程中产生的各种数据。</p><p>日志技术有如下好处</p><ol><li>日志可以将系统执行的信息，方便的记录到指定位置，可以是控制台、可以是文件、可以是数据库中。</li><li>日志可以随时以开关的形式控制启停，无需侵入到源代码中去修改。</li></ol><h3 id="_3-2-日志的体系" tabindex="-1"><a class="header-anchor" href="#_3-2-日志的体系" aria-hidden="true">#</a> 3.2 日志的体系</h3><p>在上一节给同学们介绍了，什么是日志，日志能干什么。接下来需要给同学们介绍一下有哪些日志技术，以及日志的体系。</p><p>大家注意了在行内，其实有很多日志框架给开发者使用。所谓日志框架就是由一些牛人或者第三方公司已经做好的实现代码，后来者就可以直接拿过去使用。</p><p>日志框架有很多种，比如有JUL（java.util.logging）、Log4j、logback等。但是这些日志框架如果使用的API方法都不一样的话，使用者的学习成本就很高。为了降低程序员的学习压力，行内提供了一套日志接口，然后所有的日志框架都按照日志接口的API来实现就可以了。</p><p>这样程序员只要会一套日志框架，那么其他的也就可以通过用，甚至可以在多套日志框架之间来回切换。比较常用的日志框架，和日志接口的关系如下图所示</p><figure><img src="'+_+'" alt="1668044513873" tabindex="0" loading="lazy"><figcaption>1668044513873</figcaption></figure><p><strong>这里推荐同学们使用Logback日志框架，也在行业中最为广泛使用的。</strong></p><p><strong>Logback日志分为哪几个模块</strong></p><figure><img src="'+j+`" alt="1668044711404" tabindex="0" loading="lazy"><figcaption>1668044711404</figcaption></figure><h3 id="_3-3-logback快速入门" tabindex="-1"><a class="header-anchor" href="#_3-3-logback快速入门" aria-hidden="true">#</a> 3.3 Logback快速入门</h3><p>接下来，就带领同学们快速使用一下Logback日志框架，使用Logback记录几条日志信息到文件中去和将日志信息打印在控制台上。</p><p>由于Logback是第三方提供的技术，所以首先需要啊将Jar包引入到项目中，具体步骤如下</p><ol><li><p>在资料中找到<code>slftj-api.jar、logback-core.jar、logback-classes.jar</code> 这三个jar包，复制一下</p></li><li><p>在当前模块下面新建一个lib文件夹，把刚刚复制的三个jar包都粘贴到此处</p></li><li><p>从资料中找到<code>logback.xml</code>配置文件，将此文件复制粘贴到src目录下（必须是src目录）</p></li><li><p>然后就可以开始写代码了，在代码中创建一个日志记录日对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;当前类名&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>开始记录日志，代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogBackTest</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建一个Logger日志对象</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;LogBackTest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//while (true) {</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;chu法方法开始执行~~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">chu</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;chu法方法执行成功~~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;chu法方法执行失败了，出现了bug~~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token comment">//}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">chu</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;参数a:&quot;</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;参数b:&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;结果是：&quot;</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>当我们运行程序时，就可以看到控制台记录的日志</p><figure><img src="`+T+'" alt="1668045391911" tabindex="0" loading="lazy"><figcaption>1668045391911</figcaption></figure><p>同时在文件中，也有一份这样的日志信息。文件在哪里内，从配置文件中去找</p><figure><img src="'+L+'" alt="1668045471304" tabindex="0" loading="lazy"><figcaption>1668045471304</figcaption></figure><p>打开<code>D:/log/itheima-data.log</code>看一下文件中是否有记录日志吧！！</p><figure><img src="'+M+`" alt="1668045530645" tabindex="0" loading="lazy"><figcaption>1668045530645</figcaption></figure><p>关于Logback的快速入门我们就做完了。至于日志的配置文件中，其他的配置是什么含义我们下一节再继续学习。</p><h3 id="_3-4-日志配置文件" tabindex="-1"><a class="header-anchor" href="#_3-4-日志配置文件" aria-hidden="true">#</a> 3.4 日志配置文件</h3><p>Logback提供了一个核心配置文件logback.xml，日志框架在记录日志时会读取配置文件中的配置信息，从而记录日志的形式。具体可以做哪些配置呢？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1.</span> 可以配置日志输出的位置是文件、还是控制台
<span class="token number">2.</span> 可以配置日志输出的格式
<span class="token number">3.</span> 还可以配置日志关闭和开启、以及哪些日志输出哪些日志不输出。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>如下图所示，控制日志往文件中输出，还是往控制台输出</strong></li></ul><figure><img src="`+S+'" alt="1668045955362" tabindex="0" loading="lazy"><figcaption>1668045955362</figcaption></figure><ul><li><strong>如下图所示，控制打开和关闭日志</strong></li></ul><figure><img src="'+X+'" alt="1668046078574" tabindex="0" loading="lazy"><figcaption>1668046078574</figcaption></figure><ul><li><p><strong>如下图所示，控制日志的输出的格式</strong></p><p>日志格式是由一些特殊的符号组成，可以根据需要删减不想看到的部分。比如不想看到线程名那就不要[%thread]。但是不建议同学们更改这些格式，因为这些都是日志很基本的信息。</p></li></ul><figure><img src="'+E+'" alt="1668046216355" tabindex="0" loading="lazy"><figcaption>1668046216355</figcaption></figure><h3 id="_3-5-配置日志级别" tabindex="-1"><a class="header-anchor" href="#_3-5-配置日志级别" aria-hidden="true">#</a> 3.5 配置日志级别</h3><figure><img src="'+R+'" alt="1668046420402" tabindex="0" loading="lazy"><figcaption>1668046420402</figcaption></figure><ul><li>在哪里配置日志级别呢？如下图所示</li></ul><figure><img src="'+P+`" alt="1668046551345" tabindex="0" loading="lazy"><figcaption>1668046551345</figcaption></figure><ul><li><p>Logback只输出大于或者等于核心配置文件配置的日志级别信息。小于配置级别的日志信息，不被记录。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>配置的是trace，则trace、debug、info、warn、error级别的日志都被输出
配置的是debug<span class="token punctuation">,</span> 则debug、info、warn、error级别的日志被输出
配置的是info<span class="token punctuation">,</span>则info、warn、error级别的日志被输出
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="三、多线程" tabindex="-1"><a class="header-anchor" href="#三、多线程" aria-hidden="true">#</a> 三、多线程</h2><p>同学们，接下来我们来学习一个全新而且非常重要的知识，叫做多线程。首先和同学们聊聊什么是线程？<strong>线程其实是程序中的一条执行路径。</strong></p><p>我们之前写过的程序，其实都是单线程程序，如下图代码，如果前面的for循环没有执行完，for循环下面的代码是不会执行的。</p><figure><img src="`+z+'" alt="1668046984412" tabindex="0" loading="lazy"><figcaption>1668046984412</figcaption></figure><p><strong>怎样的程序才是多线程程序呢？</strong> 如下图所示，12306网站就是支持多线程的，因为同时可以有很多人一起进入网站购票，而且每一个人互不影响。再比如百度网盘，可以同时下载或者上传多个文件。这些程序中其实就有多条执行路径，每一条执行执行路径就是一条线程，所以这样的程序就是多线程程序。</p><figure><img src="'+D+`" alt="1668047091631" tabindex="0" loading="lazy"><figcaption>1668047091631</figcaption></figure><p>认识了什么是多线程程序，那如何使用Java创建线程呢？ Java提供了几种创建线程的方式，下一节再一种一种的学习。</p><h3 id="_4-1-线程创建方式1" tabindex="-1"><a class="header-anchor" href="#_4-1-线程创建方式1" aria-hidden="true">#</a> 4.1 线程创建方式1</h3><p>Java为开发者提供了一个类叫做Thread，此类的对象用来表示线程。创建线程并执行线程的步骤如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1.</span>定义一个子类继承<span class="token class-name">Thread</span>类，并重写run方法
<span class="token number">2.</span>创建<span class="token class-name">Thread</span>的子类对象
<span class="token number">3.</span>调用start方法启动线程（启动线程后，会自动执行run方法中的代码）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>
    <span class="token comment">// 2、必须重写Thread类的run方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 描述线程的执行任务。</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;子线程MyThread输出：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再定义一个测试类，在测试类中创建MyThread线程对象，并启动线程</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest1</span> <span class="token punctuation">{</span>
    <span class="token comment">// main方法是由一条默认的主线程负责执行。</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 3、创建MyThread线程类的对象代表一个线程</span>
        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4、启动线程（自动执行run方法的）</span>
        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;主线程main输出：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果如下图所示，我们会发现MyThread和main线程在相互抢夺CPU的执行权（<strong>注意：哪一个线程先执行，哪一个线程后执行，目前我们是无法控制的，每次输出结果都会不一样</strong>）</p><figure><img src="`+O+'" alt="1668047848218" tabindex="0" loading="lazy"><figcaption>1668047848218</figcaption></figure><p><strong>最后我们还需要注意一点</strong>：不能直接去调用run方法，如果直接调用run方法就不认为是一条线程启动了，而是把Thread当做一个普通对象，此时run方法中的执行的代码会成为主线程的一部分。此时执行结果是这样的。</p><figure><img src="'+C+`" alt="1668048108548" tabindex="0" loading="lazy"><figcaption>1668048108548</figcaption></figure><h3 id="_4-2-线程创建方式2" tabindex="-1"><a class="header-anchor" href="#_4-2-线程创建方式2" aria-hidden="true">#</a> 4.2 线程创建方式2</h3><p>接下来我们学习线程的第二种创建方式。Java为开发者提供了一个Runnable接口，该接口中只有一个run方法，意思就是通过Runnable接口的实现类对象专门来表示线程要执行的任务。具体步骤如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1.</span>先写一个<span class="token class-name">Runnable</span>接口的实现类，重写run方法<span class="token punctuation">(</span>这里面就是线程要执行的代码<span class="token punctuation">)</span>
<span class="token number">2.</span>再创建一个<span class="token class-name">Runnable</span>实现类的对象
<span class="token number">3.</span>创建一个<span class="token class-name">Thread</span>对象，把<span class="token class-name">Runnable</span>实现类的对象传递给<span class="token class-name">Thread</span>
<span class="token number">4.</span>调用<span class="token class-name">Thread</span>对象的<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法启动线程（启动后会自动执行<span class="token class-name">Runnable</span>里面的run方法）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码如下：先准备一个Runnable接口的实现类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 1、定义一个任务类，实现Runnable接口
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>
    <span class="token comment">// 2、重写runnable的run方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 线程要执行的任务。</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;子线程输出 ===》&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再写一个测试类，在测试类中创建线程对象，并执行线程</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 3、创建任务对象。</span>
        <span class="token class-name">Runnable</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4、把任务对象交给一个线程对象处理。</span>
        <span class="token comment">//  public Thread(Runnable target)</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;主线程main输出 ===》&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上面代码，结果如下图所示**（注意：没有出现下面交替执行的效果，也是正常的）**</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>主线程main输出 <span class="token operator">==</span><span class="token operator">=</span>》<span class="token number">1</span>
主线程main输出 <span class="token operator">==</span><span class="token operator">=</span>》<span class="token number">2</span>
主线程main输出 <span class="token operator">==</span><span class="token operator">=</span>》<span class="token number">3</span>
子线程输出 <span class="token operator">==</span><span class="token operator">=</span>》<span class="token number">1</span>
子线程输出 <span class="token operator">==</span><span class="token operator">=</span>》<span class="token number">2</span>
子线程输出 <span class="token operator">==</span><span class="token operator">=</span>》<span class="token number">3</span>
子线程输出 <span class="token operator">==</span><span class="token operator">=</span>》<span class="token number">4</span>
子线程输出 <span class="token operator">==</span><span class="token operator">=</span>》<span class="token number">5</span>
主线程main输出 <span class="token operator">==</span><span class="token operator">=</span>》<span class="token number">4</span>
主线程main输出 <span class="token operator">==</span><span class="token operator">=</span>》<span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-线程创建方式2—匿名内部类" tabindex="-1"><a class="header-anchor" href="#_4-3-线程创建方式2—匿名内部类" aria-hidden="true">#</a> 4.3 线程创建方式2—匿名内部类</h3><p>同学们注意了，现在这种写法不是新知识。只是将前面第二种方式用匿名内部类改写一下。因为同学们在看别人写的代码时，有可能会看到这种写法。你知道是怎么回事就可以了。</p><p>刚刚我们学习的第二种线程的创建方式，需要写一个Runnable接口的实现类，然后再把Runnable实现类的对象传递给Thread对象。</p><p><strong>现在我不想写Runnable实现类，于是可以直接创建Runnable接口的匿名内部类对象，传递给Thread对象。</strong></p><p>代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest2_2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1、直接创建Runnable接口的匿名内部类形式（任务对象）</span>
        <span class="token class-name">Runnable</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;子线程1输出：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 简化形式1：</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;子线程2输出：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 简化形式2：</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;子线程3输出：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;主线程main输出：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-线程的创建方式3" tabindex="-1"><a class="header-anchor" href="#_4-4-线程的创建方式3" aria-hidden="true">#</a> 4.4 线程的创建方式3</h3><p>接下来，我们学习线程的第三种创建方式。已经有两种了为什么还有要第三种呢？ 这样，我们先分析一下前面两种都存在的一个问题。然后再引出第三种可以解决这个问题。</p><ul><li><p>假设线程执行完毕之后有一些数据需要返回，前面两种方式重写的run方法均没有返回结果。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>线程执行的代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>JDK5提供了Callable接口和FutureTask类来创建线程，它最大的优点就是有返回值。</p><p>在Callable接口中有一个call方法，重写call方法就是线程要执行的代码，它是有返回值的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>线程执行的代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> 结果<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>第三种创建线程的方式，步骤如下</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1.</span>先定义一个<span class="token class-name">Callable</span>接口的实现类，重写call方法
<span class="token number">2.</span>创建<span class="token class-name">Callable</span>实现类的对象
<span class="token number">3.</span>创建<span class="token class-name">FutureTask</span>类的对象，将<span class="token class-name">Callable</span>对象传递给<span class="token class-name">FutureTask</span>
<span class="token number">4.</span>创建<span class="token class-name">Thread</span>对象，将<span class="token class-name">Future</span>对象传递给<span class="token class-name">Thread</span>
<span class="token number">5.</span>调用<span class="token class-name">Thread</span>的<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法启动线程<span class="token punctuation">(</span>启动后会自动执行call方法<span class="token punctuation">)</span>
   等<span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法执行完之后，会自动将返回值结果封装到<span class="token class-name">FutrueTask</span>对象中
   
<span class="token number">6.</span>调用<span class="token class-name">FutrueTask</span>对的<span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法获取返回结果
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码如下：先准备一个Callable接口的实现类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">&quot;线程求出了1-&quot;</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">&quot;的和是:&quot;</span> <span class="token operator">+</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再定义一个测试类，在测试类中创建线程并启动线程，还要获取返回结果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest3</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 3、创建一个Callable的对象</span>
        <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> call <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4、把Callable的对象封装成一个FutureTask对象（任务对象）</span>
        <span class="token comment">// 未来任务对象的作用？</span>
        <span class="token comment">// 1、是一个任务对象，实现了Runnable对象.</span>
        <span class="token comment">// 2、可以在线程执行完毕之后，用未来任务对象调用get方法获取线程执行完毕后的结果。</span>
        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> f1  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 5、把任务对象交给一个Thread对象</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> call2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> f2  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>call2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">// 6、获取线程执行完毕后返回的结果。</span>
        <span class="token comment">// 注意：如果执行到这儿，假如上面的线程还没有执行完毕</span>
        <span class="token comment">// 这里的代码会暂停，等待上面线程执行完毕后才会获取结果。</span>
        <span class="token class-name">String</span> rs <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> rs2 <span class="token operator">=</span> f2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>必须练习<span class="token operator">:</span>
	<span class="token number">1.</span>编写一个<span class="token class-name">Properties</span>文件<span class="token punctuation">,</span>并且使用<span class="token class-name">Properties</span>属性集类读取properties文件中的所有键值对数据
	<span class="token number">2.</span>使用<span class="token class-name">Dom4j</span>框架解析资料中的helloworld<span class="token punctuation">.</span>xml文件<span class="token operator">--</span><span class="token operator">-</span>读取该xml文件中的所有数据
	<span class="token number">3.</span>根据dtd<span class="token punctuation">,</span>schema约束编写xml文件<span class="token operator">--</span><span class="token operator">-</span>三步<span class="token punctuation">(</span><span class="token number">1.</span>左括号  <span class="token number">2.</span>根据提示选择回车   <span class="token number">3.</span>填写缺少的内容<span class="token punctuation">)</span>
    <span class="token number">4.l</span>ogback日志框架的使用<span class="token punctuation">,</span>以及感受一下控制日志的输出情况
    	<span class="token number">4.1</span> 拷贝相关的jar包
    	<span class="token number">4.2</span> 拷贝日志框架的配置文件到src路径<span class="token punctuation">(</span>必须<span class="token punctuation">)</span>
        <span class="token number">4.3</span> 编写记录日志的代码
        <span class="token number">4.4</span> 修改日志配置文件里面的配置<span class="token punctuation">,</span>感受一下控制日志的输出情况
    <span class="token number">5.</span>创建多条线程<span class="token operator">--</span><span class="token operator">-</span>方式<span class="token number">1</span><span class="token punctuation">,</span>方式<span class="token number">2</span><span class="token punctuation">,</span>方式<span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,168),F=[J];function G(B,N){return s(),a("div",null,F)}const Z=n(A,[["render",G],["__file","day11-特殊文件、日志技术、多线程.html.vue"]]);export{Z as default};
