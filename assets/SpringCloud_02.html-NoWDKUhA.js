import{_ as p,r as o,o as i,c,h as l,a as n,b as a,d as e,e as u}from"./app-rjaaUb-0.js";const r="/assets/image-20210713230444308-bv8SPWt5.png",d="/assets/1636996840889-IOWTorcA.png",k="/assets/1636997762904-Y9rQcMo8.png",m="/assets/1636997936128-tpIsG_GW.png",g="/assets/1636998478729-U8y3hMSq.png",v="/assets/1636998675210-E92glCHS.png",b="/assets/1636998903744-y_UV9xJP.png",h="/assets/1631822292468-za9VpXk1.png",y="/assets/1631822332004-I5IxGQQ_.png",t="/assets/image-20210714000101516-zggdje58.png",f="/assets/1631822642442-G702qXcn.png",_="/assets/1631822696468-RLNz9Mmk.png",x="/assets/1631822746055-6b2lXyAo.png",w="/assets/1631822846391-hD6PsE-b.png",q="/assets/1631822989268-FwStYhdi.png",S="/assets/image-20210714000941256-S-NEjcPB.png",N="/assets/1637003839496-nXiFXxGo.png",z="/assets/1637003966048-0RS4HMNu.png",C="/assets/1637004043157-QFRCzpIU.png",R="/assets/1631823118790-8oOkA_c_.png",A="/assets/image-20210714164426792-hI6PBXC9.png",F="/assets/1631823734187-xdokHF0r.png",P="/assets/1637002210728-aCQsPXQ8.png",I="/assets/1637032854943-JJIdOSP1.png",G="/assets/L0iFYNF-vf-i3jTj.png",j="/assets/1637032645231-0kFsMLdm.png",E="/assets/1637032872733-Kkc9oWd0.png",T="/assets/1637038248474-rk7xPpch.png",H="/assets/1637038773343-nHf1Hx1G.png",O="/assets/1631827147881-7IxENyCM.png",M="/assets/1631827178149-T55soRUZ.png",U="/assets/image-20210714174623557-oTmJ5RRy.png",B="/assets/image-20210714174728042-LIzPtVPe.png",D="/assets/1631368025990-Rgz0O0cU.png",L="/assets/1636863455306-t8RoRY6D.png",V="/assets/1631794000604-Yg6KQYRe.png",Q="/assets/image-20210714212312871-1U0Hs_lQ.png",W="/assets/1636990785234-TLOMPOQE.png",X="/assets/1636990964684-ToVkuV_s.png",Z="/assets/image-20210714214228409-7tn0SqWf.png",J="/assets/1636984290899-Knbr7vf6.png",Y="/assets/1636986996376-xQcFGz2m.png",$={},K=n("ul",null,[n("li",null,"SpringCloud Gateway 微服务网关"),n("li",null,"Nacos 服务注册中心"),n("li",null,"Nacos 服务配置中心")],-1),nn=n("h2",{id:"_1-nacos-服务注册",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-nacos-服务注册","aria-hidden":"true"},"#"),a(" 1 Nacos 服务注册")],-1),an=n("p",null,"国内公司一般都推崇阿里巴巴的技术，比如注册中心，SpringCloudAlibaba也推出了一个名为Nacos的注册中心。",-1),sn=n("h3",{id:"_1-1-认识和安装nacos",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-1-认识和安装nacos","aria-hidden":"true"},"#"),a(" 1.1.认识和安装Nacos")],-1),en={href:"https://nacos.io/",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://spring.io/projects/spring-cloud",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://github.com/Netflix/eureka",target:"_blank",rel:"noopener noreferrer"},on=u('<figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>安装方式可以看我的其他文章。</p><p>nacos访问地址：http://localhost:8848/nacos</p><p>控制台账号：nacos 密码：nacos</p><h3 id="_1-2-服务注册到nacos【重点】" tabindex="-1"><a class="header-anchor" href="#_1-2-服务注册到nacos【重点】" aria-hidden="true">#</a> 1.2.服务注册到nacos【重点】</h3><p>Nacos是SpringCloudAlibaba的组件，而SpringCloudAlibaba也遵循SpringCloud中定义的服务注册、服务发现规范。因此使用Nacos和使用Eureka对于微服务来说，并没有太大区别。</p><p>主要差异在于：</p><ul><li>依赖不同</li><li>服务地址不同</li></ul><p>1）引入依赖</p><p>在<code>springcloud-parent</code>父工程的pom文件中的<code>&lt;dependencyManagement&gt;</code>中引入SpringCloudAlibaba的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
            .......
            <span class="token comment">&lt;!--引入SpringCloudAlibaba的依赖--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在itheima-user和itheima-order中的pom文件中引入nacos-discovery依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的依赖。</p></blockquote><p>2）配置nacos地址</p><p>在itheima-user和itheima-order的application.yml中添加nacos地址：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的地址</p></blockquote><p>3）修改原来的负载均衡配置, 使用NacosRule</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">itheima-user</span><span class="token punctuation">:</span>
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.alibaba.cloud.nacos.ribbon.NacosRule <span class="token comment"># 负载均衡规则 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4）重启</p><p>重启微服务后，登录nacos管理页面，可以看到微服务信息：</p><figure><img src="`+d+'" alt="63699684088" tabindex="0" loading="lazy"><figcaption>63699684088</figcaption></figure><p>5）测试</p><p>访问：http://localhost:18082/order/101 http://localhost:18081/user/1</p><h3 id="_1-3-服务-集群配置-分级存储模型【重点】" tabindex="-1"><a class="header-anchor" href="#_1-3-服务-集群配置-分级存储模型【重点】" aria-hidden="true">#</a> 1.3.服务(集群配置)分级存储模型【重点】</h3><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的itheima-user，可以有:</p><ul><li>127.0.0.1:18081</li><li>127.0.0.1:28081</li><li>127.0.0.1:38081</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:18081，在深圳机房</li><li>127.0.0.1:28081，在深圳机房</li><li>127.0.0.1:38081，在杭州机房</li></ul><p>Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>也就是说，itheima-user是服务，一个服务可以包含多个集群，如深圳、杭州，每个集群下可以有多个实例，形成分级模型，如图：</p><figure><img src="'+k+'" alt="63699776290" tabindex="0" loading="lazy"><figcaption>63699776290</figcaption></figure><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><figure><img src="'+m+`" alt="63699793612" tabindex="0" loading="lazy"><figcaption>63699793612</figcaption></figure><p>深圳机房内的itheima-order应该优先访问同机房的itheima-user。</p><h4 id="_1-3-1-给itheima-user配置集群" tabindex="-1"><a class="header-anchor" href="#_1-3-1-给itheima-user配置集群" aria-hidden="true">#</a> 1.3.1.给itheima-user配置集群</h4><p>修改itheima-user的application.yml文件，添加集群配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> SZ <span class="token comment"># 集群名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启两个user-service实例后，我们可以在nacos控制台看到下面结果：</p><figure><img src="`+g+`" alt="63699847872" tabindex="0" loading="lazy"><figcaption>63699847872</figcaption></figure><p>我们再次复制一个itheima-user启动配置，添加属性：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-Dserver.port</span><span class="token operator">=</span><span class="token number">38081</span> -Dspring.cloud.nacos.discovery.cluster-name<span class="token operator">=</span>HZ
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置如图所示：</p><figure><img src="`+v+'" alt="63699867521" tabindex="0" loading="lazy"><figcaption>63699867521</figcaption></figure><p>启动UserApp3后再次查看nacos控制台：</p><figure><img src="'+b+`" alt="63699890374" tabindex="0" loading="lazy"><figcaption>63699890374</figcaption></figure><h4 id="_1-3-2-同集群优先的负载均衡" tabindex="-1"><a class="header-anchor" href="#_1-3-2-同集群优先的负载均衡" aria-hidden="true">#</a> 1.3.2.同集群优先的负载均衡</h4><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p><p>因此Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p><p>1）给order-service配置集群信息</p><p>修改order-service的application.yml文件，添加集群配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> SZ <span class="token comment"># 集群名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）【注意】修改负载均衡规则，才能生效</p><p>修改itheima-order的application.yml文件，修改负载均衡规则：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">itheima-user</span><span class="token punctuation">:</span>
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.alibaba.cloud.nacos.ribbon.NacosRule <span class="token comment"># 负载均衡规则 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>测试访问：http://localhost:18082/order/101</li></ol><h3 id="_1-4-权重配置【了解】" tabindex="-1"><a class="header-anchor" href="#_1-4-权重配置【了解】" aria-hidden="true">#</a> 1.4.权重配置【了解】</h3><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p><p>但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重：</p><figure><img src="`+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在弹出的编辑窗口，修改权重：</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p></blockquote><h3 id="_1-5-环境隔离【重点】" tabindex="-1"><a class="header-anchor" href="#_1-5-环境隔离【重点】" aria-hidden="true">#</a> 1.5.环境隔离【重点】</h3><p>Nacos提供了namespace来实现环境隔离功能。</p><ul><li>nacos中可以有多个namespace（<strong>环境隔离:test dev pro</strong>）</li><li>namespace下有group(<strong>项目隔离 探花项目 头条项目</strong>)、service(<strong>实例隔离tanhua-server tanhua-service</strong>)等</li><li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li></ul><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-5-1-创建namespace" tabindex="-1"><a class="header-anchor" href="#_1-5-1-创建namespace" aria-hidden="true">#</a> 1.5.1.创建namespace</h4><p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们可以点击页面新增按钮，添加一个namespace：</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后，填写表单：</p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>就能在页面看到一个新的namespace：</p><figure><img src="'+w+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-5-2-给微服务配置namespace" tabindex="-1"><a class="header-anchor" href="#_1-5-2-给微服务配置namespace" aria-hidden="true">#</a> 1.5.2.给微服务配置namespace</h4><p>给微服务配置namespace只能通过修改配置来实现。</p><p>例如，修改itheima-order的application.yml文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> SZ
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> devnamespace <span class="token comment"># 命名空间，填ID</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启itheima-order后，访问控制台，可以看到下面的结果：</p><figure><img src="`+q+'" alt="1631822989268" tabindex="0" loading="lazy"><figcaption>1631822989268</figcaption></figure><p>此时访问itheima-order，因为namespace不同，会导致找不到user，控制台会报错：</p><figure><img src="'+S+`" alt="image-20210714000941256" tabindex="0" loading="lazy"><figcaption>image-20210714000941256</figcaption></figure><p>在itheima-user修改配置：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Dspring.cloud.nacos.discovery.namespace=devnamespace
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+N+'" alt="63700383949" tabindex="0" loading="lazy"><figcaption>63700383949</figcaption></figure><p>重启itheima-user后，访问控制台，可以看到下面的结果：</p><figure><img src="'+z+'" alt="63700396604" tabindex="0" loading="lazy"><figcaption>63700396604</figcaption></figure><p>此时访问itheima-user，因为namespace相同，找到itheima-user：</p><figure><img src="'+C+`" alt="63700404315" tabindex="0" loading="lazy"><figcaption>63700404315</figcaption></figure><h3 id="_1-6-nacos与eureka的区别【面试】" tabindex="-1"><a class="header-anchor" href="#_1-6-nacos与eureka的区别【面试】" aria-hidden="true">#</a> 1.6.Nacos与Eureka的区别【面试】</h3><p>Nacos的服务实例分为两种类型：</p><ul><li>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</li><li>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</li></ul><p>配置一个服务实例为永久实例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">ephemeral</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置为非临时实例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><figure><img src="`+R+'" alt="1631823118790" tabindex="0" loading="lazy"><figcaption>1631823118790</figcaption></figure><ul><li>Nacos与eureka的共同点 <ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li>Nacos与Eureka的区别 <ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除（标记不健康）</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式（CAP理论:C一致性,A高可用,P分区容错性）</li><li>Nacos使用的netty和服务进行连接,属于长连接。eureka使用定时发送和服务进行连接,属于短连接</li></ul></li></ul><h2 id="_2-nacos配置管理" tabindex="-1"><a class="header-anchor" href="#_2-nacos配置管理" aria-hidden="true">#</a> 2.Nacos配置管理</h2><p>Nacos除了可以做注册中心，同样可以做配置管理来使用。</p><h3 id="_2-1-统一配置管理【重点】" tabindex="-1"><a class="header-anchor" href="#_2-1-统一配置管理【重点】" aria-hidden="true">#</a> 2.1.统一配置管理【重点】</h3><p>当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。我们需要一种统一配置管理方案，可以集中管理所有实例的配置。</p><figure><img src="'+A+'" alt="image-20210714164426792" tabindex="0" loading="lazy"><figcaption>image-20210714164426792</figcaption></figure><p>Nacos一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的热更新。</p><h4 id="_2-1-1-在nacos中添加配置文件" tabindex="-1"><a class="header-anchor" href="#_2-1-1-在nacos中添加配置文件" aria-hidden="true">#</a> 2.1.1.在nacos中添加配置文件</h4><p>如何在nacos中管理配置呢？</p><figure><img src="'+F+'" alt="1631823734187" tabindex="0" loading="lazy"><figcaption>1631823734187</figcaption></figure><p>然后在弹出的表单中，填写配置信息：</p><figure><img src="'+P+'" alt="63700221072" tabindex="0" loading="lazy"><figcaption>63700221072</figcaption></figure><p>配置内容:</p><figure><img src="'+I+'" alt="63703285494" tabindex="0" loading="lazy"><figcaption>63703285494</figcaption></figure><blockquote><p>注意：项目的核心配置，需要热更新的配置才有放到nacos管理的必要。基本不会变更的一些配置还是保存在微服务本地比较好。</p></blockquote><h4 id="_2-1-2-微服务从配置中心拉取配置" tabindex="-1"><a class="header-anchor" href="#_2-1-2-微服务从配置中心拉取配置" aria-hidden="true">#</a> 2.1.2.微服务从配置中心拉取配置</h4><p>微服务要拉取nacos中管理的配置，并且与本地的<code>application.yml</code>配置合并，才能完成项目启动。</p><p>但如果尚未读取<code>application.yml</code>，又如何得知nacos地址呢？</p><p>因此spring引入了一种新的配置文件：<code>bootstrap.yaml</code>文件，会在<code>application.yml</code>之前被读取，流程如下：</p><figure><img src="'+G+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>1）引入nacos-config依赖</p><p>首先，在user-service服务中，引入nacos-config的客户端依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--nacos配置管理依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）修改application.yaml</p><p>将application.yaml 修改为 bootstrap.yaml，并修改配置完整内容如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">18081</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> itheima<span class="token punctuation">-</span>user
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev <span class="token comment">#开发环境，这里是dev</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">driverClassName</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/cloud_user<span class="token punctuation">?</span>useSSL=falsecharacterEncoding=UTF8<span class="token important">&amp;&amp;serverTimezone=Asia/Shanghai</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> root
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment"># 文件后缀名</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment">#nacos配置中心地址</span>
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> devnamespace
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> SZ
        <span class="token comment">#ephemeral: false # 设置为非临时实例</span>
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> devnamespace
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里会根据spring.cloud.nacos.server-addr获取nacos地址，再根据</p><p><code>\${spring.application.name}-\${spring.profiles.active}.\${spring.cloud.nacos.config.file-extension}</code>作为文件id，来读取配置<code>itheima-user-dev.yaml</code>：</p><figure><img src="`+j+`" alt="63703264523" tabindex="0" loading="lazy"><figcaption>63703264523</figcaption></figure><p>3）读取nacos配置</p><p>3）读取nacos配置</p><p>在user-service中的UserController中，读取uname配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${myconfig.welcome}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> welcome<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;welcome&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;********&quot;</span><span class="token operator">+</span>welcome<span class="token operator">+</span><span class="token string">&quot;*********&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>在页面访问，可以看到效果：</li></ol><figure><img src="`+E+`" alt="63703287273" tabindex="0" loading="lazy"><figcaption>63703287273</figcaption></figure><h3 id="_2-2-配置热更新" tabindex="-1"><a class="header-anchor" href="#_2-2-配置热更新" aria-hidden="true">#</a> 2.2.配置热更新</h3><p>我们最终的目的，是修改nacos中的配置后，微服务中无需重启即可让配置生效，也就是<strong>配置热更新</strong>。</p><p>要实现配置热更新，可以使用两种方式：</p><h4 id="_2-2-1-方式一" tabindex="-1"><a class="header-anchor" href="#_2-2-1-方式一" aria-hidden="true">#</a> 2.2.1.方式一</h4><p>在@Value注入的变量所在类上添加注解@RefreshScope：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RefreshScope</span> <span class="token comment">//刷新配置</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2-方式二" tabindex="-1"><a class="header-anchor" href="#_2-2-2-方式二" aria-hidden="true">#</a> 2.2.2.方式二</h4><p>使用@ConfigurationProperties注解代替@Value注解。</p><ul><li>com.itheima.properties;</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 自动刷新  方式二（推荐）
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token comment">//prefix nacos中配置</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;myconfig&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>package com.itheima.controller;</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RefreshScope</span> <span class="token comment">//刷新配置</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
<span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">PersonProperties</span> properties<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 配置中心获取配置
     * <span class="token keyword">@param</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@GetMapping</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;配置中心获取配置=  &quot;</span><span class="token operator">+</span>properties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> properties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-配置共享【了解】" tabindex="-1"><a class="header-anchor" href="#_2-3-配置共享【了解】" aria-hidden="true">#</a> 2.3.配置共享【了解】</h3><p>其实微服务启动时，会去nacos读取多个配置文件，例如：</p><ul><li><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：itheima-user-dev.yaml</li><li><code>[spring.application.name].yaml</code>，例如：itheima-user.yaml</li></ul><p>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享。</p><p>下面我们通过案例来测试配置共享</p><p>1）添加一个环境共享配置</p><p>我们在nacos中添加一个itheima-user.yaml文件：</p><figure><img src="`+T+`" alt="63703824847" tabindex="0" loading="lazy"><figcaption>63703824847</figcaption></figure><p>2）在user-service中读取共享配置</p><p>在user-service服务中，修改UserController</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//@RefreshScope //注释掉</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token comment">//@Value(&quot;\${user.uname}&quot;)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> uname<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> sysname<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;********&quot;</span><span class="token operator">+</span>uname<span class="token operator">+</span><span class="token string">&quot;*********&quot;</span><span class="token operator">+</span>sysname<span class="token operator">+</span><span class="token string">&quot;*********&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）运行两个UserApp，使用不同的profile</p><p>UserApp(18081)使用的profile是dev，UserApp2(28081)使用的profile是test。</p><p>修改UserApp2这个启动项，改变其profile值：</p><figure><img src="`+H+'" alt="63703877334" tabindex="0" loading="lazy"><figcaption>63703877334</figcaption></figure><p>启动UserApp和UserApp2，访问http://localhost:18081/user/name，结果：</p><figure><img src="'+O+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>访问http://localhost:28081/user/name，结果：</p><figure><img src="'+M+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看出来，不管是dev，还是test环境，都读取到了sysname这个属性的值。</p><p>4）配置共享的优先级</p><p>当nacos、服务本地同时出现相同属性时，优先级有高低之分：</p><p>itheima-user-dev.yaml &gt; itheima-user.yaml &gt; application.yml</p><figure><img src="'+U+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-4-搭建nacos集群【了解】" tabindex="-1"><a class="header-anchor" href="#_2-4-搭建nacos集群【了解】" aria-hidden="true">#</a> 2.4.搭建Nacos集群【了解】</h3><p>Nacos生产环境下一定要部署为集群状态，部署方式参考课前资料中的文档：</p><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-微服务网关【重点】" tabindex="-1"><a class="header-anchor" href="#_3-微服务网关【重点】" aria-hidden="true">#</a> 3 微服务网关【重点】</h2><p>在SpringCloud中网关的实现包括两种：</p><ul><li>springcloud-gateway spring开发</li><li>springcloud-zuul netflix 2.0闭源</li></ul><p>Zuul是基于Servlet的实现，功能不强，性能较低，是阻塞式 。</p><p>SpringCloud-Gateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</p><p>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p><h3 id="_3-1-为什么需要网关" tabindex="-1"><a class="header-anchor" href="#_3-1-为什么需要网关" aria-hidden="true">#</a> 3.1 为什么需要网关</h3><p>Gateway网关是我们服务的守门神，所有微服务的统一入口。</p><p>网关的<strong>核心功能特性</strong>：</p><ul><li>请求路由</li><li>权限控制</li><li>限流</li></ul><figure><img src="'+D+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p><p><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p><p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p><h3 id="_3-2-gateway快速入门" tabindex="-1"><a class="header-anchor" href="#_3-2-gateway快速入门" aria-hidden="true">#</a> 3.2.gateway快速入门</h3><p>下面，我们就演示下网关的基本路由功能。基本步骤如下：</p><ol><li>创建SpringBoot工程gateway，引入网关依赖</li><li>编写启动类</li><li>编写基础配置和路由规则</li><li>启动网关服务进行测试</li></ol><p>1）创建微服务网关并引入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springcloud-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.itheima<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>itheima-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--网关--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- nacos客户端 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）配置文件<code>application.yml</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token comment"># 网关端口</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> devNamespaceId
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span> <span class="token comment"># 网关路由配置</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service <span class="token comment"># 路由id，自定义，只要唯一即可</span>
          <span class="token comment"># uri: http://127.0.0.1:18081 # 路由的目标地址 http就是固定地址</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//itheima<span class="token punctuation">-</span>user <span class="token comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span> <span class="token comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span>
            <span class="token punctuation">-</span> Path=/user/<span class="token important">**</span> <span class="token comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将符合<code>Path</code> 规则的一切请求，都代理到 <code>uri</code>参数指定的地址。</p><p>本例中，我们将 <code>/user/**</code>开头的请求，代理到<code>lb://itheima-user</code>，lb是负载均衡，根据服务名拉取服务列表，实现负载均衡。</p><p>3）创建启动类<code>com.itheima.GatewayApplication</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayApplication</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GatewayApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4）路由测试</p><p>重启网关，访问http://localhost:7001/user/1时，符合<code>/user/**</code>规则，请求转发到uri：http://user/user/1，得到了结果：</p><figure><img src="`+L+'" alt="63686345530" tabindex="0" loading="lazy"><figcaption>63686345530</figcaption></figure><p>思考：</p><p>比如所有以<code>/order</code>开始的请求交给<code>itheima-order</code>服务，如何配置<code>itheima-order</code>服务的路由请求？</p><figure><img src="'+V+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-3-断言工厂" tabindex="-1"><a class="header-anchor" href="#_3-3-断言工厂" aria-hidden="true">#</a> 3.3 断言工厂</h3><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p><p>例如Path=/user/**是按照路径匹配，这个规则是由</p><p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来</p><p>处理的，像这样的断言工厂在SpringCloudGateway还有十几个:</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>- After=2037-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>- Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>- Between=2037-01-20T17:42:47.789-07:00[America/Denver], 2037-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie=chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header=X-Request-Id, \\d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>- Host=<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method=GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path=/red/{segment},/blue/**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query=name, Jack或者- Query=name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr=192.168.1.1/24</td></tr><tr><td>Weight</td><td>权重处理</td><td></td></tr></tbody></table><p>我们只需要掌握Path这种路由工程就可以了。</p><p>上面使用案例如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> devNamespaceId
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span> <span class="token comment"># 网关路由配置</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service <span class="token comment"># 路由id，自定义，只要唯一即可</span>
          <span class="token comment"># uri: http://127.0.0.1:18081 # 路由的目标地址 http就是固定地址</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//itheima<span class="token punctuation">-</span>user <span class="token comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span> <span class="token comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span>
            <span class="token punctuation">-</span> Path=/user/<span class="token important">**</span> <span class="token comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> order<span class="token punctuation">-</span>service
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//itheima<span class="token punctuation">-</span>order
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/order/<span class="token important">**</span>
            <span class="token punctuation">-</span> After=2020<span class="token punctuation">-</span>12<span class="token punctuation">-</span>30T23<span class="token punctuation">:</span>59<span class="token punctuation">:</span>59.789+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span>
            <span class="token punctuation">-</span> Before=2022<span class="token punctuation">-</span>12<span class="token punctuation">-</span>30T23<span class="token punctuation">:</span>59<span class="token punctuation">:</span>59.789+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span>
            <span class="token punctuation">-</span> Between=2020<span class="token punctuation">-</span>12<span class="token punctuation">-</span>30T23<span class="token punctuation">:</span>59<span class="token punctuation">:</span>59.789+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span><span class="token punctuation">,</span>2022<span class="token punctuation">-</span>12<span class="token punctuation">-</span>30T23<span class="token punctuation">:</span>59<span class="token punctuation">:</span>59.789+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span>
            <span class="token punctuation">-</span> Cookie=uname<span class="token punctuation">,</span> itheima
            <span class="token punctuation">-</span> Header=X<span class="token punctuation">-</span>Request<span class="token punctuation">-</span>Id<span class="token punctuation">,</span> \\d+
            <span class="token punctuation">-</span> Host=localhost<span class="token punctuation">:</span><span class="token number">7001</span>
            <span class="token punctuation">-</span> Method=GET<span class="token punctuation">,</span>POST
            <span class="token punctuation">-</span> Query=uname<span class="token punctuation">,</span>zhangsan
            <span class="token punctuation">-</span> RemoteAddr=127.0.0.1/16
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-过滤器工厂" tabindex="-1"><a class="header-anchor" href="#_3-4-过滤器工厂" aria-hidden="true">#</a> 3.4.过滤器工厂</h3><p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p><figure><img src="`+Q+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-4-1-路由过滤器的种类" tabindex="-1"><a class="header-anchor" href="#_3-4-1-路由过滤器的种类" aria-hidden="true">#</a> 3.4.1.路由过滤器的种类</h4><p>Spring提供了31种不同的路由过滤器工厂。例如：</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr></tbody></table><h4 id="_3-4-2-请求头过滤器" tabindex="-1"><a class="header-anchor" href="#_3-4-2-请求头过滤器" aria-hidden="true">#</a> 3.4.2.请求头过滤器</h4><p>下面我们以AddRequestHeader 为例来讲解。</p><blockquote><p><strong>需求</strong>：给所有进入itheima-order的请求添加一个请求头：Heima=szheima nb!</p></blockquote><p>1）只需要修改gateway服务的application.yml文件，添加路由过滤即可：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span> <span class="token comment"># 网关路由配置</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> order<span class="token punctuation">-</span>service <span class="token comment"># 路由id，自定义，只要唯一即可</span>
          <span class="token comment">#uri: http://127.0.0.1:18082 # 路由的目标地址 http就是固定地址</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//itheima<span class="token punctuation">-</span>order <span class="token comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span>
          <span class="token key atrule">filters</span><span class="token punctuation">:</span> <span class="token comment"># 过滤器</span>
            <span class="token punctuation">-</span> AddRequestHeader=Heima<span class="token punctuation">,</span>szheima125 nb<span class="token tag">!</span> <span class="token comment"># 添加请求头</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span> <span class="token comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span>
            <span class="token punctuation">-</span> Path=/order/<span class="token important">**</span> <span class="token comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**注意：**当前过滤器写在order-service路由下，因此仅仅对访问order-service的请求有效。</p><h3 id="_3-5-全局过滤器【重点】" tabindex="-1"><a class="header-anchor" href="#_3-5-全局过滤器【重点】" aria-hidden="true">#</a> 3.5.全局过滤器【重点】</h3><p>上一节学习的过滤器，网关提供了31种，但每一种过滤器的作用都是固定的。如果我们希望拦截请求，做自己的业务逻辑则没办法实现。</p><h4 id="_3-5-1-全局过滤器作用" tabindex="-1"><a class="header-anchor" href="#_3-5-1-全局过滤器作用" aria-hidden="true">#</a> 3.5.1.全局过滤器作用</h4><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。</p><p>定义方式是实现GlobalFilter接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GlobalFilter</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     *  处理当前请求，有必要的话通过<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">GatewayFilterChain</span></span><span class="token punctuation">}</span>将请求交给下一个过滤器处理
     *
     * <span class="token keyword">@param</span> <span class="token parameter">exchange</span> 请求上下文，里面可以获取Request、Response等信息
     * <span class="token keyword">@param</span> <span class="token parameter">chain</span> 用来把请求委托给下一个过滤器 
     * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span></span></span><span class="token punctuation">}</span> 返回标示当前过滤器业务结束
     */</span>
    <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在filter中编写自定义逻辑，可以实现下列功能：</p><ul><li>登录状态判断</li><li>权限校验</li><li>请求限流等</li></ul><h4 id="_3-5-2-自定义全局过滤器" tabindex="-1"><a class="header-anchor" href="#_3-5-2-自定义全局过滤器" aria-hidden="true">#</a> 3.5.2.自定义全局过滤器</h4><p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p><ul><li>参数中是否有authorization，</li><li>authorization参数值是否为admin</li></ul><p>如果同时满足则放行，否则拦截</p><p>实现：在gateway中定义一个过滤器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>filters</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GatewayFilterChain</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GlobalFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Ordered</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Order</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerWebExchange</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span> <span class="token comment">// 注册到spring容器</span>
<span class="token comment">//@Order(1)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizeFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">exchange</span> the current server exchange  里面，请求，响应对象
     * <span class="token keyword">@param</span> <span class="token parameter">chain</span>    provides a way to delegate to the next filter, 过滤链
     * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span></span></span> <span class="token punctuation">}</span>响应式编程 to indicate when request processing is complete,
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1. 获取请求对象</span>
        <span class="token class-name">ServerHttpRequest</span> request <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 获取请求参数, getQueryParams 请求参数, getFirst获取第一个参数</span>
        <span class="token class-name">String</span> authorization <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">&quot;authorization&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3. 请求参数是否有值</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>authorization<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//3.1 有值，还要判断是否为admin</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>authorization<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// 相同 【注意】 要返回, 放行</span>
                <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//4 没有参数或参数值不为admin</span>
        <span class="token comment">//5 获取响应对象</span>
        <span class="token class-name">ServerHttpResponse</span> response <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//6. 设置响应状态码</span>
        response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">FORBIDDEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//7. 结束处理</span>
        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 决定过滤器将来执行的顺序
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 值越小越先执行</span>
        <span class="token keyword">return</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token constant">LOWEST_PRECEDENCE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>了解：响应提示信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">UNAUTHORIZED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">&quot;请您先登录！&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p><p>http://localhost:7001/order/101?authorization=admin</p><p>http://localhost:7001/user/1?authorization=admin</p><figure><img src="`+W+'" alt="63699078523" tabindex="0" loading="lazy"><figcaption>63699078523</figcaption></figure><figure><img src="'+X+'" alt="63699096468" tabindex="0" loading="lazy"><figcaption>63699096468</figcaption></figure><h4 id="_3-5-3-过滤器执行顺序" tabindex="-1"><a class="header-anchor" href="#_3-5-3-过滤器执行顺序" aria-hidden="true">#</a> 3.5.3.过滤器执行顺序</h4><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p><p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p><figure><img src="'+Z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>排序的规则是什么呢？</p><ul><li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li><li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li><li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</li><li>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</li></ul><p>详细内容，可以查看源码：</p><p><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()</code>方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。</p><p><code>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()</code>方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链</p><figure><img src="'+J+'" alt="63698429089" tabindex="0" loading="lazy"><figcaption>63698429089</figcaption></figure><h3 id="_3-6-跨域问题【纯小抄】" tabindex="-1"><a class="header-anchor" href="#_3-6-跨域问题【纯小抄】" aria-hidden="true">#</a> 3.6.跨域问题【纯小抄】</h3><h4 id="_3-6-1-什么是跨域问题" tabindex="-1"><a class="header-anchor" href="#_3-6-1-什么是跨域问题" aria-hidden="true">#</a> 3.6.1.什么是跨域问题</h4><p>跨域：域名不一致就是跨域，主要包括：</p><ul><li>域名不同： www.taobao.com 和 www.taobao.org 和 www.jd.com 和 miaosha.jd.com</li><li>域名相同，端口不同：localhost:8080和localhost8081</li></ul><p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</p><h4 id="_3-6-2-模拟跨域问题" tabindex="-1"><a class="header-anchor" href="#_3-6-2-模拟跨域问题" aria-hidden="true">#</a> 3.6.2.模拟跨域问题</h4><p>找到<strong>资料nginx-1.18.0跨域测试.7z</strong> 解压放到<strong>没有空格和中文目录</strong>下，启动并访问。</p><p>可以在浏览器控制台看到下面的错误：</p><figure><img src="'+Y+`" alt="63698699637" tabindex="0" loading="lazy"><figcaption>63698699637</figcaption></figure><p>从localhost:8090访问localhost:7001，端口不同，显然是跨域的请求。</p><h4 id="_3-6-3-解决跨域问题" tabindex="-1"><a class="header-anchor" href="#_3-6-3-解决跨域问题" aria-hidden="true">#</a> 3.6.3.解决跨域问题</h4><p>如果没有网关下，可以在Controller类上加@CrossOrigin// 允许跨域访问</p><p>在gateway服务的application.yml文件中，添加下面的配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token punctuation">...</span>
      <span class="token key atrule">globalcors</span><span class="token punctuation">:</span> <span class="token comment"># 全局的跨域处理</span>
        <span class="token key atrule">add-to-simple-url-handler-mapping</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 解决options请求被拦截问题</span>
        <span class="token key atrule">corsConfigurations</span><span class="token punctuation">:</span>
          <span class="token key atrule">&#39;[/**]&#39;</span><span class="token punctuation">:</span>
            <span class="token key atrule">allowedOrigins</span><span class="token punctuation">:</span> <span class="token comment"># 允许所有跨域请求 </span>
              <span class="token punctuation">-</span> <span class="token string">&quot;*&quot;</span>
            <span class="token key atrule">allowedMethods</span><span class="token punctuation">:</span> <span class="token comment"># 允许的跨域ajax的请求方式</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;GET&quot;</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;POST&quot;</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;DELETE&quot;</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;PUT&quot;</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;OPTIONS&quot;</span>
            <span class="token key atrule">allowedHeaders</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span> <span class="token comment"># 允许在请求中携带的头信息</span>
            <span class="token key atrule">allowCredentials</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否允许携带cookie</span>
            <span class="token key atrule">maxAge</span><span class="token punctuation">:</span> <span class="token number">360000</span> <span class="token comment"># 这次跨域检测的有效期</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><h3 id="_1-nacos注册中心如何使用" tabindex="-1"><a class="header-anchor" href="#_1-nacos注册中心如何使用" aria-hidden="true">#</a> 1. Nacos注册中心如何使用</h3><ol><li>父工程中添加spring-cloud-alibaba的管理依赖</li><li>order-service和user-service添加nacos的客户端依赖</li><li>修改user-service&amp;order-service中的application.yml文件，添加nacos地址</li><li>启动测试</li></ol><h3 id="_2-nacos和eureka的区别" tabindex="-1"><a class="header-anchor" href="#_2-nacos和eureka的区别" aria-hidden="true">#</a> 2. Nacos和Eureka的区别</h3><ol><li>语言支持：Nacos支持多种语言，包括Java、Go、C++等；而Eureka主要是为Java开发的。</li><li>数据持久化：Nacos可以支持多种数据源作为存储后端，包括MySQL、MongoDB、Redis等；而Eureka只支持内存存储和配合Netflix的Eureka Server进行部署。</li><li>健康检查：Nacos可以支持TCP、HTTP、MySQL等多种健康检查方式；而Eureka只支持HTTP方式的健康检查。</li><li>动态配置管理：Nacos可以提供动态配置管理，支持实时修改配置并且可以对不同环境进行分组管理；而Eureka不支持动态配置管理。</li><li>服务管理：Nacos提供了服务管理的功能，包括流量管理、服务降级、熔断降级等；而Eureka不提供服务管理的功能。</li></ol><h3 id="_3-nacos和eureka有什么共同点" tabindex="-1"><a class="header-anchor" href="#_3-nacos和eureka有什么共同点" aria-hidden="true">#</a> 3. Nacos和Eureka有什么共同点</h3><ol><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ol><h3 id="_4-如何搭建nacos配置中心" tabindex="-1"><a class="header-anchor" href="#_4-如何搭建nacos配置中心" aria-hidden="true">#</a> 4. 如何搭建Nacos配置中心</h3><ol><li>在微服务中引入nacos的config依赖</li><li>在nacos的管理界面，在对应的环境中添加配置文件 <code>服务名称</code>-<code>profile</code>.<code>后缀名</code></li><li>在微服务中添加bootstrap.yml,配置nacos地址、当前环境、服务名称、文件后缀名</li><li>代码中通过@value注解获取Nacos的配置</li><li>重启测试</li></ol><h3 id="_5-网关有什么用" tabindex="-1"><a class="header-anchor" href="#_5-网关有什么用" aria-hidden="true">#</a> 5. 网关有什么用</h3><p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p><p><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p><p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p><h3 id="_6-如何搭建网关" tabindex="-1"><a class="header-anchor" href="#_6-如何搭建网关" aria-hidden="true">#</a> 6. 如何搭建网关</h3><ol><li>创建网关微服务，引入nacos的服务发现和getway依赖</li><li>配置application.yml，包括服务基本信息、nacos地址……</li><li>编写启动类</li><li>编写基础的路由规则</li><li>启动网关服务测试</li></ol><h3 id="_7-路由过滤器的作用是什么" tabindex="-1"><a class="header-anchor" href="#_7-路由过滤器的作用是什么" aria-hidden="true">#</a> 7. 路由过滤器的作用是什么</h3><ol><li>请求头修改：可以通过路由过滤器修改请求头信息，比如添加、删除、修改某个请求头。</li><li>请求参数修改：可以通过路由过滤器修改请求参数信息，比如添加、删除、修改某个请求参数。</li><li>请求体修改：可以通过路由过滤器修改请求体信息，比如添加、删除、修改某个请求体参数。</li><li>请求转发前验证：可以通过路由过滤器对请求进行验证，比如验证请求头、请求参数、请求体等信息的有效性，从而决定是否允许请求转发到目标服务。</li><li>路径重写：可以通过路由过滤器修改请求路径，比如将请求路径中的某个字符串替换为另一个字符串，或者添加前缀或后缀等。</li></ol><h3 id="_8-globalfilter全局过滤器的作用是什么" tabindex="-1"><a class="header-anchor" href="#_8-globalfilter全局过滤器的作用是什么" aria-hidden="true">#</a> 8. GlobalFilter全局过滤器的作用是什么？</h3><p>GlobalFilter是Spring Cloud Gateway中的全局过滤器，它的作用是对所有进入网关的请求进行过滤处理。</p><p>具体来说，GlobalFilter能够在请求被路由到具体的服务之前对请求进行修改、增强和校验等操作。例如，可以通过GlobalFilter实现全局的身份认证、请求日志记录、请求参数校验等功能。</p><p>与其他过滤器相比，GlobalFilter具有更高的优先级，会先于其他过滤器执行，因此可以对请求进行全局的统一处理。</p><p>同时，GlobalFilter也可以在请求被路由到具体服务之后对响应进行处理，例如添加响应头、对响应内容进行加密等操作</p><h3 id="_9-过滤器的执行顺序" tabindex="-1"><a class="header-anchor" href="#_9-过滤器的执行顺序" aria-hidden="true">#</a> 9. 过滤器的执行顺序</h3><ol><li>每一个过滤器都必须指定一个int类型的order值，<strong>order</strong>值越小，优先级越高，执行顺序越靠前。</li><li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li><li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</li><li>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</li></ol><h3 id="_10-什么是跨域" tabindex="-1"><a class="header-anchor" href="#_10-什么是跨域" aria-hidden="true">#</a> 10. 什么是跨域？</h3><p>浏览器不能执行其他网站的脚本，从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域。</p><h3 id="_11-如何解决跨域" tabindex="-1"><a class="header-anchor" href="#_11-如何解决跨域" aria-hidden="true">#</a> 11. 如何解决跨域？</h3><p>在网关微服务中进行跨域配置，允许哪些网站的跨域请求</p><h3 id="_12-网关微服务中需要配置哪些跨域参数" tabindex="-1"><a class="header-anchor" href="#_12-网关微服务中需要配置哪些跨域参数" aria-hidden="true">#</a> 12. 网关微服务中需要配置哪些跨域参数？</h3><p>1.允许哪些域名跨域</p><p>2.允许哪些请求头</p><p>3.允许哪些请求方式</p><p>4.是否允许使用cookie</p>`,307);function cn(ln,un){const s=o("ExternalLinkIcon");return i(),c("div",null,[K,l(" more "),nn,an,sn,n("p",null,[n("a",en,[a("Nacos"),e(s)]),a("是阿里巴巴的产品，现在是"),n("a",tn,[a("SpringCloudAlibaba"),e(s)]),a("中的一个组件。相比"),n("a",pn,[a("Eureka"),e(s)]),a("功能更加丰富，在国内受欢迎程度较高。")]),on])}const dn=p($,[["render",cn],["__file","SpringCloud_02.html.vue"]]);export{dn as default};
