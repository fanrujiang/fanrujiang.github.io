import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as l,c as o,a as n,b as a,d as t,e as p}from"./app-mQe7tUFU.js";const c="/assets/image-20230403173156484-OweYYJXT.png",u="/assets/image-20230220113157010-5r9hDMUO.png",r="/assets/image-20230403185206384-PAW5nCVo.png",d="/assets/image-20230403185305934-rsRsjA2L.png",k="/assets/image-20230403185356997-W_SJOSix.png",m="/assets/image-20230403185406674-EjDwbV7r.png",v="/assets/image-20230403185428276-gcm-hkbZ.png",g="/assets/image-20230220122455915-uhviqWky.png",h="/assets/image-20230404101257205-5aZaWDtq.png",b="/assets/image-20230220125428695-8qs3TiG1.png",f="/assets/image-20230220130833363-OaPwUpes.png",y="/assets/image-20230404104319428-fHv05C_E.png",x="/assets/image-20230404104328384-JjardqIF.png",_="/assets/image-20230404104333584-uOaKzr_Q.png",q="/assets/image-20230404104350387-RLZe8A0z.png",j="/assets/image-20230220131753051-rRcl3Ux5.png",A="/assets/image-20230404104440224-1joYqSza.png",z="/assets/image-20230404104447501-CdUCHhIc.png",w="/assets/image-20230404104508764-5sHQ7Qyt.png",E="/assets/image-20230220132229960-kL4dS_c5.png",T="/assets/image-20230220132617016-z6VPsaR1.png",L="/assets/image-20230404104556531-HxVzrD2z.png",S="/assets/image-20230220133141151-uRBqbC-M.png",B="/assets/image-20230220133344116-RKFtQCjY.png",H="/assets/image-20230404104720587-KHZI1nTm.png",P="/assets/image-20230404104851497-dbHHQc2_.png",R="/assets/image-20230404104955330-wa1hM5pv.png",U="/assets/image-20230404105003019-CaMA6mXP.png",X="/assets/image-20230404105134538-rhjWkOXf.png",C="/assets/image-20230404105141226-gddMCqFs.png",J={},M=p(`<h1 id="_01-ajax入门" tabindex="-1"><a class="header-anchor" href="#_01-ajax入门" aria-hidden="true">#</a> 01_Ajax入门</h1><h2 id="知识点自测" tabindex="-1"><a class="header-anchor" href="#知识点自测" aria-hidden="true">#</a> 知识点自测</h2><ol><li><p>如下对象取值的方式哪个正确?</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;黑马&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A: obj.a</p><p>B: obj()a</p><details><summary>答案</summary><ul><li>A选项正确</li></ul></details></li><li><p>哪个赋值会让浏览器解析成标签显示?</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#ul&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;span&gt;我是span标签&lt;/span&gt;</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A: ul.innerText = str</p><p>B: ul.innerHTML = str</p><details><summary>答案</summary><ul><li>选择B, innerText会把字符串当做普通文本现在在ul标签之间, innerHTML会试着把字符串解析成标签, 如果是普通文本则显示普通文本字符串</li></ul></details></li><li><p>哪个是获取输入框值的方式?</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> theInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#input&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A: theInput.innerHTML</p><p>B: theInput.value</p><details><summary>答案</summary><ul><li>答案是B, 表单标签设置或获取值用value属性, 其他标签用innerHTML/innerText, 进行设置/获取</li></ul></details></li><li><p>哪个是用于获取标签内容?</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> theP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#p&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A: theP.innerHTML = &#39;内容&#39;</p><p>B: theP.innerHTML</p><details><summary>答案</summary><ul><li>答案是B, 单独出现是获取值在原地, 如果看到=这个符号, 是把右侧的值赋予给左侧的属性, 影响标签展示效果</li></ul></details></li><li><p>哪个是数组的映射方法？</p><p>A: arr.forEach</p><p>B: arr.map</p><details><summary>答案</summary><ul><li>答案是B</li></ul></details></li><li><p>数组转字符串并指定拼接符的是哪个?</p><p>A: arr.join()</p><p>B: arr.split()</p><details><summary>答案</summary><ul><li>答案是A</li></ul></details></li><li><p>函数传参的方式哪个是正确的？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">showAlert</span><span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> className</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A：showAlert(&#39;消息&#39;, &#39;类名&#39;)</p><p>B：showAlert()</p><details><summary>答案</summary><ul><li>答案是A</li></ul></details></li><li><p>以下哪套代码可以实现对象属性的简写？</p><p>A：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">&#39;老李&#39;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">username</span><span class="token operator">:</span> username
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>B：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token string">&#39;老李&#39;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">username</span><span class="token operator">:</span> user
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details><summary>答案</summary><ul><li>答案是A</li></ul></details></li><li><p>以下代码的值是多少？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> age <span class="token operator">&gt;</span> <span class="token number">18</span> <span class="token operator">?</span> <span class="token string">&#39;成年了&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;未成年&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A：‘成年了’</p><p>B：‘未成年’</p><details><summary>答案</summary><ul><li>答案是B</li></ul></details></li><li><p>以下哪个方法可以添加一个额外类名？</p><p>A：标签对象.classList.add()</p><p>B：标签对象.classList.contains()</p><details><summary>答案</summary><ul><li>答案是A</li></ul></details></li></ol><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ul><li>AJAX 概念和 axios 使用</li><li>认识 URL</li><li>URL 查询参数</li><li>常用请求方法和数据提交</li><li>HTTP协议-报文</li><li>接口文档</li><li>案例 - 用户登录</li><li>form-serialize 插件</li></ul><h2 id="学习目标" tabindex="-1"><a class="header-anchor" href="#学习目标" aria-hidden="true">#</a> 学习目标</h2><ol><li>掌握 axios 相关参数，从服务器获取并解析展示数据</li><li>掌握接口文档的查看和使用</li><li>掌握在浏览器的 network 面板中查看请求和响应的内容</li><li>了解请求和响应报文的组成部分</li></ol><h2 id="_01-ajax-概念和-axios-使用" tabindex="-1"><a class="header-anchor" href="#_01-ajax-概念和-axios-使用" aria-hidden="true">#</a> 01.AJAX 概念和 axios 使用</h2><h3 id="目标" tabindex="-1"><a class="header-anchor" href="#目标" aria-hidden="true">#</a> 目标</h3><p>了解 AJAX 概念并掌握 axios 库基本使用</p><h3 id="讲解" tabindex="-1"><a class="header-anchor" href="#讲解" aria-hidden="true">#</a> 讲解</h3>`,11),O={href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX/Getting_Started",target:"_blank",rel:"noopener noreferrer"},F=n("ul",null,[n("li",null,[n("p",null,"使用浏览器的 XMLHttpRequest 对象 与服务器通信")]),n("li",null,[n("p",null,"浏览器网页中，使用 AJAX技术（XHR对象）发起获取省份列表数据的请求，服务器代码响应准备好的省份列表数据给前端，前端拿到数据数组以后，展示到网页"),n("figure",null,[n("img",{src:c,alt:"image-20230403173156484",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20230403173156484")])])],-1),D=p('<li><p>什么是服务器？</p><ul><li>可以暂时理解为提供数据的一台电脑</li></ul></li><li><p>为何学 AJAX ?</p><ul><li>以前我们的数据都是写在代码里固定的, 无法随时变化</li><li>现在我们的数据可以从服务器上进行获取，让数据变活</li></ul></li><li><p>怎么学 AJAX ?</p><ul><li>这里使用一个第三方库叫 axios, 后续在学习 XMLHttpRequest 对象了解 AJAX 底层原理</li><li>因为 axios 库语法简单，让我们有更多精力关注在与服务器通信上，而且后续 Vue，React 学习中，也使用 axios 库与服务器通信</li></ul></li><li><p>需求：从服务器获取省份列表数据，展示到页面上（体验 axios 语法的使用）</p><blockquote><p>获取省份列表数据 - 目标资源地址：http://hmajax.itheima.net/api/province</p></blockquote><ul><li><p>完成效果：</p><figure><img src="'+u+`" alt="image-20230220113157010" tabindex="0" loading="lazy"><figcaption>image-20230220113157010</figcaption></figure></li></ul></li><li><p>接下来讲解 axios 语法，步骤：</p></li><li><p>引入 axios.js 文件到自己的网页中</p><blockquote><p>axios.js文件链接: https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js</p></blockquote></li><li><p>明确axios函数的使用语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;目标资源地址&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 对服务器返回的数据做后续处理</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：请求的 url 地址, 就是标记资源的网址</p><p>注意：then 方法这里先体验使用，由来后续会讲到</p></blockquote></li><li><p>对应代码</p></li>`,8),G=p(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>AJAX概念和axios使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--
    axios库地址：https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js
    省份数据地址：http://hmajax.itheima.net/api/province

    目标: 使用axios库, 获取省份列表数据, 展示到页面上
    1. 引入axios库
  --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-p<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 2. 使用axios函数</span>
    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://hmajax.itheima.net/api/province&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
      <span class="token comment">// 好习惯：多打印，确认属性名</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>list<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;br&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token comment">// 把准备好省份列表，插入到页面</span>
      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.my-p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;br&gt;&#39;</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><ol><li><p>AJAX 有什么用？</p><details><summary>答案</summary><ul><li>浏览器和服务器之间通信，动态数据交互</li></ul></details></li><li><p>AJAX 如何学：</p><details><summary>答案</summary><ul><li>先掌握 axios 库使用，再了解 XMLHttpRequest 原理</li></ul></details></li><li><p>这一节 axios 体验步骤（语法）？</p><details><summary>答案</summary><ul><li>引入 axios 库，使用 axios 相关语法</li></ul></details></li></ol><h2 id="_02-认识-url" tabindex="-1"><a class="header-anchor" href="#_02-认识-url" aria-hidden="true">#</a> 02.认识 URL</h2><h3 id="目标-1" tabindex="-1"><a class="header-anchor" href="#目标-1" aria-hidden="true">#</a> 目标</h3><p>了解 URL 的组成和作用</p><h3 id="讲解-1" tabindex="-1"><a class="header-anchor" href="#讲解-1" aria-hidden="true">#</a> 讲解</h3>`,7),I={href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX/Getting_Started",target:"_blank",rel:"noopener noreferrer"},N=n("ul",null,[n("li",null,"虽然是后端给我的一个地址，但是哪部分标记的是服务器电脑，哪部分标记的是资源呢？所以为了和服务器有效沟通我们要认识一下")],-1),V=p('<li><p>什么是 URL ？</p><ul><li><p>统一资源定位符，简称网址，用于定位网络中的资源（资源指的是：网页，图片，数据，视频，音频等等）</p><figure><img src="'+r+'" alt="image-20230403185206384" tabindex="0" loading="lazy"><figcaption>image-20230403185206384</figcaption></figure></li></ul></li><li><p>URL 的组成?</p><ul><li><p>协议，域名，资源路径（URL 组成有很多部分，我们先掌握这3个重要的部分即可）</p><figure><img src="'+d+'" alt="image-20230403185305934" tabindex="0" loading="lazy"><figcaption>image-20230403185305934</figcaption></figure></li></ul></li><li><p>什么是 http 协议 ?</p><ul><li><p>叫超文本传输协议，规定了浏览器和服务器传递数据的格式（而格式具体有哪些稍后我们就会学到）</p><figure><img src="'+k+'" alt="image-20230403185356997" tabindex="0" loading="lazy"><figcaption>image-20230403185356997</figcaption></figure></li></ul></li><li><p>什么是域名 ?</p><ul><li><p>标记服务器在互联网当中的方位，网络中有很多服务器，你想访问哪一台，就需要知道它的域名才可以</p><figure><img src="'+m+'" alt="image-20230403185406674" tabindex="0" loading="lazy"><figcaption>image-20230403185406674</figcaption></figure></li></ul></li><li><p>什么是资源路径 ?</p><ul><li><p>一个服务器内有多个资源，用于标识你要访问的资源具体的位置</p><figure><img src="'+v+'" alt="image-20230403185428276" tabindex="0" loading="lazy"><figcaption>image-20230403185428276</figcaption></figure></li></ul></li><li><p>接下来做个需求，访问新闻列表的 URL 网址，打印新闻数据</p><ul><li>效果图如下：</li></ul><figure><img src="'+g+`" alt="image-20230220122455915" tabindex="0" loading="lazy"><figcaption>image-20230220122455915</figcaption></figure><blockquote><p>新闻列表数据 URL 网址：http://hmajax.itheima.net/api/news</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://hmajax.itheima.net/api/news&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>url解释：从黑马服务器使用http协议，访问/api/news路径下的新闻列表资源</p></blockquote></li>`,6),W=p('<h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h3><ol><li><p>URL 是什么？</p><details><summary>答案</summary><ul><li>统一资源定位符，网址，用于访问服务器上资源 </li></ul></details></li><li><p>请解释这个 URL，每个部分作用？</p><p>http://hmajax.itheima.net/api/news</p><details><summary>答案</summary><ul><li>协议://域名/资源路径 </li></ul></details></li></ol><h2 id="_03-url-查询参数" tabindex="-1"><a class="header-anchor" href="#_03-url-查询参数" aria-hidden="true">#</a> 03.URL 查询参数</h2><h3 id="目标-2" tabindex="-1"><a class="header-anchor" href="#目标-2" aria-hidden="true">#</a> 目标</h3><p>掌握-通过URL传递查询参数，获取匹配的数据</p><h3 id="讲解-2" tabindex="-1"><a class="header-anchor" href="#讲解-2" aria-hidden="true">#</a> 讲解</h3>',6),Y=p('<li><p>什么是查询参数 ?</p><ul><li><p>携带给服务器额外信息，让服务器返回我想要的某一部分数据而不是全部数据</p></li><li><p>举例：查询河北省下属的城市列表，需要先把河北省传递给服务器</p><figure><img src="'+h+'" alt="image-20230404101257205" tabindex="0" loading="lazy"><figcaption>image-20230404101257205</figcaption></figure></li></ul></li><li><p>查询参数的语法 ？</p><ul><li>在 url 网址后面用?拼接格式：http://xxxx.com/xxx/xxx?参数名1=值1&amp;参数名2=值2</li><li>参数名一般是后端规定的，值前端看情况传递即可</li></ul></li>',2),Q=n("p",null,"axios 如何携带查询参数?",-1),Z=p(`<p>使用 params 选项即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;目标资源地址&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">参数名</span><span class="token operator">:</span> 值
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 对服务器返回的数据做后续处理</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),K={href:"http://hmajax.itheima.net/api/city?pname=%E6%B2%B3%E5%8C%97%E7%9C%81",target:"_blank",rel:"noopener noreferrer"},$=n("p",null,"参数名：pname （值要携带省份名字）",-1),nn=p(`<li><p>需求：获取“河北省”下属的城市列表，展示到页面，对应代码：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>查询参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 
    城市列表: http://hmajax.itheima.net/api/city
    参数名: pname
    值: 省份名字
  --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://hmajax.itheima.net/api/city&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// 查询参数</span>
      <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">pname</span><span class="token operator">:</span> <span class="token string">&#39;辽宁省&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>list<span class="token punctuation">)</span>
      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;br&gt;&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),an=p('<h3 id="小结-2" tabindex="-1"><a class="header-anchor" href="#小结-2" aria-hidden="true">#</a> 小结</h3><ol><li><p>URL 查询参数有什么用？</p><details><summary>答案</summary><ul><li>浏览器提供给服务器额外信息，获取对应的数据 </li></ul></details></li><li><p>axios 要如何携带查询参数？</p><details><summary>答案</summary><ul><li>使用 params 选项，携带参数名和值在对象结构中 </li></ul></details></li></ol><h2 id="_04-案例-查询-地区列表" tabindex="-1"><a class="header-anchor" href="#_04-案例-查询-地区列表" aria-hidden="true">#</a> 04.案例-查询-地区列表</h2><h3 id="目标-3" tabindex="-1"><a class="header-anchor" href="#目标-3" aria-hidden="true">#</a> 目标</h3><p>巩固查询参数的使用，并查看多对查询参数如何传递</p><h3 id="讲解-3" tabindex="-1"><a class="header-anchor" href="#讲解-3" aria-hidden="true">#</a> 讲解</h3><ol><li><p>需求：根据输入的省份名字和城市名字，查询下属地区列表</p><ul><li><p>完成效果如下：</p><figure><img src="'+b+`" alt="image-20230220125428695" tabindex="0" loading="lazy"><figcaption>image-20230220125428695</figcaption></figure></li><li><p>相关参数</p><blockquote><p>查询地区: http://hmajax.itheima.net/api/area</p><p>参数名：</p><p>pname：省份名字</p><p>cname：城市名字</p></blockquote></li></ul></li><li><p>正确代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
      获取地区列表: http://hmajax.itheima.net/api/area
      查询参数:
        pname: 省份或直辖市名字
        cname: 城市名字
    */</span>
<span class="token comment">// 目标: 根据省份和城市名字, 查询地区列表</span>
<span class="token comment">// 1. 查询按钮-点击事件</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.sel-btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 2. 获取省份和城市名字</span>
    <span class="token keyword">let</span> pname <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.province&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value
    <span class="token keyword">let</span> cname <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.city&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value

    <span class="token comment">// 3. 基于axios请求地区列表数据</span>
    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://hmajax.itheima.net/api/area&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            pname<span class="token punctuation">,</span>
            cname
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// console.log(result)</span>
        <span class="token comment">// 4. 把数据转li标签插入到页面上</span>
        <span class="token keyword">let</span> list <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>list
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>
        <span class="token keyword">let</span> theLi <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">areaName</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;li class=&quot;list-group-item&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>areaName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>theLi<span class="token punctuation">)</span>
        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.list-group&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> theLi
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结-3" tabindex="-1"><a class="header-anchor" href="#小结-3" aria-hidden="true">#</a> 小结</h3><ol><li><p>ES6 对象属性和值简写的前提是什么？</p><details><summary>答案</summary><ul><li>当属性名和value位置变量名同名即可简写 </li></ul></details></li></ol><h2 id="_05-常用请求方法和数据提交" tabindex="-1"><a class="header-anchor" href="#_05-常用请求方法和数据提交" aria-hidden="true">#</a> 05.常用请求方法和数据提交</h2><h3 id="目标-4" tabindex="-1"><a class="header-anchor" href="#目标-4" aria-hidden="true">#</a> 目标</h3><p>掌握如何向服务器提交数据，而不单单是获取数据</p><h3 id="讲解-4" tabindex="-1"><a class="header-anchor" href="#讲解-4" aria-hidden="true">#</a> 讲解</h3><ol><li><p>想要提交数据，先来了解什么是请求方法</p><ul><li><p>请求方法是一些固定单词的英文，例如：GET，POST，PUT，DELETE，PATCH（这些都是http协议规定的），每个单词对应一种对服务器资源要执行的操作</p><figure><img src="`+f+'" alt="image-20230220130833363" tabindex="0" loading="lazy"><figcaption>image-20230220130833363</figcaption></figure><figure><img src="'+y+'" alt="image-20230404104319428" tabindex="0" loading="lazy"><figcaption>image-20230404104319428</figcaption></figure></li><li><p>前面我们获取数据其实用的就是GET请求方法，但是axios内部设置了默认请求方法就是GET，我们就没有写</p></li><li><p>但是提交数据需要使用POST请求方法</p></li></ul></li><li><p>什么时候进行数据提交呢？</p><ul><li><p>例如：多端要查看同一份订单数据，或者使用同一个账号进行登录，那订单/用户名+密码，就需要保存在服务器上，随时随地进行访问</p><figure><img src="'+x+'" alt="image-20230404104328384" tabindex="0" loading="lazy"><figcaption>image-20230404104328384</figcaption></figure><figure><img src="'+_+`" alt="image-20230404104333584" tabindex="0" loading="lazy"><figcaption>image-20230404104333584</figcaption></figure></li></ul></li><li><p>axios 如何提交数据到服务器呢？</p><ul><li><p>需要学习，method 和 data 这2个新的选项了（大家不用担心，这2个学完，axios常用的选项就都学完了）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;目标资源地址&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;请求方法&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">参数名</span><span class="token operator">:</span> 值
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 对服务器返回的数据做后续处理</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>需求：注册账号，提交用户名和密码到服务器保存</p><blockquote><p>注册用户 URL 网址：http://hmajax.itheima.net/api/register</p><p>请求方法：POST</p><p>参数名：</p><p>username：用户名（要求中英文和数字组成，最少8位）</p><p>password：密码（最少6位）</p></blockquote><figure><img src="`+q+`" alt="image-20230404104350387" tabindex="0" loading="lazy"><figcaption>image-20230404104350387</figcaption></figure></li><li><p>正确代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
  注册用户：http://hmajax.itheima.net/api/register
  请求方法：POST
  参数名：
    username：用户名（中英文和数字组成，最少8位）
    password：密码  （最少6位）

  目标：点击按钮，通过axios提交用户和密码，完成注册
*/</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://hmajax.itheima.net/api/register&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;itheima007&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;7654321&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结-4" tabindex="-1"><a class="header-anchor" href="#小结-4" aria-hidden="true">#</a> 小结</h3><ol><li><p>请求方法最常用的是哪2个，分别有什么作用？</p><details><summary>答案</summary><ul><li>POST 提交数据，GET 查询数据 </li></ul></details></li><li><p>axios 的核心配置项？</p><details><summary>答案</summary><ul><li>url：目标资源地址，method：请求方法，params：查询参数，data：提交的数据 </li></ul></details></li></ol><h2 id="_06-axios-错误处理" tabindex="-1"><a class="header-anchor" href="#_06-axios-错误处理" aria-hidden="true">#</a> 06.axios 错误处理</h2><h3 id="目标-5" tabindex="-1"><a class="header-anchor" href="#目标-5" aria-hidden="true">#</a> 目标</h3><p>掌握接收 axios 响应错误信息的处理语法</p><h3 id="讲解-5" tabindex="-1"><a class="header-anchor" href="#讲解-5" aria-hidden="true">#</a> 讲解</h3><ol><li><p>如果注册相同的用户名，则会遇到注册失败的请求，也就是 axios 请求响应失败了，你会在控制台看到如图的错误：</p><figure><img src="`+j+`" alt="image-20230220131753051" tabindex="0" loading="lazy"><figcaption>image-20230220131753051</figcaption></figure></li><li><p>在 axios 语法中要如何处理呢？</p><ul><li>因为，普通用户不会去控制台里看错误信息，我们要编写代码拿到错误并展示给用户在页面上</li></ul></li><li><p>使用 axios 的 catch 方法，捕获这次请求响应的错误并做后续处理，语法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ...请求选项</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理成功数据</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理失败错误</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>需求：再次重复注册相同用户名，提示用户注册失败的原因</p><figure><img src="`+A+'" alt="image-20230404104440224" tabindex="0" loading="lazy"><figcaption>image-20230404104440224</figcaption></figure><figure><img src="'+z+`" alt="image-20230404104447501" tabindex="0" loading="lazy"><figcaption>image-20230404104447501</figcaption></figure></li><li><p>对应代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://hmajax.itheima.net/api/register&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;itheima007&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;7654321&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 成功</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 失败</span>
      <span class="token comment">// 处理错误信息</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
      <span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结-5" tabindex="-1"><a class="header-anchor" href="#小结-5" aria-hidden="true">#</a> 小结</h3><ol><li><p>axios 如何拿到请求响应失败的信息？</p><details><summary>答案</summary><ul><li>通过 axios 函数调用后，在后面接着调用 .catch 方法捕获 </li></ul></details></li></ol><h2 id="_07-http-协议-请求报文" tabindex="-1"><a class="header-anchor" href="#_07-http-协议-请求报文" aria-hidden="true">#</a> 07.HTTP 协议-请求报文</h2><h3 id="目标-6" tabindex="-1"><a class="header-anchor" href="#目标-6" aria-hidden="true">#</a> 目标</h3><p>了解 HTTP 协议中，请求报文的组成和作用</p><h3 id="讲解-6" tabindex="-1"><a class="header-anchor" href="#讲解-6" aria-hidden="true">#</a> 讲解</h3><ol><li><p>首先，HTTP 协议规定了浏览器和服务器返回内容的<span style="color:red;">格式</span></p></li><li><p>请求报文：是浏览器按照协议规定发送给服务器的内容，例如刚刚注册用户时，发起的请求报文：</p><figure><img src="`+w+'" alt="image-20230404104508764" tabindex="0" loading="lazy"><figcaption>image-20230404104508764</figcaption></figure><figure><img src="'+E+'" alt="image-20230220132229960" tabindex="0" loading="lazy"><figcaption>image-20230220132229960</figcaption></figure></li><li><p>这里的格式包含：</p><ul><li>请求行：请求方法，URL，协议</li><li>请求头：以键值对的格式携带的附加信息，比如：Content-Type（指定了本次传递的内容类型）</li><li>空行：分割请求头，空行之后的是发送给服务器的资源</li><li>请求体：发送的资源</li></ul></li><li><p>我们切换到浏览器中，来看看刚才注册用户发送的这个请求报文以及内容去哪里查看呢</p></li><li><p>代码：直接在上个代码基础上复制，然后运行查看请求报文对应关系即可</p></li></ol><h3 id="小结-6" tabindex="-1"><a class="header-anchor" href="#小结-6" aria-hidden="true">#</a> 小结</h3><ol><li><p>浏览器发送给服务器的内容叫做，请求报文</p></li><li><p>请求报文的组成是什么？</p><details><summary>答案</summary><ul><li>请求行，请求头，空行，请求体 </li></ul></details></li><li><p>通过 Chrome 的网络面板如何查看请求体？</p><figure><img src="'+T+'" alt="image-20230220132617016" tabindex="0" loading="lazy"><figcaption>image-20230220132617016</figcaption></figure></li></ol><h2 id="_08-请求报文-错误排查" tabindex="-1"><a class="header-anchor" href="#_08-请求报文-错误排查" aria-hidden="true">#</a> 08.请求报文-错误排查</h2><h3 id="目标-7" tabindex="-1"><a class="header-anchor" href="#目标-7" aria-hidden="true">#</a> 目标</h3><p>了解学习了查看请求报文之后的作用，可以用来辅助错误排查</p><h3 id="讲解-7" tabindex="-1"><a class="header-anchor" href="#讲解-7" aria-hidden="true">#</a> 讲解</h3><ol><li>学习了查看请求报文有什么用呢？ <ul><li>可以用来确认我们代码发送的请求数据是否真的正确</li></ul></li><li>配套模板代码里，对应 08 标题文件夹里是我同桌的代码，它把登录也写完了，但是无法登录，我们来到模板代码中，找到运行后，在<span style="color:red;">不逐行查看代码的情况下</span>，查看请求报文，看看它登录提交的相关信息对不对，帮他找找问题出现的原因</li><li>发现请求体数据有问题，往代码中定位，找到类名写错误了</li><li>代码：在配套文件夹素材里，找到需要对应代码，直接运行，根据报错信息，找到错误原因</li></ol><h3 id="小结-7" tabindex="-1"><a class="header-anchor" href="#小结-7" aria-hidden="true">#</a> 小结</h3><ol><li><p>学会了查看请求报文，对实际开发有什么帮助呢？</p><details><summary>答案</summary><ul><li>可以快速确认我们发送的内容是否正确 </li></ul></details></li></ol><h2 id="_09-http-协议-响应报文" tabindex="-1"><a class="header-anchor" href="#_09-http-协议-响应报文" aria-hidden="true">#</a> 09.HTTP 协议-响应报文</h2><h3 id="目标-8" tabindex="-1"><a class="header-anchor" href="#目标-8" aria-hidden="true">#</a> 目标</h3><p>了解响应报文的组成</p><h3 id="讲解-8" tabindex="-1"><a class="header-anchor" href="#讲解-8" aria-hidden="true">#</a> 讲解</h3><ol><li><p>响应报文：是服务器按照协议固定的格式，返回给浏览器的内容</p><figure><img src="'+L+'" alt="image-20230404104556531" tabindex="0" loading="lazy"><figcaption>image-20230404104556531</figcaption></figure><figure><img src="'+S+'" alt="image-20230220133141151" tabindex="0" loading="lazy"><figcaption>image-20230220133141151</figcaption></figure></li><li><p>响应报文的组成：</p><ul><li>响应行（状态行）：协议，HTTP响应状态码，状态信息</li><li>响应头：以键值对的格式携带的附加信息，比如：Content-Type（告诉浏览器，本次返回的内容类型）</li><li>空行：分割响应头，控制之后的是服务器返回的资源</li><li>响应体：返回的资源</li></ul></li><li><p>HTTP 响应状态码：</p><ul><li><p>用来表明请求是否成功完成</p></li><li><p>例如：404（客户端要找的资源，在服务器上不存在）</p><figure><img src="'+B+'" alt="image-20230220133344116" tabindex="0" loading="lazy"><figcaption>image-20230220133344116</figcaption></figure></li></ul></li></ol><h3 id="小结-8" tabindex="-1"><a class="header-anchor" href="#小结-8" aria-hidden="true">#</a> 小结</h3><ol><li><p>响应报文的组成？</p><details><summary>答案</summary><ul><li>响应行，响应头，空行，响应体 </li></ul></details></li><li><p>HTTP 响应状态码是做什么的？</p><details><summary>答案</summary><ul><li>表明请求是否成功完成，2xx都是成功的 </li></ul></details></li></ol><h2 id="_10-接口文档" tabindex="-1"><a class="header-anchor" href="#_10-接口文档" aria-hidden="true">#</a> 10.接口文档</h2><h3 id="目标-9" tabindex="-1"><a class="header-anchor" href="#目标-9" aria-hidden="true">#</a> 目标</h3><p>掌握接口文档的使用，配合 axios 与服务器进行数据交互</p><h3 id="讲解-9" tabindex="-1"><a class="header-anchor" href="#讲解-9" aria-hidden="true">#</a> 讲解</h3>',48),sn=n("li",null,[n("p",null,"接口文档：描述接口的文章（一般是后端工程师，编写和提供）")],-1),tn={href:"https://apifox.com/apidoc/shared-1b0dd84f-faa8-435d-b355-5a8a329e34a8",target:"_blank",rel:"noopener noreferrer"},pn=p('<li><p>例如：获取城市列表接口样子</p><figure><img src="'+H+`" alt="image-20230404104720587" tabindex="0" loading="lazy"><figcaption>image-20230404104720587</figcaption></figure></li><li><p>需求：打开 AJAX 阶段接口文档，查看登录接口，并编写代码，完成一次登录的效果吧</p></li><li><p>代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 用户登录</span>
  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://hmajax.itheima.net/api/login&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;itheima007&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;7654321&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,3),en=p('<h3 id="小结-9" tabindex="-1"><a class="header-anchor" href="#小结-9" aria-hidden="true">#</a> 小结</h3><ol><li><p>接口文档是什么？</p><details><summary>答案</summary><ul><li>由后端提供的描述接口的文章 </li></ul></details></li><li><p>接口文档里包含什么？</p><details><summary>答案</summary><ul><li>请求的 URL 网址，请求方法，请求参数和说明 </li></ul></details></li></ol><h2 id="_11-案例-用户登录-主要业务" tabindex="-1"><a class="header-anchor" href="#_11-案例-用户登录-主要业务" aria-hidden="true">#</a> 11.案例-用户登录-主要业务</h2><h3 id="目标-10" tabindex="-1"><a class="header-anchor" href="#目标-10" aria-hidden="true">#</a> 目标</h3><p>尝试通过页面获取用户名和密码，进行登录</p><h3 id="讲解-10" tabindex="-1"><a class="header-anchor" href="#讲解-10" aria-hidden="true">#</a> 讲解</h3><ol><li><p>先来到备课代码中，运行完成的页面，查看要完成的登录效果（登录成功和失败）</p></li><li><p>需求：编写代码，查看接口文档，填写相关信息，完成登录业务</p></li><li><p>分析实现的步骤</p><ol><li><p>点击登录，获取并判断用户名和长度</p></li><li><p>提交数据和服务器通信</p></li><li><p>提示信息，反馈给用户（这节课先来完成前 2 个步骤）</p><figure><img src="'+P+`" alt="image-20230404104851497" tabindex="0" loading="lazy"><figcaption>image-20230404104851497</figcaption></figure></li></ol></li><li><p>代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 目标1：点击登录时，用户名和密码长度判断，并提交数据和服务器通信</span>

<span class="token comment">// 1.1 登录-点击事件</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.btn-login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1.2 获取用户名和密码</span>
  <span class="token keyword">const</span> username <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value
  <span class="token keyword">const</span> password <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value
  <span class="token comment">// console.log(username, password)</span>

  <span class="token comment">// 1.3 判断长度</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;用户名必须大于等于8位&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token comment">// 阻止代码继续执行</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>password<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;密码必须大于等于6位&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token comment">// 阻止代码继续执行</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 1.4 基于axios提交用户名和密码</span>
  <span class="token comment">// console.log(&#39;提交数据到服务器&#39;)</span>
  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://hmajax.itheima.net/api/login&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      username<span class="token punctuation">,</span>
      password
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结-10" tabindex="-1"><a class="header-anchor" href="#小结-10" aria-hidden="true">#</a> 小结</h3><ol><li><p>总结下用户登录案例的思路？</p><details><summary>答案</summary><ul><li>1. 登录按钮-绑定点击事件 2. 从页面输入框里，获取用户名和密码 3. 判断长度是否符合要求 4. 基于 axios 提交用户名和密码 </li></ul></details></li></ol><h2 id="_12-案例-用户登录-提示信息" tabindex="-1"><a class="header-anchor" href="#_12-案例-用户登录-提示信息" aria-hidden="true">#</a> 12.案例-用户登录-提示信息</h2><h3 id="目标-11" tabindex="-1"><a class="header-anchor" href="#目标-11" aria-hidden="true">#</a> 目标</h3><p>根据准备好的提示标签和样式，给用户反馈提示</p><h3 id="讲解-11" tabindex="-1"><a class="header-anchor" href="#讲解-11" aria-hidden="true">#</a> 讲解</h3><ol><li><p>需求：使用提前准备好的提示框，来把登录成功/失败结果提示给用户</p><figure><img src="`+R+'" alt="image-20230404104955330" tabindex="0" loading="lazy"><figcaption>image-20230404104955330</figcaption></figure><figure><img src="'+U+`" alt="image-20230404105003019" tabindex="0" loading="lazy"><figcaption>image-20230404105003019</figcaption></figure></li><li><p>使用提示框，反馈提示消息，因为有4处地方需要提示框，所以封装成函数</p><ol><li><p>获取提示框</p></li><li><p>封装提示框函数，重复调用，满足提示需求</p><p>功能：</p><ol><li>显示提示框</li><li>不同提示文字msg，和成功绿色失败红色isSuccess参数（true成功，false失败）</li><li>过2秒后，让提示框自动消失</li></ol></li></ol></li><li><p>对应提示框核心代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 2.2 封装提示框函数，重复调用，满足提示需求
 * 功能：
 * 1. 显示提示框
 * 2. 不同提示文字msg，和成功绿色失败红色isSuccess（true成功，false失败）
 * 3. 过2秒后，让提示框自动消失
*/</span>
<span class="token keyword">function</span> <span class="token function">alertFn</span><span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> isSuccess</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1&gt; 显示提示框</span>
  myAlert<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;show&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// 2&gt; 实现细节</span>
  myAlert<span class="token punctuation">.</span>innerText <span class="token operator">=</span> msg
  <span class="token keyword">const</span> bgStyle <span class="token operator">=</span> isSuccess <span class="token operator">?</span> <span class="token string">&#39;alert-success&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;alert-danger&#39;</span>
  myAlert<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bgStyle<span class="token punctuation">)</span>

  <span class="token comment">// 3&gt; 过2秒隐藏</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    myAlert<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;show&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 提示：避免类名冲突，重置背景色</span>
    myAlert<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>bgStyle<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结-11" tabindex="-1"><a class="header-anchor" href="#小结-11" aria-hidden="true">#</a> 小结</h3><ol><li><p>我们什么时候需要封装函数？</p><details><summary>答案</summary><ul><li>遇到相同逻辑，重复代码要复用的时候 </li></ul></details></li><li><p>如何封装一个函数呢？</p><details><summary>答案</summary><ul><li>先明确要完成的需求，以及需要的参数，再来实现其中的细节，然后在需要的地方调用 </li></ul></details></li><li><p>我们的提示框是如何控制出现/隐藏的？</p><details><summary>答案</summary><ul><li>添加或移除显示的类名即可 </li></ul></details></li></ol><h2 id="_13-form-serialize-插件" tabindex="-1"><a class="header-anchor" href="#_13-form-serialize-插件" aria-hidden="true">#</a> 13.form-serialize 插件</h2><h3 id="目标-12" tabindex="-1"><a class="header-anchor" href="#目标-12" aria-hidden="true">#</a> 目标</h3><p>使用 form-serialize 插件，快速收集目标表单范围内表单元素的值</p><h3 id="讲解-12" tabindex="-1"><a class="header-anchor" href="#讲解-12" aria-hidden="true">#</a> 讲解</h3><ol><li><p>我们前面收集表单元素的值，是一个个标签获取的</p><figure><img src="`+X+'" alt="image-20230404105134538" tabindex="0" loading="lazy"><figcaption>image-20230404105134538</figcaption></figure></li><li><p>如果一套表单里有很多很多表单元素，如何一次性快速收集出来呢？</p><figure><img src="'+C+`" alt="image-20230404105141226" tabindex="0" loading="lazy"><figcaption>image-20230404105141226</figcaption></figure></li><li><p>使用 form-serialize 插件提供的 serialize 函数就可以办到</p></li><li><p>form-serialize 插件语法：</p><ol><li><p>引入 form-serialize 插件到自己网页中</p></li><li><p>使用 serialize 函数</p><ul><li><p>参数1：要获取的 form 表单标签对象（要求表单元素需要有 name 属性-用来作为收集的数据中属性名）</p></li><li><p>参数2：配置对象</p><ul><li>hash： <ul><li>true - 收集出来的是一个 JS 对象结构</li><li>false - 收集出来的是一个查询字符串格式</li></ul></li><li>empty： <ul><li>true - 收集空值</li><li>false - 不收集空值</li></ul></li></ul></li></ul></li></ol></li><li><p>需求：收集登录表单里用户名和密码</p></li><li><p>对应代码：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>form-serialize插件使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript:;<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example-form<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>提交<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 
    目标：在点击提交时，使用form-serialize插件，快速收集表单元素值
    1. 把插件引入到自己网页中
  --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./lib/form-serialize.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token doc-comment comment">/**
       * 2. 使用serialize函数，快速收集表单元素的值
       * 参数1：要获取哪个表单的数据
       *  表单元素设置name属性，值会作为对象的属性名
       *  建议name属性的值，最好和接口文档参数名一致
       * 参数2：配置对象
       *  hash 设置获取数据结构
       *    - true：JS对象（推荐）一般请求体里提交给服务器
       *    - false: 查询字符串
       *  empty 设置是否获取空值
       *    - true: 获取空值（推荐）数据结构和标签结构一致
       *    - false：不获取空值
      */</span>
      <span class="token keyword">const</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.example-form&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span>form<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">hash</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">empty</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token comment">// const data = serialize(form, { hash: false, empty: true })</span>
      <span class="token comment">// const data = serialize(form, { hash: true, empty: false })</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="小结-12" tabindex="-1"><a class="header-anchor" href="#小结-12" aria-hidden="true">#</a> 小结</h3><ol><li><p>我们什么时候使用 form-serialize 插件？</p><details><summary>答案</summary><ul><li>快速收集表单元素的值</li></ul></details></li><li><p>如何使用 form-serialize 插件？</p><details><summary>答案</summary><ul><li>1. 先引入插件到自己的网页中，2. 准备form和表单元素的name属性，3.使用serialize函数，传入form表单和配置对象 </li></ul></details></li><li><p>配置对象中 hash 和 empty 有什么用？</p><details><summary>答案</summary><ul><li>hash 决定是收集为 JS 对象还是查询参数字符串，empty 决定是否收集空值 </li></ul></details></li></ol><h2 id="_14-案例-用户登录-form-serialize" tabindex="-1"><a class="header-anchor" href="#_14-案例-用户登录-form-serialize" aria-hidden="true">#</a> 14.案例-用户登录-form-serialize</h2><h3 id="目标-13" tabindex="-1"><a class="header-anchor" href="#目标-13" aria-hidden="true">#</a> 目标</h3><p>尝试通过 form-serialize 重新修改用户登录案例-收集用户名和密码</p><h3 id="讲解-13" tabindex="-1"><a class="header-anchor" href="#讲解-13" aria-hidden="true">#</a> 讲解</h3><ol><li><p>基于模板代码，使用 form-serialize 插件来收集用户名和密码</p></li><li><p>在原来的代码基础上修改即可</p><ol><li><p>先引入插件</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 3.1 引入插件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./lib/form-serialize.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>然后修改代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 3.2 使用serialize函数，收集登录表单里用户名和密码</span>
<span class="token keyword">const</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.login-form&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span>form<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">hash</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">empty</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token comment">// {username: &#39;itheima007&#39;, password: &#39;7654321&#39;}</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ol><h3 id="小结-13" tabindex="-1"><a class="header-anchor" href="#小结-13" aria-hidden="true">#</a> 小结</h3><ol><li><p>如何把一个第三方插件使用在已完成的案例中？</p><details><summary>答案</summary><ul><li>引入后，只需要使用在要修改的地方，修改一点就要确认测试一下 </li></ul></details></li></ol><h2 id="重点" tabindex="-1"><a class="header-anchor" href="#重点" aria-hidden="true">#</a> 重点</h2><ol><li>axios 的配置项有哪几个，作用分别是什么？</li><li>接口文档都包含哪些信息？</li><li>在浏览器中如何查看查询参数/请求体，以及响应体数据？</li><li>请求报文和响应报文由几个部分组成，每个部分的作用？</li></ol><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>`,33),ln={href:"https://baike.baidu.com/item/%E5%AE%A2%E6%88%B7%E7%AB%AF/101081?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},on={href:"https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8/213911?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},un={href:"https://baike.baidu.com/item/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%B3%BB%E7%BB%9F/5937042?fromtitle=URL&fromid=110640&fr=aladdin",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://baike.baidu.com/item/HTTP?fromtitle=HTTP%E5%8D%8F%E8%AE%AE&fromid=1276942",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA%E5%90%8D",target:"_blank",rel:"noopener noreferrer"},kn={href:"https://baike.baidu.com/item/%E7%AB%AF%E5%8F%A3%E5%8F%25B",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://baike.baidu.com/tashuo/browse/content?id=11fca6ecdc2c066af4c5594f&lemmaId=8425&fromLemmaModule=pcBottom&lemmaTitle=ajax",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX/Getting_Started",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://baike.baidu.com/item/axios",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://github.com/axios/axios",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://axios-http.com/",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://www.npmjs.com/package/axios",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://baike.baidu.com/item/post/2171305",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://baike.baidu.com/item/%E6%8A%A5%E6%96%87/3164352",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://baike.baidu.com/item/%E6%8E%A5%E5%8F%A3/2886384",target:"_blank",rel:"noopener noreferrer"};function jn(An,zn){const s=i("ExternalLinkIcon");return l(),o("div",null,[M,n("ol",null,[n("li",null,[n("p",null,[a("什么是 AJAX ? "),n("a",O,[a("mdn"),t(s)])]),F]),D]),G,n("ol",null,[n("li",null,[n("p",null,[a("为什么要认识 URL ? "),n("a",I,[a("mdn"),t(s)])]),N]),V]),W,n("ol",null,[Y,n("li",null,[Q,n("ul",null,[n("li",null,[Z,n("blockquote",null,[n("p",null,[a("查询城市列表的 url地址："),n("a",K,[a("http://hmajax.itheima.net/api/city"),t(s)])]),$])])])]),nn]),an,n("ol",null,[sn,n("li",null,[n("p",null,[a("接口：指的使用 AJAX 和 服务器通讯时，使用的 URL，请求方法，以及参数，例如："),n("a",tn,[a("AJAX阶段接口文档"),t(s)])])]),pn]),en,n("ol",null,[n("li",null,[n("a",ln,[a("客户端->百度百科"),t(s)])]),n("li",null,[n("a",on,[a("浏览器解释->百度百科"),t(s)])]),n("li",null,[n("a",cn,[a("服务器解释->百度百科"),t(s)])]),n("li",null,[n("a",un,[a("url解释->百度百科"),t(s)])]),n("li",null,[n("a",rn,[a("http协议->百度百科"),t(s)])]),n("li",null,[n("a",dn,[a("主机名->百度百科"),t(s)])]),n("li",null,[n("a",kn,[a("端口号->百度百科"),t(s)])]),n("li",null,[n("a",mn,[a("Ajax解释->百度-懂啦"),t(s)])]),n("li",null,[n("a",vn,[a("Ajax解释->MDN解释Ajax是与服务器通信而不只是请求"),t(s)])]),n("li",null,[n("a",gn,[a("axios->百度(可以点击播报听读音)"),t(s)])]),n("li",null,[n("a",hn,[a("axios(github)地址"),t(s)])]),n("li",null,[n("a",bn,[a("axios官方推荐官网"),t(s)])]),n("li",null,[n("a",fn,[a("axios(npmjs)地址"),t(s)])]),n("li",null,[n("a",yn,[a("GET和POST区别->百度百科"),t(s)])]),n("li",null,[n("a",xn,[a("报文讲解->百度百科"),t(s)])]),n("li",null,[n("a",_n,[a("HTTP状态码->百度百科"),t(s)])]),n("li",null,[n("a",qn,[a("接口概念->百度百科"),t(s)])])])])}const Tn=e(J,[["render",jn],["__file","AJAX_01_入门.html.vue"]]);export{Tn as default};
