import{_ as n,o as s,c as a,e}from"./app-Cv7bHzg-.js";const t={},o=e(`<h2 id="带你深入了解-docker-日志" tabindex="-1"><a class="header-anchor" href="#带你深入了解-docker-日志" aria-hidden="true">#</a> 带你深入了解 Docker 日志</h2><p>在现代应用开发中，Docker 已成为许多开发者和运维工程师的必备工具。它简化了应用的部署和管理，而日志作为监控和调试应用的重要手段，也显得尤为重要。本文将带你深入了解 Docker 日志的相关知识，包括如何设置日志轮转、如何屏蔽日志输出、如何查看和管理日志等。</p><h3 id="_1-docker-日志驱动" tabindex="-1"><a class="header-anchor" href="#_1-docker-日志驱动" aria-hidden="true">#</a> 1. Docker 日志驱动</h3><p>Docker 支持多种日志驱动，包括 <code>json-file</code>、<code>syslog</code>、<code>journald</code>、<code>gelf</code>、<code>fluentd</code> 等。默认情况下，Docker 使用 <code>json-file</code> 驱动记录日志，即将日志记录为 JSON 格式的文件。</p><h3 id="_2-设置日志轮转" tabindex="-1"><a class="header-anchor" href="#_2-设置日志轮转" aria-hidden="true">#</a> 2. 设置日志轮转</h3><p>长时间运行的容器会生成大量日志，占用大量磁盘空间。为了解决这个问题，我们可以通过设置日志轮转和大小限制来管理日志文件。以下是配置步骤：</p><ol><li><p><strong>编辑 Docker 守护进程的配置文件</strong></p><p>Docker 的配置文件通常位于 <code>/etc/docker/daemon.json</code>。你可以通过以下命令打开并编辑该文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">nano</span> /etc/docker/daemon.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>添加日志驱动和日志选项</strong></p><p>假设你已经有一些配置，例如配置了镜像加速器，现在需要在此基础上添加日志驱动和日志选项：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://mr63yffu.mirror.aliyuncs.com&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;log-driver&quot;</span><span class="token operator">:</span> <span class="token string">&quot;json-file&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;log-opts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;max-size&quot;</span><span class="token operator">:</span> <span class="token string">&quot;10m&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;max-file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个配置将会：</p><ul><li>使用 <code>json-file</code> 作为日志驱动。</li><li>每个日志文件的最大大小为 10MB。</li><li>最多保留 3 个日志文件。</li></ul></li><li><p><strong>重启 Docker 守护进程</strong></p><p>保存并关闭配置文件后，重启 Docker 守护进程以应用更改：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="_3-制作容器时屏蔽日志输出" tabindex="-1"><a class="header-anchor" href="#_3-制作容器时屏蔽日志输出" aria-hidden="true">#</a> 3. 制作容器时屏蔽日志输出</h3><p>在某些情况下，你可能希望屏蔽容器的日志输出。可以通过重定向标准输出和标准错误输出到 <code>/dev/null</code> 来实现。以下是一个示例的 Docker Compose 文件配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">example-service</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>image<span class="token punctuation">:</span>latest
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> example<span class="token punctuation">-</span>service
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8080:8080&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /your/host/path<span class="token punctuation">:</span>/your/container/path
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> <span class="token string">&#39;Asia/Shanghai&#39;</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;sh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;your-command &gt; /dev/null 2&gt;&amp;1&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个配置中，<code>command</code> 部分使用 <code>sh -c</code> 启动一个 shell，然后将标准输出和标准错误输出都重定向到 <code>/dev/null</code>，从而屏蔽所有日志输出。</p><h3 id="_4-查看-docker-日志" tabindex="-1"><a class="header-anchor" href="#_4-查看-docker-日志" aria-hidden="true">#</a> 4. 查看 Docker 日志</h3><p>Docker 提供了 <code>docker logs</code> 命令来查看容器的日志。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs example-service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你也可以使用 <code>-f</code> 参数实时查看日志，类似于 <code>tail -f</code> 命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> example-service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-管理-docker-日志" tabindex="-1"><a class="header-anchor" href="#_5-管理-docker-日志" aria-hidden="true">#</a> 5. 管理 Docker 日志</h3><ol><li><p><strong>手动清理日志</strong></p><p>如果需要手动清理日志，可以删除日志文件。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 获取容器ID</span>
<span class="token assign-left variable">CONTAINER_ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-qf</span> <span class="token string">&quot;name=example-service&quot;</span><span class="token variable">)</span></span>

<span class="token comment"># 删除日志文件</span>
<span class="token function">sudo</span> truncate <span class="token parameter variable">-s</span> <span class="token number">0</span> /var/lib/docker/containers/<span class="token variable">$CONTAINER_ID</span>/<span class="token variable">$CONTAINER_ID</span>-json.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用外部日志管理工具</strong></p><p>可以将日志导出到外部日志管理系统（如 ELK Stack、Graylog、Fluentd 等），集中管理和分析日志。可以在 Docker 中配置这些工具作为日志驱动。例如，将日志发送到 Fluentd：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">example-service</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>image<span class="token punctuation">:</span>latest
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> example<span class="token punctuation">-</span>service
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8080:8080&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /your/host/path<span class="token punctuation">:</span>/your/container/path
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> <span class="token string">&#39;Asia/Shanghai&#39;</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;sh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;your-command &gt; /dev/null 2&gt;&amp;1&quot;</span><span class="token punctuation">]</span>
    <span class="token key atrule">logging</span><span class="token punctuation">:</span>
      <span class="token key atrule">driver</span><span class="token punctuation">:</span> <span class="token string">&quot;fluentd&quot;</span>
      <span class="token key atrule">options</span><span class="token punctuation">:</span>
        <span class="token key atrule">fluentd-address</span><span class="token punctuation">:</span> <span class="token string">&quot;localhost:24224&quot;</span>
        <span class="token key atrule">tag</span><span class="token punctuation">:</span> <span class="token string">&quot;docker.example-service&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>通过这些方法，你可以有效地管理 Docker 容器的日志，避免日志文件过大占用磁盘空间，同时也可以根据需要查看和分析日志。</p>`,19),p=[o];function l(c,i){return s(),a("div",null,p)}const u=n(t,[["render",l],["__file","带你深入了解docker日志.html.vue"]]);export{u as default};
