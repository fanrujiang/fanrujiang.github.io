import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e}from"./app-61K1sjrq.js";const t={},p=e(`<h1 id="jeecg-boot-防止重复提交" tabindex="-1"><a class="header-anchor" href="#jeecg-boot-防止重复提交" aria-hidden="true">#</a> jeecg-boot 防止重复提交</h1><p>在现代Web开发中，防止重复提交是一个常见的问题，特别是在处理表单提交、支付操作等场景时。重复提交不仅会影响用户体验，还可能带来安全隐患和数据一致性问题。为了解决这个问题，jeecg-boot 提供了一个非常实用的工具：@JRepeat 注解。</p><h2 id="_1-什么是-jrepeat-注解" tabindex="-1"><a class="header-anchor" href="#_1-什么是-jrepeat-注解" aria-hidden="true">#</a> 1. 什么是 @JRepeat 注解？</h2><p>@JRepeat 是 jeecg-boot 中的自定义注解，主要用于防止用户重复提交请求。它通过结合缓存机制（如 Redis）和拦截器或 AOP 切面，来确保同一请求在短时间内不会被多次处理。</p><p>@JRepeat 是一个基于 Redis 实现的分布式锁注解，它可以用于方法级别的重复提交限制，保证某个方法在同一时间只能被一个请求调用。其中 lockKey 是锁的键值，支持 SpEL 表达式，可以动态生成；lockTime 是锁的过期时间，单位为秒。</p><h2 id="_2-jrepeat-注解的工作原理" tabindex="-1"><a class="header-anchor" href="#_2-jrepeat-注解的工作原理" aria-hidden="true">#</a> 2. @JRepeat 注解的工作原理</h2><ol><li><p><strong>注解定义</strong>： 在方法上使用 @JRepeat 注解，标记需要防止重复提交的接口。</p></li><li><p><strong>拦截器或 AOP 切面</strong>： 拦截所有标记了 @JRepeat 注解的方法请求。拦截器或 AOP 切面会生成一个唯一标识符（token），并将其与请求一起存储在缓存中。</p></li><li><p><strong>缓存校验</strong>： 每次请求到达时，拦截器或 AOP 切面会检查缓存中是否存在相同的标识符。如果在设定的时间内（如几秒钟）存在相同标识符，则认为是重复提交，拦截请求并返回错误信息。</p></li><li><p><strong>处理请求</strong>： 如果缓存中不存在相同标识符，则将请求正常处理，并将标识符存储在缓存中以防止后续重复提交。</p></li></ol><h2 id="_3-如何使用-jrepeat-注解" tabindex="-1"><a class="header-anchor" href="#_3-如何使用-jrepeat-注解" aria-hidden="true">#</a> 3. 如何使用 @JRepeat 注解</h2><p>下面是一个简单的使用示例，演示如何在 jeecg-boot 中使用 @JRepeat 注解来防止重复提交：</p><ol><li><p><strong>引入依赖</strong>： 确保你的项目已经引入了 jeecg-boot 相关依赖。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 引入分布式锁依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.jeecgframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jeecg-boot-starter-lock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>方法上使用 @JRepeat 注解</strong>： 在需要防止重复提交的方法上添加 @JRepeat 注解放在需要限制重复提交的方法上即可，例如：</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@JRepeat</span><span class="token punctuation">(</span>lockKey <span class="token operator">=</span> <span class="token string">&quot;#name&quot;</span><span class="token punctuation">,</span> lockTime <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 业务逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JRepeat注解使用说明</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 超时时间
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">int</span> <span class="token function">lockTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * redis 锁key的
 *
 * <span class="token keyword">@return</span> redis 锁key
 */</span>
<span class="token class-name">String</span> <span class="token function">lockKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在每次调用该方法时，会先检查 Redis 中是否存在相应的锁，如果存在，则说明该方法正在被调用，需要等待锁过期后再次尝试调用。如果不存在锁，则创建锁并执行业务逻辑，执行完成后释放锁。</p><p>举个例子</p><p>当多个用户同时对同一资源进行修改时，可能会发生并发冲突。为了避免这种情况，可以采用加锁机制来限制同一时间只有一个用户能够对该资源进行操作。</p><p>在Spring框架中，可以使用注解来实现加锁机制，其中@JRepeat就是一个加锁注解，它的作用是对某个方法加锁。</p><p>例如，假设有一个UserService的服务类，其中有一个方法updateUserName(String name)，该方法用于更新用户的用户名。为了避免多个用户同时更新同一个用户名，我们可以在该方法上加上@JRepeat注解，设置相应的锁定参数，如下所示：</p><p>@Service public class UserService {</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@JRepeat</span><span class="token punctuation">(</span>lockKey <span class="token operator">=</span> <span class="token string">&quot;#name&quot;</span><span class="token punctuation">,</span> lockTime <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 更新用户的用户名</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，@JRepeat 注解中的 lockKey 参数设置为方法参数 name，表示对不同的 name 参数值进行加锁，lockTime 参数设置为5，表示锁定时间为5秒。</p><p>当有多个用户同时调用 updateUserName 方法时，只有一个用户能够成功执行该方法，其他用户则需要等待锁定时间过后才能执行该方法。这样可以避免多个用户同时更新同一个用户名的情况发生，保证数据的一致性。</p><h2 id="_4-jrepeat-源码解析" tabindex="-1"><a class="header-anchor" href="#_4-jrepeat-源码解析" aria-hidden="true">#</a> 4. @JRepeat 源码解析</h2><blockquote><p>想要真正掌握一件事情或一个东西，最好的方法就是真正的 明白它，理解它，所以我们看源码</p></blockquote><h3 id="_1-jrepeat-注解" tabindex="-1"><a class="header-anchor" href="#_1-jrepeat-注解" aria-hidden="true">#</a> 1. @JRepeat 注解</h3><p>在对应依赖包下的这个目录中 org.jeecg.boot.starter.lock.annotation</p><h4 id="源码" tabindex="-1"><a class="header-anchor" href="#源码" aria-hidden="true">#</a> 源码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>jeecg<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>starter<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zyf
 */</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 防止重复提交的注解
 *
 * <span class="token keyword">@author</span> 2019年6月18日
 */</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">JRepeat</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 超时时间
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">int</span> <span class="token function">lockTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * redis 锁key的
     *
     * <span class="token keyword">@return</span> redis 锁key
     */</span>
    <span class="token class-name">String</span> <span class="token function">lockKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>



<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码解释" tabindex="-1"><a class="header-anchor" href="#代码解释" aria-hidden="true">#</a> 代码解释</h4><ul><li><code>@Retention(RetentionPolicy.RUNTIME)</code>: 指定了该注解的生命周期为运行时，这意味着它可以在运行时通过反射机制读取。</li><li><code>@Target({ElementType.METHOD})</code>: 指定了该注解可以应用于方法上。这意味着你可以在方法级别使用<code>JRepeat</code>注解来防止方法被重复调用。</li><li><code>@Documented</code>: 表明这个注解应该被包含在生成的JavaDoc文档中，方便开发者理解其用途。</li></ul><p>​ <code>JRepeat</code>注解定义了两个属性：</p><ul><li><code>lockTime()</code>：这是一个没有默认值的方法，意味着使用此注解时必须为其指定一个整数值。这个值表示锁的超时时间，单位通常取决于具体实现（但未在代码中明确），用于控制锁在Redis中自动释放的时间长度。</li><li><code>lockKey() default &quot;&quot;</code>: 这个属性提供了默认值<code>&quot;&quot;</code>，即空字符串。它代表了在Redis中用于锁定的键的名称。如果未在注解使用时指定，则默认为空字符串。实际应用中，为了确保锁的唯一性，通常需要根据业务场景设置一个具有唯一性的键名。</li></ul><h3 id="_2-repeatsubmitaspect-切面拦截器" tabindex="-1"><a class="header-anchor" href="#_2-repeatsubmitaspect-切面拦截器" aria-hidden="true">#</a> 2. RepeatSubmitAspect 切面拦截器</h3><h4 id="源码-1" tabindex="-1"><a class="header-anchor" href="#源码-1" aria-hidden="true">#</a> 源码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>jeecg<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>starter<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>aspect</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zyf
 */</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Pointcut</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">MethodSignature</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jeecg<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>starter<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JRepeat</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jeecg<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>starter<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RedissonLockClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jeecg<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">JeecgCloudException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">LocalVariableTableParameterNameDiscoverer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 防止重复提交分布式锁拦截器
 *
 * <span class="token keyword">@author</span> 2019年6月18日
 */</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RepeatSubmitAspect</span> <span class="token keyword">extends</span> <span class="token class-name">BaseAspect</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RedissonLockClient</span> redissonLockClient<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/***
     * 定义controller切入点拦截规则，拦截JRepeat注解的业务方法
     */</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(jRepeat)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token class-name">JRepeat</span> jRepeat<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * AOP分布式锁拦截
     *
     * <span class="token keyword">@param</span> <span class="token parameter">joinPoint</span>
     * <span class="token keyword">@return</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;pointCut(jRepeat)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">repeatSubmit</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">,</span><span class="token class-name">JRepeat</span> jRepeat<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalVariableTableParameterNameDiscoverer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>jRepeat<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取参数</span>
            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 进行一些参数的处理，比如获取订单号，操作人id等</span>
            <span class="token class-name">StringBuffer</span> lockKeyBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> key <span class="token operator">=</span><span class="token function">getValueBySpEL</span><span class="token punctuation">(</span>jRepeat<span class="token punctuation">.</span><span class="token function">lockKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameterNames<span class="token punctuation">,</span> args<span class="token punctuation">,</span><span class="token string">&quot;RepeatSubmit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 公平加锁，lockTime后锁自动释放</span>
            <span class="token keyword">boolean</span> isLocked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                isLocked <span class="token operator">=</span> redissonLockClient<span class="token punctuation">.</span><span class="token function">fairLock</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> jRepeat<span class="token punctuation">.</span><span class="token function">lockTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 如果成功获取到锁就继续执行</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>isLocked<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 执行进程</span>
                    <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 未获取到锁</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JeecgCloudException</span><span class="token punctuation">(</span><span class="token string">&quot;请勿重复提交&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果锁还存在，在方法执行完成后，释放锁</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>isLocked<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    redissonLockClient<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码解释-1" tabindex="-1"><a class="header-anchor" href="#代码解释-1" aria-hidden="true">#</a> 代码解释</h4><p>这段代码定义了一个AOP（面向切面编程）的切面类<code>RepeatSubmitAspect</code>，其主要作用是通过拦截带有<code>@JRepeat</code>注解的方法来实现防止重复提交的功能。这里使用了Redisson 客户端来实现分布式锁，确保在高并发环境下操作的原子性和一致性</p><h5 id="类注解" tabindex="-1"><a class="header-anchor" href="#类注解" aria-hidden="true">#</a> 类注解</h5><ul><li><code>@Aspect</code>: 表示该类是一个切面类，用于定义切点（Pointcut）、通知（Advice）等AOP相关的操作。</li><li><code>@Component</code>: 将该类标记为Spring的一个Bean，使其能够被Spring容器管理。</li></ul><h5 id="成员变量" tabindex="-1"><a class="header-anchor" href="#成员变量" aria-hidden="true">#</a> 成员变量</h5><ul><li><code>@Resource</code>: 用于注入<code>RedissonLockClient</code>实例，这是与Redis交互并处理锁逻辑的关键组件。</li></ul><h5 id="方法说明" tabindex="-1"><a class="header-anchor" href="#方法说明" aria-hidden="true">#</a> 方法说明</h5><h6 id="pointcut-方法" tabindex="-1"><a class="header-anchor" href="#pointcut-方法" aria-hidden="true">#</a> pointCut 方法</h6><ul><li><strong>作用</strong>: 定义切入点表达式，匹配所有标有<code>@JRepeat</code>注解的方法。</li><li><strong>参数</strong>: <code>jRepeat</code> 是一个<code>JRepeat</code>类型的参数，代表了被拦截方法上的<code>@JRepeat</code>注解实例。</li></ul><h6 id="repeatsubmit-方法" tabindex="-1"><a class="header-anchor" href="#repeatsubmit-方法" aria-hidden="true">#</a> repeatSubmit 方法</h6><ul><li>环绕通知(@Around): 在匹配的方法执行前后进行拦截处理。 <ul><li>参数: <ul><li><code>joinPoint</code>: 代表了被拦截的方法的执行点，可以从中获取方法签名、参数等信息。</li><li><code>jRepeat</code>: 当前执行方法上的<code>@JRepeat</code>注解实例。</li></ul></li></ul></li><li>流程: <ol><li><strong>解析参数</strong>: 使用<code>LocalVariableTableParameterNameDiscoverer</code>获取方法参数名，以便后续拼接锁的键值。</li><li><strong>构建锁键</strong>: 根据<code>@JRepeat</code>注解中的<code>lockKey</code>属性和方法参数值，动态生成锁的键。</li><li><strong>加锁处理</strong>: 调用<code>redissonLockClient.fairLock(key, ..., jRepeat.lockTime())</code>尝试公平锁，如果在指定的<code>lockTime</code>内获取锁成功，则执行原方法；否则抛出<code>JeecgCloudException</code>阻止重复提交。</li><li><strong>执行原方法</strong>: 加锁成功后，通过<code>joinPoint.proceed()</code>执行被拦截的方法。</li><li><strong>释放锁</strong>: 不论方法执行结果如何，在<code>finally</code>块中确保解锁操作执行，释放<code>Redis</code>锁资源。</li></ol></li></ul><h5 id="关键技术点" tabindex="-1"><a class="header-anchor" href="#关键技术点" aria-hidden="true">#</a> 关键技术点</h5><ul><li><strong>AOP切面编程</strong>: 通过定义切点和通知逻辑，实现了在不修改原有业务代码的基础上，增强了防止重复提交的功能。</li><li><strong>Redisson</strong>: 提供了对Redis高级功能的支持，如分布式锁，这里利用了它的公平锁特性来保证线程安全和操作的有序性。</li><li><strong>动态生成锁键</strong>: 结合方法参数值动态生成锁的键，使得每个特定的业务操作都能获得唯一的锁，避免锁的范围过大影响并发性能。</li></ul><h3 id="_3-baseaspect-父切面拦截器" tabindex="-1"><a class="header-anchor" href="#_3-baseaspect-父切面拦截器" aria-hidden="true">#</a> 3. BaseAspect 父切面拦截器</h3><h4 id="源码-2" tabindex="-1"><a class="header-anchor" href="#源码-2" aria-hidden="true">#</a> 源码</h4><p>用于解析Spring Expression Language (SpEL) 表达式的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>jeecg<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>starter<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>aspect</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>expression<span class="token punctuation">.</span></span><span class="token class-name">EvaluationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>expression<span class="token punctuation">.</span></span><span class="token class-name">Expression</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>expression<span class="token punctuation">.</span></span><span class="token class-name">ExpressionParser</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>spel<span class="token punctuation">.</span>standard<span class="token punctuation">.</span></span><span class="token class-name">SpelExpressionParser</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>spel<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">StandardEvaluationContext</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zyf
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseAspect</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 通过spring SpEL 获取参数
     *
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>            定义的key值 以#开头 例如:#user
     * <span class="token keyword">@param</span> <span class="token parameter">parameterNames</span> 形参
     * <span class="token keyword">@param</span> <span class="token parameter">values</span>         形参值
     * <span class="token keyword">@param</span> <span class="token parameter">keyConstant</span>    key的常亮
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getValueBySpEL</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterNames<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">,</span> <span class="token class-name">String</span> keyConstant<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;redis:lock:&quot;</span> <span class="token operator">+</span> key <span class="token operator">+</span> keyConstant<span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;lockKey:&quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            keys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> keys<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//spel解析器</span>
        <span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//spel上下文</span>
        <span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEvaluationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameterNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span>parameterNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Expression</span> expression <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> value <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">List</span> value1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">)</span> value<span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> value1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">addKeys</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> o<span class="token punctuation">,</span> keyConstant<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> obj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> value<span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">addKeys</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> o<span class="token punctuation">,</span> keyConstant<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">addKeys</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> value<span class="token punctuation">,</span> keyConstant<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;表达式key={},value={}&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> keys<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> keys<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addKeys</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">String</span> keyConstant<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        keys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;redis:lock:&quot;</span> <span class="token operator">+</span> o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> keyConstant<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码解释-2" tabindex="-1"><a class="header-anchor" href="#代码解释-2" aria-hidden="true">#</a> 代码解释</h4><h5 id="getvaluebyspel-方法" tabindex="-1"><a class="header-anchor" href="#getvaluebyspel-方法" aria-hidden="true">#</a> <code>getValueBySpEL</code> 方法</h5><ul><li><strong>目的</strong>: 该方法主要用于解析传入的SpEL表达式，并根据表达式的计算结果生成一个或多个锁的键值。这些键值随后可用于分布式锁的获取与释放操作，确保操作的安全性和幂等性。</li><li><strong>参数</strong>: <ul><li><code>key</code>: 字符串类型，包含SpEL表达式，可能直接是一个字符串键值或者以<code>#</code>开头的表达式，如<code>#orderId</code>，用于引用方法参数。</li><li><code>parameterNames</code>: 字符串数组，表示被拦截方法的参数名。</li><li><code>values</code>: 对象数组，对应方法的实际参数值。</li><li><code>keyConstant</code>: 字符串常量，用于在最终生成的锁键中添加一个固定的后缀。</li></ul></li><li><strong>流程</strong>: <ol><li><strong>检查直接键值</strong>: 如果<code>key</code>不包含<code>#</code>，说明是一个直接的键值，直接加上<code>keyConstant</code>后缀构造锁键并返回。</li><li><strong>初始化SpEL解析环境</strong>: 创建<code>ExpressionParser</code>和<code>EvaluationContext</code>，并将方法参数绑定到上下文中。</li><li><strong>解析SpEL表达式</strong>: 使用<code>parser</code>解析<code>key</code>中的SpEL表达式，并在给定的<code>context</code>中求值。</li><li><strong>处理表达式结果</strong>: 根据表达式计算得到的<code>value</code>类型（可能是单个值、列表或数组），遍历并调用<code>addKeys</code>方法为每个元素添加锁键。</li><li><strong>记录和返回</strong>: 打印日志并返回生成的所有锁键列表。</li></ol></li></ul><h5 id="addkeys-方法" tabindex="-1"><a class="header-anchor" href="#addkeys-方法" aria-hidden="true">#</a> <code>addKeys</code> 方法</h5><ul><li><strong>辅助功能</strong>: 这是一个私有方法，用于向锁键列表<code>keys</code>中添加元素。它接收一个对象<code>o</code>和一个常量<code>keyConstant</code>，构造锁键（格式为<code>redis:lock:</code> + <code>o.toString()</code> + <code>keyConstant</code>）并将其加入到<code>keys</code>列表中。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>@JRepeat 注解是 jeecg-boot 中一个强大且简洁的工具，可以有效防止重复提交，提升应用的可靠性和用户体验。通过简单的注解和拦截配置，即可轻松实现重复提交拦截功能。如果你在实际使用中遇到任何问题或有更多的需求，可以根据具体情况调整缓存逻辑或配置，以适应你的应用场景。</p><p>希望这篇博客能帮助你更好地理解和使用 @JRepeat 注解来防止重复提交。如果你有任何疑问或需要进一步的帮助，请随时留言讨论。</p>`,60),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","jeecg-boot 防止重复提交.html.vue"]]);export{r as default};
