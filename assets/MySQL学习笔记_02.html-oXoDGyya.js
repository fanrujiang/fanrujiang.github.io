import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as i,c as n,e as a}from"./app-WQ1PjK-F.js";const s="/assets/image-20220901093654673-O2JA5Z0J.png",l="/assets/image-20221207155509696-UqT2w7fS.png",d="/assets/image-20220901093756992-zz8yFqU6.png",t="/assets/image-20221207164518904-NU2pmYnf.png",r="/assets/image-20221207165446062-Gz2LlwRv.png",o="/assets/image-20230207201904002-6o6H0UTX.png",c="/assets/image-20221207174234522-cBTlrbcl.png",m="/assets/image-20230207202556072-Dm15BHLL.png",p="/assets/image-20230207203055254-QB7IXbxG.png",u="/assets/image-20230207203553658-enL5RB15.png",g="/assets/image-20221207203000445-wW6f_CI4.png",v="/assets/image-20230207205344503-upeWFRgF.png",b="/assets/image-20230207205901253-S7e_-t1j.png",h="/assets/image-20221208143318921-UUwtr_T3.png",_="/assets/image-20221208143312292-OubgtlYV.png",y="/assets/image-20230208103358130-7hAKWuJZ.png",q="/assets/image-20230208105026381-513HOa39.png",f="/assets/image-20230208110121714-fOTpU_iG.png",k="/assets/image-20230208110736393-CV4jap5C.png",x="/assets/image-20230208112936884-Ay2eJEc8.png",w="/assets/image-20221209115617429-CJnjMNhk.png",z="/assets/image-20221209120107543-NBJOqO6X.png",j="/assets/image-20221208174135229-tqh71th1.png",L="/assets/image-20221208174859866-2PL5i0B_.png",S="/assets/image-20221209100647867-kbJuDLnh.png",B="/assets/image-20221208181315728-7xHhual7.png",I="/assets/image-20221209105119159-jETKDRUg.png",T="/assets/image-20221209105846211-OQNmIVsL.png",Q="/assets/image-20221209110317092--2Dvm9_I.png",O={},N=a(`<h1 id="mysql学习笔记-02" tabindex="-1"><a class="header-anchor" href="#mysql学习笔记-02" aria-hidden="true">#</a> mysql学习笔记_02</h1><h1 id="_1-多表查询" tabindex="-1"><a class="header-anchor" href="#_1-多表查询" aria-hidden="true">#</a> 1. 多表查询</h1><h2 id="_1-1-概述" tabindex="-1"><a class="header-anchor" href="#_1-1-概述" aria-hidden="true">#</a> 1.1 概述</h2><h3 id="_1-1-1-数据准备" tabindex="-1"><a class="header-anchor" href="#_1-1-1-数据准备" aria-hidden="true">#</a> 1.1.1 数据准备</h3><p>SQL脚本：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#建议：创建新的数据库
create database db04;
use db04;

-- 部门表
create table tb_dept
(
    id          int unsigned primary key auto_increment comment &#39;主键ID&#39;,
    name        varchar(10) not null unique comment &#39;部门名称&#39;,
    create_time datetime    not null comment &#39;创建时间&#39;,
    update_time datetime    not null comment &#39;修改时间&#39;
) comment &#39;部门表&#39;;
-- 部门表测试
insert into tb_dept (id, name, create_time, update_time)
values (1, &#39;学工部&#39;, now(), now()),
       (2, &#39;教研部&#39;, now(), now()),
       (3, &#39;咨询部&#39;, now(), now()),
       (4, &#39;就业部&#39;, now(), now()),
       (5, &#39;人事部&#39;, now(), now());

-- 员工表
create table tb_emp
(
    id          int unsigned primary key auto_increment comment &#39;ID&#39;,
    username    varchar(20)      not null unique comment &#39;用户名&#39;,
    password    varchar(32) default &#39;123456&#39; comment &#39;密码&#39;,
    name        varchar(10)      not null comment &#39;姓名&#39;,
    gender      tinyint unsigned not null comment &#39;性别, 说明: 1 男, 2 女&#39;,
    image       varchar(300) comment &#39;图像&#39;,
    job         tinyint unsigned comment &#39;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师&#39;,
    entrydate   date comment &#39;入职时间&#39;,
    dept_id     int unsigned comment &#39;部门ID&#39;,
    create_time datetime         not null comment &#39;创建时间&#39;,
    update_time datetime         not null comment &#39;修改时间&#39;
) comment &#39;员工表&#39;;
-- 员工表测试数据
INSERT INTO tb_emp(id, username, password, name, gender, image, job, entrydate,dept_id, create_time, update_time) 
VALUES 
(1,&#39;jinyong&#39;,&#39;123456&#39;,&#39;金庸&#39;,1,&#39;1.jpg&#39;,4,&#39;2000-01-01&#39;,2,now(),now()),
(2,&#39;zhangwuji&#39;,&#39;123456&#39;,&#39;张无忌&#39;,1,&#39;2.jpg&#39;,2,&#39;2015-01-01&#39;,2,now(),now()),
(3,&#39;yangxiao&#39;,&#39;123456&#39;,&#39;杨逍&#39;,1,&#39;3.jpg&#39;,2,&#39;2008-05-01&#39;,2,now(),now()),
(4,&#39;weiyixiao&#39;,&#39;123456&#39;,&#39;韦一笑&#39;,1,&#39;4.jpg&#39;,2,&#39;2007-01-01&#39;,2,now(),now()),
(5,&#39;changyuchun&#39;,&#39;123456&#39;,&#39;常遇春&#39;,1,&#39;5.jpg&#39;,2,&#39;2012-12-05&#39;,2,now(),now()),
(6,&#39;xiaozhao&#39;,&#39;123456&#39;,&#39;小昭&#39;,2,&#39;6.jpg&#39;,3,&#39;2013-09-05&#39;,1,now(),now()),
(7,&#39;jixiaofu&#39;,&#39;123456&#39;,&#39;纪晓芙&#39;,2,&#39;7.jpg&#39;,1,&#39;2005-08-01&#39;,1,now(),now()),
(8,&#39;zhouzhiruo&#39;,&#39;123456&#39;,&#39;周芷若&#39;,2,&#39;8.jpg&#39;,1,&#39;2014-11-09&#39;,1,now(),now()),
(9,&#39;dingminjun&#39;,&#39;123456&#39;,&#39;丁敏君&#39;,2,&#39;9.jpg&#39;,1,&#39;2011-03-11&#39;,1,now(),now()),
(10,&#39;zhaomin&#39;,&#39;123456&#39;,&#39;赵敏&#39;,2,&#39;10.jpg&#39;,1,&#39;2013-09-05&#39;,1,now(),now()),
(11,&#39;luzhangke&#39;,&#39;123456&#39;,&#39;鹿杖客&#39;,1,&#39;11.jpg&#39;,5,&#39;2007-02-01&#39;,3,now(),now()),
(12,&#39;hebiweng&#39;,&#39;123456&#39;,&#39;鹤笔翁&#39;,1,&#39;12.jpg&#39;,5,&#39;2008-08-18&#39;,3,now(),now()),
(13,&#39;fangdongbai&#39;,&#39;123456&#39;,&#39;方东白&#39;,1,&#39;13.jpg&#39;,5,&#39;2012-11-01&#39;,3,now(),now()),
(14,&#39;zhangsanfeng&#39;,&#39;123456&#39;,&#39;张三丰&#39;,1,&#39;14.jpg&#39;,2,&#39;2002-08-01&#39;,2,now(),now()),
(15,&#39;yulianzhou&#39;,&#39;123456&#39;,&#39;俞莲舟&#39;,1,&#39;15.jpg&#39;,2,&#39;2011-05-01&#39;,2,now(),now()),
(16,&#39;songyuanqiao&#39;,&#39;123456&#39;,&#39;宋远桥&#39;,1,&#39;16.jpg&#39;,2,&#39;2007-01-01&#39;,2,now(),now()),
(17,&#39;chenyouliang&#39;,&#39;123456&#39;,&#39;陈友谅&#39;,1,&#39;17.jpg&#39;,NULL,&#39;2015-03-21&#39;,NULL,now(),now());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-2-介绍" tabindex="-1"><a class="header-anchor" href="#_1-1-2-介绍" aria-hidden="true">#</a> 1.1.2 介绍</h3><p>多表查询：查询时从多张表中获取所需数据</p><blockquote><p>单表查询的SQL语句：select 字段列表 from 表名;</p><p>那么要执行多表查询，只需要使用逗号分隔多张表即可，如： select 字段列表 from 表1, 表2;</p></blockquote><p>查询用户表和部门表中的数据：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from  tb_emp , tb_dept;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+s+'" alt="image-20220901093654673" tabindex="0" loading="lazy"><figcaption>image-20220901093654673</figcaption></figure><p>此时,我们看到查询结果中包含了大量的结果集，总共85条记录，而这其实就是员工表所有的记录(17行)与部门表所有记录(5行)的所有组合情况，这种现象称之为笛卡尔积。</p><p>笛卡尔积：笛卡尔乘积是指在数学中，两个集合(A集合和B集合)的所有组合情况。</p><figure><img src="'+l+'" alt="image-20221207155509696" tabindex="0" loading="lazy"><figcaption>image-20221207155509696</figcaption></figure><blockquote><p>在多表查询时，需要消除无效的笛卡尔积，只保留表关联部分的数据</p></blockquote><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在SQL语句中，如何去除无效的笛卡尔积呢？只需要给多表查询加上连接查询的条件即可。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from tb_emp , tb_dept where tb_emp.dept_id = tb_dept.id ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+t+'" alt="image-20221207164518904" tabindex="0" loading="lazy"><figcaption>image-20221207164518904</figcaption></figure><blockquote><p>由于id为17的员工，没有dept_id字段值，所以在多表查询时，根据连接查询的条件并没有查询到。</p></blockquote><h3 id="_1-1-3-分类" tabindex="-1"><a class="header-anchor" href="#_1-1-3-分类" aria-hidden="true">#</a> 1.1.3 分类</h3><p>多表查询可以分为：</p><ol><li><p>连接查询</p><ul><li>内连接：相当于查询A、B交集部分数据</li></ul><figure><img src="'+r+`" alt="image-20221207165446062" tabindex="0" loading="lazy"><figcaption>image-20221207165446062</figcaption></figure></li><li><p>外连接</p><ul><li><p>左外连接：查询左表所有数据(包括两张表交集部分数据)</p></li><li><p>右外连接：查询右表所有数据(包括两张表交集部分数据)</p></li></ul></li><li><p>子查询</p></li></ol><h2 id="_1-2-内连接" tabindex="-1"><a class="header-anchor" href="#_1-2-内连接" aria-hidden="true">#</a> 1.2 内连接</h2><p>内连接查询：查询两表或多表中交集部分数据。</p><p>内连接从语法上可以分为：</p><ul><li><p>隐式内连接</p></li><li><p>显式内连接</p></li></ul><p>隐式内连接语法：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select  字段列表   from   表1 , 表2   where  条件 ... ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显式内连接语法：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select  字段列表   from   表1  [ inner ]  join 表2  on  连接条件 ... ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例：查询员工的姓名及所属的部门名称</p><ul><li>隐式内连接实现</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select tb_emp.name , tb_dept.name -- 分别查询两张表中的数据
from tb_emp , tb_dept -- 关联两张表
where tb_emp.dept_id = tb_dept.id; -- 消除笛卡尔积
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>显式内连接实现</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select te.name, td.name
from tb_emp te
         inner join tb_dept td on te.dept_id = td.id;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+o+'" alt="image-20230207201904002" style="zoom:67%;"><p>多表查询时给表起别名：</p><ul><li><p>tableA as 别名1 , tableB as 别名2 ;</p></li><li><p>tableA 别名1 , tableB 别名2 ;</p></li></ul><figure><img src="'+c+`" alt="image-20221207174234522" tabindex="0" loading="lazy"><figcaption>image-20221207174234522</figcaption></figure><p>使用了别名的多表查询：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select emp.name , dept.name
from tb_emp emp inner join tb_dept dept
on emp.dept_id = dept.id;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意事项:</p><p>一旦为表起了别名，就不能再使用表名来指定对应的字段了，此时只能够使用别名来指定字段。</p></blockquote><h2 id="_1-3外连接" tabindex="-1"><a class="header-anchor" href="#_1-3外连接" aria-hidden="true">#</a> 1.3外连接</h2><p>外连接分为两种：左外连接 和 右外连接。</p><p>左外连接语法结构：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select  字段列表   from   表1  left  [ outer ]  join 表2  on  连接条件 ... ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>左外连接相当于查询表1(左表)的所有数据，当然也包含表1和表2交集部分的数据。</p></blockquote><p>右外连接语法结构：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select  字段列表   from   表1  right  [ outer ]  join 表2  on  连接条件 ... ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>右外连接相当于查询表2(右表)的所有数据，当然也包含表1和表2交集部分的数据。</p></blockquote><p>案例：查询员工表中所有员工的姓名, 和对应的部门名称</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select emp.name, dept.name
from tb_emp emp
         left outer join tb_dept dept on emp.dept_id = dept.id;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+m+`" alt="image-20230207202556072" style="zoom:80%;"><p>案例：查询部门表中所有部门的名称, 和对应的员工名称</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select dept.name, emp.name
from tb_emp emp
         right outer join tb_dept dept on emp.dept_id = dept.id;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="image-20230207203055254" tabindex="0" loading="lazy"><figcaption>image-20230207203055254</figcaption></figure><blockquote><p>注意事项：</p><p>左外连接和右外连接是可以相互替换的，只需要调整连接查询时SQL语句中表的先后顺序就可以了。而我们在日常开发使用时，更偏向于左外连接。</p></blockquote><h2 id="_1-4-子查询" tabindex="-1"><a class="header-anchor" href="#_1-4-子查询" aria-hidden="true">#</a> 1.4 子查询</h2><h3 id="_1-4-1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-4-1-介绍" aria-hidden="true">#</a> 1.4.1 介绍</h3><p>SQL语句中嵌套select语句，称为嵌套查询，又称子查询。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>  <span class="token operator">*</span>  <span class="token keyword">FROM</span>   t1   <span class="token keyword">WHERE</span>  column1 <span class="token operator">=</span>  <span class="token punctuation">(</span> <span class="token keyword">SELECT</span>  column1  <span class="token keyword">FROM</span>  t2 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>子查询外部的语句可以是insert / update / delete / select 的任何一个，最常见的是 select。</p></blockquote><p>根据子查询结果的不同分为：</p><ol><li><p>标量子查询（子查询结果为单个值[一行一列]）</p></li><li><p>列子查询（子查询结果为一列，但可以是多行）</p></li><li><p>行子查询（子查询结果为一行，但可以是多列）</p></li><li><p>表子查询（子查询结果为多行多列[相当于子查询结果是一张表]）</p></li></ol><p>子查询可以书写的位置：</p><ol><li>where之后</li><li>from之后</li><li>select之后</li></ol><h3 id="_1-4-2-标量子查询" tabindex="-1"><a class="header-anchor" href="#_1-4-2-标量子查询" aria-hidden="true">#</a> 1.4.2 标量子查询</h3><p>子查询返回的结果是单个值(数字、字符串、日期等)，最简单的形式，这种子查询称为标量子查询。</p><p>常用的操作符： = &lt;&gt; &gt; &gt;= &lt; &lt;=</p><p>案例1：查询&quot;教研部&quot;的所有员工信息</p><blockquote><p>可以将需求分解为两步：</p><ol><li>查询 &quot;教研部&quot; 部门ID</li><li>根据 &quot;教研部&quot; 部门ID，查询员工信息</li></ol></blockquote><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select *
from tb_emp
where dept_id = (select id from tb_dept where name = &#39;教研部&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="image-20230207203553658" tabindex="0" loading="lazy"><figcaption>image-20230207203553658</figcaption></figure><p>案例2：查询在 &quot;方东白&quot; 入职之后的员工信息</p><blockquote><p>可以将需求分解为两步：</p><ol><li>查询 方东白 的入职日期</li><li>查询 指定入职日期之后入职的员工信息</li></ol></blockquote><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>-- 1.查询&quot;方东白&quot;的入职日期
select entrydate from tb_emp where name = &#39;方东白&#39;;     #查询结果：2012-11-01
-- 2.查询指定入职日期之后入职的员工信息
select * from tb_emp where entrydate &gt; &#39;2012-11-01&#39;;

-- 合并以上两条SQL语句
select * from tb_emp where entrydate &gt; (select entrydate from tb_emp where name = &#39;方东白&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+`" alt="image-20221207203000445" tabindex="0" loading="lazy"><figcaption>image-20221207203000445</figcaption></figure><h3 id="_1-4-3-列子查询" tabindex="-1"><a class="header-anchor" href="#_1-4-3-列子查询" aria-hidden="true">#</a> 1.4.3 列子查询</h3><p>子查询返回的结果是一列(可以是多行)，这种子查询称为列子查询。</p><p>常用的操作符：</p><table><thead><tr><th><strong>操作符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围之内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围之内</td></tr></tbody></table><p>案例：查询&quot;教研部&quot;和&quot;咨询部&quot;的所有员工信息</p><blockquote><p>分解为以下两步：</p><ol><li>查询 &quot;销售部&quot; 和 &quot;市场部&quot; 的部门ID</li><li>根据部门ID, 查询员工信息</li></ol></blockquote><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select *
from tb_emp
where dept_id in (select id from tb_dept where name = &#39;教研部&#39; or name = &#39;咨询部&#39;);

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+`" alt="image-20230207205344503" tabindex="0" loading="lazy"><figcaption>image-20230207205344503</figcaption></figure><h3 id="_1-4-4-行子查询" tabindex="-1"><a class="header-anchor" href="#_1-4-4-行子查询" aria-hidden="true">#</a> 1.4.4 行子查询</h3><p>子查询返回的结果是一行(可以是多列)，这种子查询称为行子查询。</p><p>常用的操作符：= 、&lt;&gt; 、IN 、NOT IN</p><p>案例：查询与&quot;韦一笑&quot;的入职日期及职位都相同的员工信息</p><blockquote><p>可以拆解为两步进行：</p><ol><li>查询 &quot;韦一笑&quot; 的入职日期 及 职位</li><li>查询与&quot;韦一笑&quot;的入职日期及职位相同的员工信息</li></ol></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select *
from tb_emp
where (entrydate,job)=(select entrydate, job from tb_emp where name = &#39;韦一笑&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+b+`" alt="image-20230207205901253" tabindex="0" loading="lazy"><figcaption>image-20230207205901253</figcaption></figure><h3 id="_1-4-5-表子查询" tabindex="-1"><a class="header-anchor" href="#_1-4-5-表子查询" aria-hidden="true">#</a> 1.4.5 表子查询</h3><p>子查询返回的结果是多行多列，常作为临时表，这种子查询称为表子查询。</p><p>案例：查询入职日期是 &quot;2006-01-01&quot; 之后的员工信息 , 及其部门信息</p><blockquote><p>分解为两步执行：</p><ol><li>查询入职日期是 &quot;2006-01-01&quot; 之后的员工信息</li><li>基于查询到的员工信息，在查询对应的部门信息</li></ol></blockquote><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select *
from (select * from tb_emp where entrydate &gt; &#39;2006-01-01&#39;) e
         left outer join tb_dept d on e.dept_id = d.id;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-5-案例" tabindex="-1"><a class="header-anchor" href="#_1-5-案例" aria-hidden="true">#</a> 1.5 案例</h2><p>基于之前设计的多表案例的表结构，我们来完成今天的多表查询案例需求。</p><p><strong>准备环境</strong></p><p>将资料中准备好的多表查询的数据准备的SQL脚本导入数据库中。</p><figure><img src="`+h+'" alt="image-20221208143318921" tabindex="0" loading="lazy"><figcaption>image-20221208143318921</figcaption></figure><ul><li>分类表：category</li><li>菜品表：dish</li><li>套餐表：setmeal</li><li>套餐菜品关系表：setmeal_dish</li></ul><figure><img src="'+_+`" alt="image-20221208143312292" tabindex="0" loading="lazy"><figcaption>image-20221208143312292</figcaption></figure><p><strong>需求实现</strong></p><ol><li>查询价格低于 10元 的菜品的名称 、价格 及其 菜品的分类名称</li></ol><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select d.name &#39;菜品名&#39;, d.price &#39;价格&#39;, c.name &#39;套餐名&#39;
from dish d,
     category c
where d.category_id = c.id
  and d.price &lt;= 10;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+y+`" alt="image-20230208103358130" tabindex="0" loading="lazy"><figcaption>image-20230208103358130</figcaption></figure><ol start="2"><li>查询所有价格在 10元(含)到50元(含)之间 且 状态为&#39;起售&#39;的菜品名称、价格 及其 菜品的分类名称 (即使菜品没有分类 , 也需要将菜品查询出来).</li></ol><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select d.name, d.price, c.name
from (select * from dish where price between 10 and 50 and status = 1) d
         left join category c on d.category_id = c.id;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+q+`" alt="image-20230208105026381" tabindex="0" loading="lazy"><figcaption>image-20230208105026381</figcaption></figure><ol start="3"><li>查询每个分类下最贵的菜品, 展示出分类的名称、最贵的菜品的价格 .</li></ol><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select c.name, max(price)
from dish d,
     category c
where d.category_id = c.id
group by c.name;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+f+`" alt="image-20230208110121714" tabindex="0" loading="lazy"><figcaption>image-20230208110121714</figcaption></figure><ol start="4"><li>查询各个分类下 状态为 &#39;起售&#39; , 并且 该分类下菜品总数量大于等于3 的 分类名称</li></ol><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select c.name, count(*) number
from dish d,
     category c
where d.category_id = c.id
  and d.status = 1
group by c.name
having number &gt;= 3;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="image-20230208110736393" tabindex="0" loading="lazy"><figcaption>image-20230208110736393</figcaption></figure><ol start="5"><li>查询出 &quot;商务套餐A&quot; 中包含了哪些菜品 （展示出套餐名称、价格, 包含的菜品名称、价格、份数）</li></ol><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select s.name, s.price, d.name, d.price, sd.copies
from setmeal s,
     dish d,
     setmeal_dish sd
where s.id = sd.setmeal_id
  and d.id = sd.dish_id
  and s.name = &#39;商务套餐A&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>查询出低于菜品平均价格的菜品信息 (展示出菜品名称、菜品价格).</li></ol><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select name, price
from dish
where price &lt; (select avg(price) from dish);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+x+`" alt="image-20230208112936884" tabindex="0" loading="lazy"><figcaption>image-20230208112936884</figcaption></figure><h1 id="_2-事务" tabindex="-1"><a class="header-anchor" href="#_2-事务" aria-hidden="true">#</a> 2. 事务</h1><p>场景：学工部整个部门解散了，该部门及部门下的员工都需要删除了。</p><ul><li><p>操作：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 删除学工部</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> dept <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">-- 删除成功</span>

<span class="token comment">-- 删除学工部的员工</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> dept_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">-- 删除失败（操作过程中出现错误：造成删除没有成功）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>问题：如果删除部门成功了，而删除该部门的员工时失败了，此时就造成了数据的不一致。</p></li></ul><p>​ 要解决上述的问题，就需要通过数据库中的事务来解决。</p><h2 id="_2-2-操作" tabindex="-1"><a class="header-anchor" href="#_2-2-操作" aria-hidden="true">#</a> 2.2 操作</h2><p>MYSQL中有两种方式进行事务的操作：</p><ol><li>自动提交事务：即执行一条sql语句提交一次事务。（默认MySQL的事务是自动提交）</li><li>手动提交事务：先开启，再提交</li></ol><p>事务操作有关的SQL语句：</p><table><thead><tr><th>SQL语句</th><th>描述</th></tr></thead><tbody><tr><td>start transaction; / begin ;</td><td>开启手动控制事务</td></tr><tr><td>commit;</td><td>提交事务</td></tr><tr><td>rollback;</td><td>回滚事务</td></tr></tbody></table><blockquote><p>手动提交事务使用步骤：</p><ul><li>第1种情况：开启事务 =&gt; 执行SQL语句 =&gt; 成功 =&gt; 提交事务</li><li>第2种情况：开启事务 =&gt; 执行SQL语句 =&gt; 失败 =&gt; 回滚事务</li></ul></blockquote><p>使用事务控制删除部门和删除该部门下的员工的操作：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 开启事务</span>
<span class="token keyword">start</span> <span class="token keyword">transaction</span> <span class="token punctuation">;</span>

<span class="token comment">-- 删除学工部</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> tb_dept <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 删除学工部的员工</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> tb_emp <span class="token keyword">where</span> dept_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上述的这组SQL语句，如果如果执行成功，则提交事务</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 提交事务 (成功时执行)</span>
<span class="token keyword">commit</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上述的这组SQL语句，如果如果执行失败，则回滚事务</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 回滚事务 (出错时执行)</span>
<span class="token keyword">rollback</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-3-四大特性" tabindex="-1"><a class="header-anchor" href="#_2-3-四大特性" aria-hidden="true">#</a> 2.3 四大特性</h2><p>面试题：事务有哪些特性？</p><ul><li>原子性（Atomicity）：事务是不可分割的最小单元，要么全部成功，要么全部失败。</li><li>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><blockquote><p>事务的四大特性简称为：ACID</p></blockquote><ul><li><p><strong>原子性（Atomicity）</strong> ：原子性是指事务包装的一组sql是一个不可分割的工作单元，事务中的操作要么全部成功，要么全部失败。</p></li><li><p><strong>一致性（Consistency）</strong>：一个事务完成之后数据都必须处于一致性状态。</p></li></ul><p>​ 如果事务成功的完成，那么数据库的所有变化将生效。</p><p>​ 如果事务执行出现错误，那么数据库的所有变化将会被回滚(撤销)，返回到原始状态。</p><ul><li><strong>隔离性（Isolation）</strong>：多个用户并发的访问数据库时，一个用户的事务不能被其他用户的事务干扰，多个并发的事务之间要相互隔离。</li></ul><p>​ 一个事务的成功或者失败对于其他的事务是没有影响。</p><ul><li><strong>持久性（Durability）</strong>：一个事务一旦被提交或回滚，它对数据库的改变将是永久性的，哪怕数据库发生异常，重启之后数据亦然存在。</li></ul><h1 id="_3-索引" tabindex="-1"><a class="header-anchor" href="#_3-索引" aria-hidden="true">#</a> 3. 索引</h1><h2 id="_3-1-介绍" tabindex="-1"><a class="header-anchor" href="#_3-1-介绍" aria-hidden="true">#</a> 3.1 介绍</h2><p>索引(index)：是帮助数据库高效获取数据的数据结构 。</p><ul><li>简单来讲，就是使用索引可以提高查询的效率。</li></ul><p>测试没有使用索引的查询：</p><figure><img src="`+w+`" alt="image-20221209115617429" tabindex="0" loading="lazy"><figcaption>image-20221209115617429</figcaption></figure><p>添加索引后查询：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>-- 添加索引
create index idx_sku_sn on tb_sku (sn);  #在添加索引时，也需要消耗时间

-- 查询数据（使用了索引）
select * from tb_sku where sn = &#39;100000003145008&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+z+'" alt="image-20221209120107543" tabindex="0" loading="lazy"><figcaption>image-20221209120107543</figcaption></figure><p>优点：</p><ol><li>提高数据查询的效率，降低数据库的IO成本。</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU消耗。</li></ol><p>缺点：</p><ol><li>索引会占用存储空间。</li><li>索引大大提高了查询效率，同时却也降低了insert、update、delete的效率。</li></ol><h2 id="_3-2-结构" tabindex="-1"><a class="header-anchor" href="#_3-2-结构" aria-hidden="true">#</a> 3.2 结构</h2><p>MySQL数据库支持的索引结构有很多，如：Hash索引、B+Tree索引、Full-Text索引等。</p><p>我们平常所说的索引，如果没有特别指明，都是指默认的 B+Tree 结构组织的索引。</p><p>在没有了解B+Tree结构前，我们先回顾下之前所学习的树结构：</p><blockquote><p>二叉查找树：左边的子节点比父节点小，右边的子节点比父节点大</p></blockquote><figure><img src="'+j+'" alt="image-20221208174135229" tabindex="0" loading="lazy"><figcaption>image-20221208174135229</figcaption></figure><blockquote><p>当我们向二叉查找树保存数据时，是按照从大到小(或从小到大)的顺序保存的，此时就会形成一个单向链表，搜索性能会打折扣。</p></blockquote><figure><img src="'+L+'" alt="image-20221208174859866" tabindex="0" loading="lazy"><figcaption>image-20221208174859866</figcaption></figure><blockquote><p>可以选择平衡二叉树或者是红黑树来解决上述问题。（红黑树也是一棵平衡的二叉树）</p></blockquote><figure><img src="'+S+'" alt="image-20221209100647867" tabindex="0" loading="lazy"><figcaption>image-20221209100647867</figcaption></figure><blockquote><p>但是在Mysql数据库中并没有使用二叉搜索数或二叉平衡数或红黑树来作为索引的结构。</p></blockquote><p>思考：采用二叉搜索树或者是红黑树来作为索引的结构有什么问题？</p><details><summary>答案</summary> 最大的问题就是在数据量大的情况下，树的层级比较深，会影响检索速度。因为不管是二叉搜索数还是红黑数，一个节点下面只能有两个子节点。此时在数据量大的情况下，就会造成数的高度比较高，树的高度一旦高了，检索速度就会降低。 </details><blockquote><p>说明：如果数据结构是红黑树，那么查询1000万条数据，根据计算树的高度大概是23左右，这样确实比之前的方式快了很多，但是如果高并发访问，那么一个用户有可能需要23次磁盘IO，那么100万用户，那么会造成效率极其低下。所以为了减少红黑树的高度，那么就得增加树的宽度，就是不再像红黑树一样每个节点只能保存一个数据，可以引入另外一种数据结构，一个节点可以保存多个数据，这样宽度就会增加从而降低树的高度。这种数据结构例如BTree就满足。</p></blockquote><p>下面我们来看看B+Tree(多路平衡搜索树)结构中如何避免这个问题：</p><figure><img src="'+B+`" alt="image-20221208181315728" tabindex="0" loading="lazy"><figcaption>image-20221208181315728</figcaption></figure><p>B+Tree结构：</p><ul><li>每一个节点，可以存储多个key（有n个key，就有n个指针）</li><li>节点分为：叶子节点、非叶子节点 <ul><li>叶子节点，就是最后一层子节点，所有的数据都存储在叶子节点上</li><li>非叶子节点，不是树结构最下面的节点，用于索引数据，存储的的是：key+指针</li></ul></li><li>为了提高范围查询效率，叶子节点形成了一个双向链表，便于数据的排序及区间范围查询</li></ul><blockquote><p><strong>拓展：</strong></p><p>非叶子节点都是由key+指针域组成的，一个key占8字节，一个指针占6字节，而一个节点总共容量是16KB，那么可以计算出一个节点可以存储的元素个数：16*1024字节 / (8+6)=1170个元素。</p><ul><li>查看mysql索引节点大小：show global status like &#39;innodb_page_size&#39;; -- 节点大小：16384</li></ul><p>当根节点中可以存储1170个元素，那么根据每个元素的地址值又会找到下面的子节点，每个子节点也会存储1170个元素，那么第二层即第二次IO的时候就会找到数据大概是：1170*1170=135W。也就是说B+Tree数据结构中只需要经历两次磁盘IO就可以找到135W条数据。</p><p>对于第二层每个元素有指针，那么会找到第三层，第三层由key+数据组成，假设key+数据总大小是1KB，而每个节点一共能存储16KB，所以一个第三层一个节点大概可以存储16个元素(即16条记录)。那么结合第二层每个元素通过指针域找到第三层的节点，第二层一共是135W个元素，那么第三层总元素大小就是：135W*16结果就是2000W+的元素个数。</p><p>结合上述分析B+Tree有如下优点：</p><ul><li>千万条数据，B+Tree可以控制在小于等于3的高度</li><li>所有的数据都存储在叶子节点上，并且底层已经实现了按照索引进行排序，还可以支持范围查询，叶子节点是一个双向链表，支持从小到大或者从大到小查找</li></ul></blockquote><h2 id="_3-3-语法" tabindex="-1"><a class="header-anchor" href="#_3-3-语法" aria-hidden="true">#</a> 3.3 语法</h2><p><strong>创建索引</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>create  [ unique ]  index 索引名 on  表名 (字段名,... ) ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例：为tb_emp表的name字段建立一个索引</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>create index idx_emp_name on tb_emp(name);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+I+'" alt="image-20221209105119159" tabindex="0" loading="lazy"><figcaption>image-20221209105119159</figcaption></figure><blockquote><p>在创建表时，如果添加了主键和唯一约束，就会默认创建：主键索引、唯一约束</p><figure><img src="'+T+`" alt="image-20221209105846211" tabindex="0" loading="lazy"><figcaption>image-20221209105846211</figcaption></figure></blockquote><p><strong>查看索引</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>show  index  from  表名;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例：查询 tb_emp 表的索引信息</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>show  index  from  tb_emp;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+Q+`" alt="image-20221209110317092" tabindex="0" loading="lazy"><figcaption>image-20221209110317092</figcaption></figure><p><strong>删除索引</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>drop  index  索引名  on  表名;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例：删除 tb_emp 表中name字段的索引</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>drop index idx_emp_name on tb_emp;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意事项：</p><ul><li><p>主键字段，在建表时，会自动创建主键索引</p></li><li><p>添加唯一约束时，数据库实际上会添加唯一索引</p></li></ul></blockquote>`,199),D=[N];function A(U,E){return i(),n("div",null,D)}const W=e(O,[["render",A],["__file","MySQL学习笔记_02.html.vue"]]);export{W as default};
