import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as l,a as n,b as a,d as t,e}from"./app-WQ1PjK-F.js";const i="/assets/1quNFxdE5j7OtCYBgTOnpVg-3PvEUjCr.png",u="/assets/1VV17sAsicC_FNZ3UKoqV0g-BLmRSbeD.png",r="/assets/1VVWVa2Rx5Wh6vqHD9kZzgQ-HhFgp1Y3.png",d="/assets/1RT_yo4bK3ywbIJmWhvzkzQ-Vl-74HLJ.png",k="/assets/1Hp83eedCI9V6D_zqbLh8yw-nJcMvSAO.png",g="/assets/image-20240820143354898-WDhWRizB.png",m={},h=n("blockquote",null,[n("p",null,"监控是一项具有挑战性的任务。这是建立稳定生产系统的关键一步。通过观察各种指标，我们可以了解系统在不同负载条件下的表现以及哪些指标需要更多关注。")],-1),v={href:"https://prometheus.io/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://grafana.com/",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"你将学习如何：",-1),f=n("li",null,"配置 Spring Boot Actuator 以启用指标",-1),y=n("li",null,"配置 Prometheus 来抓取指标",-1),x={href:"https://prometheus.io/docs/prometheus/latest/querying/basics/",target:"_blank",rel:"noopener noreferrer"},q=n("li",null,"在 Grafana 仪表板中可视化指标",-1),w=e('<p><em>本文假设您具有基本的 Spring Boot 知识。我们将集中讨论监控配置部分。</em></p><p>让我们开始吧！</p><h3 id="_1-准备项目" tabindex="-1"><a class="header-anchor" href="#_1-准备项目" aria-hidden="true">#</a> 1. 准备项目</h3><h4 id="_1-了解组件" tabindex="-1"><a class="header-anchor" href="#_1-了解组件" aria-hidden="true">#</a> 1. 了解组件</h4><p>首先，我们看一下下面的图表来了解监控的工作原理：</p><figure><img src="'+i+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>监控 Spring Boot 应用程序大图</p><ul><li>Spring Boot 应用程序有一个 Actuator 模块，允许我们监控和管理我们的应用程序。它与第三方监控工具（如 Prometheus）完美集成。</li><li>Micrometer 从我们的应用程序收集指标并将其公开给外部系统，在本例中为 Prometheus。</li><li>Grafana 是一个可视化工具，可以在仪表板中显示来自数据源（例如 Prometheus）的指标。</li></ul><h4 id="_2-添加依赖项" tabindex="-1"><a class="header-anchor" href="#_2-添加依赖项" aria-hidden="true">#</a> 2. 添加依赖项</h4><p>我为这个演示准备了一个简单的 Spring Boot 项目。您可以在参考资料部分找到完整的源代码。</p><p>我们需要以下依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.micrometer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>micrometer-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.micrometer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>micrometer-registry-prometheus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-配置-spring-boot-actuator" tabindex="-1"><a class="header-anchor" href="#_3-配置-spring-boot-actuator" aria-hidden="true">#</a> 3. 配置 Spring Boot Actuator</h4><p>现在让我们配置<code>application.yml</code>文件来启用监控：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> fanfan<span class="token punctuation">-</span>demo

<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">base-path</span><span class="token punctuation">:</span> /actuator  <span class="token comment"># 所有 Actuator 端点的基础路径</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;health&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;prometheus&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;metrics&quot;</span><span class="token punctuation">]</span>  <span class="token comment"># 暴露健康检查、Prometheus 和 Metrics 端点</span>
  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>
    <span class="token key atrule">health</span><span class="token punctuation">:</span>
      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always  <span class="token comment"># 始终显示健康检查的详细信息</span>

<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-启动项目" tabindex="-1"><a class="header-anchor" href="#_2-启动项目" aria-hidden="true">#</a> 2. 启动项目</h3><p>请注意，我们启用了健康、指标和 Prometheus 路径。</p>`,17),S=n("code",null,"http://localhost:8080/actuator",-1),I={href:"http://localhost:8080/actuator",target:"_blank",rel:"noopener noreferrer"},B=e('<p>您应该看到以下端点：</p><figure><img src="'+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>已启用端点</p><h4 id="_1-端点health" tabindex="-1"><a class="header-anchor" href="#_1-端点health" aria-hidden="true">#</a> 1. 端点<code>health</code></h4><p>显示我们的应用程序是否正在运行：</p><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_2-端点prometheus" tabindex="-1"><a class="header-anchor" href="#_2-端点prometheus" aria-hidden="true">#</a> 2. 端点<code>prometheus</code></h4><p>显示各种指标，例如 JVM 线程状态、有关 HTTP 服务器请求的信息等。</p><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>端点<code>metrics</code>提供有关 JVM 内存、系统 CPU 使用率等的信息。</p><figure><img src="'+k+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_3-编写测试接口" tabindex="-1"><a class="header-anchor" href="#_3-编写测试接口" aria-hidden="true">#</a> 3. 编写测试接口</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodCountController</span> <span class="token punctuation">{</span>

    <span class="token comment">//测试方法</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello-----&quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hello-----&quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-测试监控指标" tabindex="-1"><a class="header-anchor" href="#_4-测试监控指标" aria-hidden="true">#</a> 4. 测试监控指标</h3>`,14),P={href:"http://localhost:8080/hello",target:"_blank",rel:"noopener noreferrer"},V={href:"http://localhost:8080/actuator/prometheus",target:"_blank",rel:"noopener noreferrer"},C=e('<figure><img src="'+g+'" alt="image-20240820143354898" tabindex="0" loading="lazy"><figcaption>image-20240820143354898</figcaption></figure><ol><li><strong>http_server_requests_seconds_count</strong>: 这个计数器（counter）记录了满足特定条件的HTTP请求的数量。在这个例子中，它表示的是没有异常、方法为<code>GET</code>、结果成功（<code>SUCCESS</code>）、状态码为<code>200</code>且URI为<code>/hello</code>的请求总数。数值<code>20598.0</code>意味着这样的请求已经发生了20,598次。</li><li><strong>http_server_requests_seconds_sum</strong>: 这个计数器记录了满足上述相同条件的所有请求处理时间的总和（以秒为单位）。数值<code>5.677197</code>意味着所有这些请求的处理时间加起来总共耗时大约5.677197秒。</li><li><strong>http_server_requests_seconds_max</strong>: 这个指标是一个计量表（gauge），它显示了满足上述条件的所有请求中最长的处理时间。数值<code>0.0356412</code>意味着最长的一个请求处理时间为大约0.0356412秒。</li></ol><p>综上所述，我们可以得出结论，对于路径<code>/hello</code>上的<code>GET</code>请求，它们都是成功的并且没有抛出异常。到目前为止，这类请求总共发生了20,598次，累计处理时间大约为5.677197秒，而单个请求的最长处理时间约为0.0356412秒。</p><blockquote><p>OK，目前为止 SpringBoot 项目已经成功集成了 Prometheus</p></blockquote>',4);function T(z,L){const s=p("ExternalLinkIcon");return c(),l("div",null,[h,n("p",null,[a("在本系列教程中，我将向您展示如何设置"),n("a",v,[a("Prometheus"),t(s)]),a("和"),n("a",_,[a("Grafana"),t(s)]),a("来监控 Spring Boot 应用程序。")]),b,n("ul",null,[f,y,n("li",null,[a("使用"),n("a",x,[a("PromQL"),t(s)]),a("在 Prometheus UI 中查询各种指标")]),q]),w,n("p",null,[a("启动应用程序并打开"),S,n("a",I,[t(s)])]),B,n("p",null,[a("在浏览器访问几次 "),n("a",P,[a("localhost:8080/hello"),t(s)])]),n("p",null,[a("观察 "),n("a",V,[a("localhost:8080/actuator/prometheus"),t(s)]),a(" 内监控指标是否成功记录")]),C])}const j=o(m,[["render",T],["__file","01_SpringBoot项目集成Prometheus.html.vue"]]);export{j as default};
